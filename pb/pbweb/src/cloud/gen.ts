// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "cloud/gen.proto" (syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message GenerateUniqueNumberRequest
 */
export interface GenerateUniqueNumberRequest {
    /**
     * @generated from protobuf field: string sequenceName = 1;
     */
    sequenceName: string;
}
/**
 * @generated from protobuf message GenerateUniqueNumberResponse
 */
export interface GenerateUniqueNumberResponse {
    /**
     * @generated from protobuf field: uint64 uniqueNumber = 1;
     */
    uniqueNumber: number;
}
/**
 * @generated from protobuf message GenerateUniqueStringRequest
 */
export interface GenerateUniqueStringRequest {
    /**
     * @generated from protobuf field: string sequenceName = 1;
     */
    sequenceName: string;
    /**
     * @generated from protobuf field: int32 stringLength = 2;
     */
    stringLength: number;
    /**
     * @generated from protobuf field: string alphabet = 3;
     */
    alphabet: string;
}
/**
 * @generated from protobuf message GenerateUniqueStringResponse
 */
export interface GenerateUniqueStringResponse {
    /**
     * @generated from protobuf field: string uniqueString = 1;
     */
    uniqueString: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class GenerateUniqueNumberRequest$Type extends MessageType<GenerateUniqueNumberRequest> {
    constructor() {
        super("GenerateUniqueNumberRequest", [
            { no: 1, name: "sequenceName", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GenerateUniqueNumberRequest>): GenerateUniqueNumberRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sequenceName = "";
        if (value !== undefined)
            reflectionMergePartial<GenerateUniqueNumberRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GenerateUniqueNumberRequest): GenerateUniqueNumberRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sequenceName */ 1:
                    message.sequenceName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GenerateUniqueNumberRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sequenceName = 1; */
        if (message.sequenceName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sequenceName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GenerateUniqueNumberRequest
 */
export const GenerateUniqueNumberRequest = new GenerateUniqueNumberRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GenerateUniqueNumberResponse$Type extends MessageType<GenerateUniqueNumberResponse> {
    constructor() {
        super("GenerateUniqueNumberResponse", [
            { no: 1, name: "uniqueNumber", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<GenerateUniqueNumberResponse>): GenerateUniqueNumberResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uniqueNumber = 0;
        if (value !== undefined)
            reflectionMergePartial<GenerateUniqueNumberResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GenerateUniqueNumberResponse): GenerateUniqueNumberResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 uniqueNumber */ 1:
                    message.uniqueNumber = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GenerateUniqueNumberResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 uniqueNumber = 1; */
        if (message.uniqueNumber !== 0)
            writer.tag(1, WireType.Varint).uint64(message.uniqueNumber);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GenerateUniqueNumberResponse
 */
export const GenerateUniqueNumberResponse = new GenerateUniqueNumberResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GenerateUniqueStringRequest$Type extends MessageType<GenerateUniqueStringRequest> {
    constructor() {
        super("GenerateUniqueStringRequest", [
            { no: 1, name: "sequenceName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "stringLength", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "alphabet", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GenerateUniqueStringRequest>): GenerateUniqueStringRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sequenceName = "";
        message.stringLength = 0;
        message.alphabet = "";
        if (value !== undefined)
            reflectionMergePartial<GenerateUniqueStringRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GenerateUniqueStringRequest): GenerateUniqueStringRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sequenceName */ 1:
                    message.sequenceName = reader.string();
                    break;
                case /* int32 stringLength */ 2:
                    message.stringLength = reader.int32();
                    break;
                case /* string alphabet */ 3:
                    message.alphabet = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GenerateUniqueStringRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sequenceName = 1; */
        if (message.sequenceName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sequenceName);
        /* int32 stringLength = 2; */
        if (message.stringLength !== 0)
            writer.tag(2, WireType.Varint).int32(message.stringLength);
        /* string alphabet = 3; */
        if (message.alphabet !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.alphabet);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GenerateUniqueStringRequest
 */
export const GenerateUniqueStringRequest = new GenerateUniqueStringRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GenerateUniqueStringResponse$Type extends MessageType<GenerateUniqueStringResponse> {
    constructor() {
        super("GenerateUniqueStringResponse", [
            { no: 1, name: "uniqueString", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GenerateUniqueStringResponse>): GenerateUniqueStringResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uniqueString = "";
        if (value !== undefined)
            reflectionMergePartial<GenerateUniqueStringResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GenerateUniqueStringResponse): GenerateUniqueStringResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string uniqueString */ 1:
                    message.uniqueString = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GenerateUniqueStringResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string uniqueString = 1; */
        if (message.uniqueString !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.uniqueString);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GenerateUniqueStringResponse
 */
export const GenerateUniqueStringResponse = new GenerateUniqueStringResponse$Type();
/**
 * @generated ServiceType for protobuf service Generator
 */
export const Generator = new ServiceType("Generator", [
    { name: "GenerateUniqueNumber", options: {}, I: GenerateUniqueNumberRequest, O: GenerateUniqueNumberResponse },
    { name: "GenerateUniqueString", options: {}, I: GenerateUniqueStringRequest, O: GenerateUniqueStringResponse }
]);
