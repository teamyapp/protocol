// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "cloud/file.proto" (syntax proto3)
// tslint:disable
import { Empty } from "../google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../google/protobuf/timestamp";
/**
 * @generated from protobuf message UploadSession
 */
export interface UploadSession {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: UploadSessionStatus status = 2;
     */
    status: UploadSessionStatus;
    /**
     * @generated from protobuf field: uint64 uploadedSizeInBytes = 3;
     */
    uploadedSizeInBytes: number;
    /**
     * @generated from protobuf field: uint64 fileId = 4;
     */
    fileId: number;
    /**
     * @generated from protobuf field: string fileName = 5;
     */
    fileName: string;
    /**
     * @generated from protobuf field: string mimeType = 6;
     */
    mimeType: string;
    /**
     * @generated from protobuf field: uint64 totalSizeInBytes = 7;
     */
    totalSizeInBytes: number;
    /**
     * @generated from protobuf field: int32 totalNumOfChunks = 8;
     */
    totalNumOfChunks: number;
    /**
     * @generated from protobuf field: repeated uint64 chunkIDs = 9;
     */
    chunkIDs: number[];
    /**
     * @generated from protobuf field: int32 nextChunkIndexToUpload = 10;
     */
    nextChunkIndexToUpload: number;
    /**
     * @generated from protobuf field: string actualContentHash = 11;
     */
    actualContentHash: string;
    /**
     * @generated from protobuf field: string expectedContentHash = 12;
     */
    expectedContentHash: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp createdAt = 13;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: optional google.protobuf.Timestamp updatedAt = 14;
     */
    updatedAt?: Timestamp;
}
/**
 * @generated from protobuf message FindUploadSessionRequest
 */
export interface FindUploadSessionRequest {
    /**
     * @generated from protobuf field: uint64 uploadSessionId = 1;
     */
    uploadSessionId: number;
}
/**
 * @generated from protobuf message CreateUploadSessionResponse
 */
export interface CreateUploadSessionResponse {
    /**
     * @generated from protobuf field: uint64 uploadSessionId = 1;
     */
    uploadSessionId: number;
}
/**
 * @generated from protobuf enum UploadSessionStatus
 */
export enum UploadSessionStatus {
    /**
     * @generated from protobuf enum value: CREATED = 0;
     */
    CREATED = 0,
    /**
     * @generated from protobuf enum value: INITIALIZED = 1;
     */
    INITIALIZED = 1,
    /**
     * @generated from protobuf enum value: UPLOADING_CHUNKS = 2;
     */
    UPLOADING_CHUNKS = 2,
    /**
     * @generated from protobuf enum value: COMPLETED = 3;
     */
    COMPLETED = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class UploadSession$Type extends MessageType<UploadSession> {
    constructor() {
        super("UploadSession", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "status", kind: "enum", T: () => ["UploadSessionStatus", UploadSessionStatus] },
            { no: 3, name: "uploadedSizeInBytes", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "fileId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "fileName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "mimeType", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "totalSizeInBytes", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 8, name: "totalNumOfChunks", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "chunkIDs", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 10, name: "nextChunkIndexToUpload", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "actualContentHash", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "expectedContentHash", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "createdAt", kind: "message", T: () => Timestamp },
            { no: 14, name: "updatedAt", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<UploadSession>): UploadSession {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.status = 0;
        message.uploadedSizeInBytes = 0;
        message.fileId = 0;
        message.fileName = "";
        message.mimeType = "";
        message.totalSizeInBytes = 0;
        message.totalNumOfChunks = 0;
        message.chunkIDs = [];
        message.nextChunkIndexToUpload = 0;
        message.actualContentHash = "";
        message.expectedContentHash = "";
        if (value !== undefined)
            reflectionMergePartial<UploadSession>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UploadSession): UploadSession {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toNumber();
                    break;
                case /* UploadSessionStatus status */ 2:
                    message.status = reader.int32();
                    break;
                case /* uint64 uploadedSizeInBytes */ 3:
                    message.uploadedSizeInBytes = reader.uint64().toNumber();
                    break;
                case /* uint64 fileId */ 4:
                    message.fileId = reader.uint64().toNumber();
                    break;
                case /* string fileName */ 5:
                    message.fileName = reader.string();
                    break;
                case /* string mimeType */ 6:
                    message.mimeType = reader.string();
                    break;
                case /* uint64 totalSizeInBytes */ 7:
                    message.totalSizeInBytes = reader.uint64().toNumber();
                    break;
                case /* int32 totalNumOfChunks */ 8:
                    message.totalNumOfChunks = reader.int32();
                    break;
                case /* repeated uint64 chunkIDs */ 9:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.chunkIDs.push(reader.uint64().toNumber());
                    else
                        message.chunkIDs.push(reader.uint64().toNumber());
                    break;
                case /* int32 nextChunkIndexToUpload */ 10:
                    message.nextChunkIndexToUpload = reader.int32();
                    break;
                case /* string actualContentHash */ 11:
                    message.actualContentHash = reader.string();
                    break;
                case /* string expectedContentHash */ 12:
                    message.expectedContentHash = reader.string();
                    break;
                case /* google.protobuf.Timestamp createdAt */ 13:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* optional google.protobuf.Timestamp updatedAt */ 14:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UploadSession, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* UploadSessionStatus status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        /* uint64 uploadedSizeInBytes = 3; */
        if (message.uploadedSizeInBytes !== 0)
            writer.tag(3, WireType.Varint).uint64(message.uploadedSizeInBytes);
        /* uint64 fileId = 4; */
        if (message.fileId !== 0)
            writer.tag(4, WireType.Varint).uint64(message.fileId);
        /* string fileName = 5; */
        if (message.fileName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.fileName);
        /* string mimeType = 6; */
        if (message.mimeType !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.mimeType);
        /* uint64 totalSizeInBytes = 7; */
        if (message.totalSizeInBytes !== 0)
            writer.tag(7, WireType.Varint).uint64(message.totalSizeInBytes);
        /* int32 totalNumOfChunks = 8; */
        if (message.totalNumOfChunks !== 0)
            writer.tag(8, WireType.Varint).int32(message.totalNumOfChunks);
        /* repeated uint64 chunkIDs = 9; */
        if (message.chunkIDs.length) {
            writer.tag(9, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.chunkIDs.length; i++)
                writer.uint64(message.chunkIDs[i]);
            writer.join();
        }
        /* int32 nextChunkIndexToUpload = 10; */
        if (message.nextChunkIndexToUpload !== 0)
            writer.tag(10, WireType.Varint).int32(message.nextChunkIndexToUpload);
        /* string actualContentHash = 11; */
        if (message.actualContentHash !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.actualContentHash);
        /* string expectedContentHash = 12; */
        if (message.expectedContentHash !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.expectedContentHash);
        /* google.protobuf.Timestamp createdAt = 13; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* optional google.protobuf.Timestamp updatedAt = 14; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UploadSession
 */
export const UploadSession = new UploadSession$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FindUploadSessionRequest$Type extends MessageType<FindUploadSessionRequest> {
    constructor() {
        super("FindUploadSessionRequest", [
            { no: 1, name: "uploadSessionId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<FindUploadSessionRequest>): FindUploadSessionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uploadSessionId = 0;
        if (value !== undefined)
            reflectionMergePartial<FindUploadSessionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FindUploadSessionRequest): FindUploadSessionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 uploadSessionId */ 1:
                    message.uploadSessionId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FindUploadSessionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 uploadSessionId = 1; */
        if (message.uploadSessionId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.uploadSessionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FindUploadSessionRequest
 */
export const FindUploadSessionRequest = new FindUploadSessionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateUploadSessionResponse$Type extends MessageType<CreateUploadSessionResponse> {
    constructor() {
        super("CreateUploadSessionResponse", [
            { no: 1, name: "uploadSessionId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<CreateUploadSessionResponse>): CreateUploadSessionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uploadSessionId = 0;
        if (value !== undefined)
            reflectionMergePartial<CreateUploadSessionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateUploadSessionResponse): CreateUploadSessionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 uploadSessionId */ 1:
                    message.uploadSessionId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateUploadSessionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 uploadSessionId = 1; */
        if (message.uploadSessionId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.uploadSessionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateUploadSessionResponse
 */
export const CreateUploadSessionResponse = new CreateUploadSessionResponse$Type();
/**
 * @generated ServiceType for protobuf service File
 */
export const File = new ServiceType("File", [
    { name: "FindUploadSession", options: {}, I: FindUploadSessionRequest, O: UploadSession },
    { name: "CreateUploadSession", options: {}, I: Empty, O: CreateUploadSessionResponse }
]);
