// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "cloud/identity.proto" (syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message UserLink
 */
export interface UserLink {
    /**
     * @generated from protobuf field: string authProvider = 1;
     */
    authProvider: string;
    /**
     * @generated from protobuf field: uint64 internalUserId = 2;
     */
    internalUserId: number;
    /**
     * @generated from protobuf field: string externalUserId = 3;
     */
    externalUserId: string;
    /**
     * @generated from protobuf field: string externalUserLabel = 4;
     */
    externalUserLabel: string;
}
/**
 * @generated from protobuf message GetInternalUserIdRequest
 */
export interface GetInternalUserIdRequest {
    /**
     * @generated from protobuf field: string authProvider = 1;
     */
    authProvider: string;
    /**
     * @generated from protobuf field: string externalUserId = 2;
     */
    externalUserId: string;
}
/**
 * @generated from protobuf message GetInternalUserIdResponse
 */
export interface GetInternalUserIdResponse {
    /**
     * @generated from protobuf field: uint64 internalUserId = 1;
     */
    internalUserId: number;
}
/**
 * @generated from protobuf message ListUserLinksRequest
 */
export interface ListUserLinksRequest {
    /**
     * @generated from protobuf field: uint64 internalUserId = 1;
     */
    internalUserId: number;
}
/**
 * @generated from protobuf message ListUserLinksResponse
 */
export interface ListUserLinksResponse {
    /**
     * @generated from protobuf field: repeated UserLink userLinks = 1;
     */
    userLinks: UserLink[];
}
// @generated message type with reflection information, may provide speed optimized methods
class UserLink$Type extends MessageType<UserLink> {
    constructor() {
        super("UserLink", [
            { no: 1, name: "authProvider", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "internalUserId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "externalUserId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "externalUserLabel", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UserLink>): UserLink {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.authProvider = "";
        message.internalUserId = 0;
        message.externalUserId = "";
        message.externalUserLabel = "";
        if (value !== undefined)
            reflectionMergePartial<UserLink>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserLink): UserLink {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string authProvider */ 1:
                    message.authProvider = reader.string();
                    break;
                case /* uint64 internalUserId */ 2:
                    message.internalUserId = reader.uint64().toNumber();
                    break;
                case /* string externalUserId */ 3:
                    message.externalUserId = reader.string();
                    break;
                case /* string externalUserLabel */ 4:
                    message.externalUserLabel = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserLink, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string authProvider = 1; */
        if (message.authProvider !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.authProvider);
        /* uint64 internalUserId = 2; */
        if (message.internalUserId !== 0)
            writer.tag(2, WireType.Varint).uint64(message.internalUserId);
        /* string externalUserId = 3; */
        if (message.externalUserId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.externalUserId);
        /* string externalUserLabel = 4; */
        if (message.externalUserLabel !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.externalUserLabel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UserLink
 */
export const UserLink = new UserLink$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetInternalUserIdRequest$Type extends MessageType<GetInternalUserIdRequest> {
    constructor() {
        super("GetInternalUserIdRequest", [
            { no: 1, name: "authProvider", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "externalUserId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetInternalUserIdRequest>): GetInternalUserIdRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.authProvider = "";
        message.externalUserId = "";
        if (value !== undefined)
            reflectionMergePartial<GetInternalUserIdRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetInternalUserIdRequest): GetInternalUserIdRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string authProvider */ 1:
                    message.authProvider = reader.string();
                    break;
                case /* string externalUserId */ 2:
                    message.externalUserId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetInternalUserIdRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string authProvider = 1; */
        if (message.authProvider !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.authProvider);
        /* string externalUserId = 2; */
        if (message.externalUserId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.externalUserId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetInternalUserIdRequest
 */
export const GetInternalUserIdRequest = new GetInternalUserIdRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetInternalUserIdResponse$Type extends MessageType<GetInternalUserIdResponse> {
    constructor() {
        super("GetInternalUserIdResponse", [
            { no: 1, name: "internalUserId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<GetInternalUserIdResponse>): GetInternalUserIdResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.internalUserId = 0;
        if (value !== undefined)
            reflectionMergePartial<GetInternalUserIdResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetInternalUserIdResponse): GetInternalUserIdResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 internalUserId */ 1:
                    message.internalUserId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetInternalUserIdResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 internalUserId = 1; */
        if (message.internalUserId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.internalUserId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetInternalUserIdResponse
 */
export const GetInternalUserIdResponse = new GetInternalUserIdResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListUserLinksRequest$Type extends MessageType<ListUserLinksRequest> {
    constructor() {
        super("ListUserLinksRequest", [
            { no: 1, name: "internalUserId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<ListUserLinksRequest>): ListUserLinksRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.internalUserId = 0;
        if (value !== undefined)
            reflectionMergePartial<ListUserLinksRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListUserLinksRequest): ListUserLinksRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 internalUserId */ 1:
                    message.internalUserId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListUserLinksRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 internalUserId = 1; */
        if (message.internalUserId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.internalUserId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListUserLinksRequest
 */
export const ListUserLinksRequest = new ListUserLinksRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListUserLinksResponse$Type extends MessageType<ListUserLinksResponse> {
    constructor() {
        super("ListUserLinksResponse", [
            { no: 1, name: "userLinks", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => UserLink }
        ]);
    }
    create(value?: PartialMessage<ListUserLinksResponse>): ListUserLinksResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userLinks = [];
        if (value !== undefined)
            reflectionMergePartial<ListUserLinksResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListUserLinksResponse): ListUserLinksResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated UserLink userLinks */ 1:
                    message.userLinks.push(UserLink.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListUserLinksResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated UserLink userLinks = 1; */
        for (let i = 0; i < message.userLinks.length; i++)
            UserLink.internalBinaryWrite(message.userLinks[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListUserLinksResponse
 */
export const ListUserLinksResponse = new ListUserLinksResponse$Type();
/**
 * @generated ServiceType for protobuf service Identity
 */
export const Identity = new ServiceType("Identity", [
    { name: "GetInternalUserId", options: {}, I: GetInternalUserIdRequest, O: GetInternalUserIdResponse },
    { name: "ListUserLinks", options: {}, I: ListUserLinksRequest, O: ListUserLinksResponse }
]);
