// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "teamy/version_selector_service.proto" (syntax proto3)
// tslint:disable
import { Empty } from "../google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { VersionSelectorType } from "./message/version_selector";
import { ExperimentVersionSelector } from "./message/version_selector";
import { StaticVersionSelector } from "./message/version_selector";
import { VersionSelector } from "./message/version_selector";
/**
 * @generated from protobuf message GetVersionSelectorRequest
 */
export interface GetVersionSelectorRequest {
    /**
     * @generated from protobuf field: uint64 versionSelectorId = 1;
     */
    versionSelectorId: number;
}
/**
 * @generated from protobuf message GetVersionSelectorResponse
 */
export interface GetVersionSelectorResponse {
    /**
     * @generated from protobuf field: VersionSelector versionSelector = 1;
     */
    versionSelector?: VersionSelector;
}
/**
 * @generated from protobuf message ListVersionSelectorsRequest
 */
export interface ListVersionSelectorsRequest {
    /**
     * @generated from protobuf field: repeated uint64 versionSelectorIds = 1;
     */
    versionSelectorIds: number[];
}
/**
 * @generated from protobuf message ListVersionSelectorsResponse
 */
export interface ListVersionSelectorsResponse {
    /**
     * @generated from protobuf field: repeated VersionSelector versionSelectors = 1;
     */
    versionSelectors: VersionSelector[];
}
/**
 * @generated from protobuf message CreateStaticVersionSelectorRequest
 */
export interface CreateStaticVersionSelectorRequest {
    /**
     * @generated from protobuf field: uint64 appId = 1;
     */
    appId: number;
    /**
     * @generated from protobuf field: uint32 versionNumber = 2;
     */
    versionNumber: number;
}
/**
 * @generated from protobuf message CreateStaticVersionSelectorResponse
 */
export interface CreateStaticVersionSelectorResponse {
    /**
     * @generated from protobuf field: StaticVersionSelector staticVersionSelector = 1;
     */
    staticVersionSelector?: StaticVersionSelector;
}
/**
 * @generated from protobuf message CreateExperimentVersionSelectorRequest
 */
export interface CreateExperimentVersionSelectorRequest {
    /**
     * @generated from protobuf field: uint64 appId = 1;
     */
    appId: number;
    /**
     * @generated from protobuf field: repeated uint64 versionNumbers = 2;
     */
    versionNumbers: number[];
}
/**
 * @generated from protobuf message CreateExperimentVersionSelectorResponse
 */
export interface CreateExperimentVersionSelectorResponse {
    /**
     * @generated from protobuf field: ExperimentVersionSelector experimentVersionSelector = 1;
     */
    experimentVersionSelector?: ExperimentVersionSelector;
}
/**
 * @generated from protobuf message UpdateVersionSelectorRequest
 */
export interface UpdateVersionSelectorRequest {
    /**
     * @generated from protobuf field: uint64 appId = 1;
     */
    appId: number;
    /**
     * @generated from protobuf field: uint64 versionSelectorId = 2;
     */
    versionSelectorId: number;
    /**
     * @generated from protobuf field: VersionSelectorType type = 3;
     */
    type: VersionSelectorType;
    /**
     * @generated from protobuf field: optional uint32 versionNumber = 4;
     */
    versionNumber?: number;
    /**
     * @generated from protobuf field: repeated uint32 versionNumbers = 5;
     */
    versionNumbers: number[];
}
/**
 * @generated from protobuf message UpdateVersionSelectorResponse
 */
export interface UpdateVersionSelectorResponse {
    /**
     * @generated from protobuf field: VersionSelector versionSelector = 1;
     */
    versionSelector?: VersionSelector;
}
/**
 * @generated from protobuf message DeleteVersionSelectorRequest
 */
export interface DeleteVersionSelectorRequest {
    /**
     * @generated from protobuf field: uint64 versionSelectorId = 1;
     */
    versionSelectorId: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetVersionSelectorRequest$Type extends MessageType<GetVersionSelectorRequest> {
    constructor() {
        super("GetVersionSelectorRequest", [
            { no: 1, name: "versionSelectorId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<GetVersionSelectorRequest>): GetVersionSelectorRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.versionSelectorId = 0;
        if (value !== undefined)
            reflectionMergePartial<GetVersionSelectorRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetVersionSelectorRequest): GetVersionSelectorRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 versionSelectorId */ 1:
                    message.versionSelectorId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetVersionSelectorRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 versionSelectorId = 1; */
        if (message.versionSelectorId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.versionSelectorId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetVersionSelectorRequest
 */
export const GetVersionSelectorRequest = new GetVersionSelectorRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetVersionSelectorResponse$Type extends MessageType<GetVersionSelectorResponse> {
    constructor() {
        super("GetVersionSelectorResponse", [
            { no: 1, name: "versionSelector", kind: "message", T: () => VersionSelector }
        ]);
    }
    create(value?: PartialMessage<GetVersionSelectorResponse>): GetVersionSelectorResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetVersionSelectorResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetVersionSelectorResponse): GetVersionSelectorResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* VersionSelector versionSelector */ 1:
                    message.versionSelector = VersionSelector.internalBinaryRead(reader, reader.uint32(), options, message.versionSelector);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetVersionSelectorResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* VersionSelector versionSelector = 1; */
        if (message.versionSelector)
            VersionSelector.internalBinaryWrite(message.versionSelector, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetVersionSelectorResponse
 */
export const GetVersionSelectorResponse = new GetVersionSelectorResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListVersionSelectorsRequest$Type extends MessageType<ListVersionSelectorsRequest> {
    constructor() {
        super("ListVersionSelectorsRequest", [
            { no: 1, name: "versionSelectorIds", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<ListVersionSelectorsRequest>): ListVersionSelectorsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.versionSelectorIds = [];
        if (value !== undefined)
            reflectionMergePartial<ListVersionSelectorsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListVersionSelectorsRequest): ListVersionSelectorsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint64 versionSelectorIds */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.versionSelectorIds.push(reader.uint64().toNumber());
                    else
                        message.versionSelectorIds.push(reader.uint64().toNumber());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListVersionSelectorsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint64 versionSelectorIds = 1; */
        if (message.versionSelectorIds.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.versionSelectorIds.length; i++)
                writer.uint64(message.versionSelectorIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListVersionSelectorsRequest
 */
export const ListVersionSelectorsRequest = new ListVersionSelectorsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListVersionSelectorsResponse$Type extends MessageType<ListVersionSelectorsResponse> {
    constructor() {
        super("ListVersionSelectorsResponse", [
            { no: 1, name: "versionSelectors", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => VersionSelector }
        ]);
    }
    create(value?: PartialMessage<ListVersionSelectorsResponse>): ListVersionSelectorsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.versionSelectors = [];
        if (value !== undefined)
            reflectionMergePartial<ListVersionSelectorsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListVersionSelectorsResponse): ListVersionSelectorsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated VersionSelector versionSelectors */ 1:
                    message.versionSelectors.push(VersionSelector.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListVersionSelectorsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated VersionSelector versionSelectors = 1; */
        for (let i = 0; i < message.versionSelectors.length; i++)
            VersionSelector.internalBinaryWrite(message.versionSelectors[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListVersionSelectorsResponse
 */
export const ListVersionSelectorsResponse = new ListVersionSelectorsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateStaticVersionSelectorRequest$Type extends MessageType<CreateStaticVersionSelectorRequest> {
    constructor() {
        super("CreateStaticVersionSelectorRequest", [
            { no: 1, name: "appId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "versionNumber", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CreateStaticVersionSelectorRequest>): CreateStaticVersionSelectorRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.appId = 0;
        message.versionNumber = 0;
        if (value !== undefined)
            reflectionMergePartial<CreateStaticVersionSelectorRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateStaticVersionSelectorRequest): CreateStaticVersionSelectorRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 appId */ 1:
                    message.appId = reader.uint64().toNumber();
                    break;
                case /* uint32 versionNumber */ 2:
                    message.versionNumber = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateStaticVersionSelectorRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 appId = 1; */
        if (message.appId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.appId);
        /* uint32 versionNumber = 2; */
        if (message.versionNumber !== 0)
            writer.tag(2, WireType.Varint).uint32(message.versionNumber);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateStaticVersionSelectorRequest
 */
export const CreateStaticVersionSelectorRequest = new CreateStaticVersionSelectorRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateStaticVersionSelectorResponse$Type extends MessageType<CreateStaticVersionSelectorResponse> {
    constructor() {
        super("CreateStaticVersionSelectorResponse", [
            { no: 1, name: "staticVersionSelector", kind: "message", T: () => StaticVersionSelector }
        ]);
    }
    create(value?: PartialMessage<CreateStaticVersionSelectorResponse>): CreateStaticVersionSelectorResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateStaticVersionSelectorResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateStaticVersionSelectorResponse): CreateStaticVersionSelectorResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* StaticVersionSelector staticVersionSelector */ 1:
                    message.staticVersionSelector = StaticVersionSelector.internalBinaryRead(reader, reader.uint32(), options, message.staticVersionSelector);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateStaticVersionSelectorResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* StaticVersionSelector staticVersionSelector = 1; */
        if (message.staticVersionSelector)
            StaticVersionSelector.internalBinaryWrite(message.staticVersionSelector, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateStaticVersionSelectorResponse
 */
export const CreateStaticVersionSelectorResponse = new CreateStaticVersionSelectorResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateExperimentVersionSelectorRequest$Type extends MessageType<CreateExperimentVersionSelectorRequest> {
    constructor() {
        super("CreateExperimentVersionSelectorRequest", [
            { no: 1, name: "appId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "versionNumbers", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<CreateExperimentVersionSelectorRequest>): CreateExperimentVersionSelectorRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.appId = 0;
        message.versionNumbers = [];
        if (value !== undefined)
            reflectionMergePartial<CreateExperimentVersionSelectorRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateExperimentVersionSelectorRequest): CreateExperimentVersionSelectorRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 appId */ 1:
                    message.appId = reader.uint64().toNumber();
                    break;
                case /* repeated uint64 versionNumbers */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.versionNumbers.push(reader.uint64().toNumber());
                    else
                        message.versionNumbers.push(reader.uint64().toNumber());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateExperimentVersionSelectorRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 appId = 1; */
        if (message.appId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.appId);
        /* repeated uint64 versionNumbers = 2; */
        if (message.versionNumbers.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.versionNumbers.length; i++)
                writer.uint64(message.versionNumbers[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateExperimentVersionSelectorRequest
 */
export const CreateExperimentVersionSelectorRequest = new CreateExperimentVersionSelectorRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateExperimentVersionSelectorResponse$Type extends MessageType<CreateExperimentVersionSelectorResponse> {
    constructor() {
        super("CreateExperimentVersionSelectorResponse", [
            { no: 1, name: "experimentVersionSelector", kind: "message", T: () => ExperimentVersionSelector }
        ]);
    }
    create(value?: PartialMessage<CreateExperimentVersionSelectorResponse>): CreateExperimentVersionSelectorResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateExperimentVersionSelectorResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateExperimentVersionSelectorResponse): CreateExperimentVersionSelectorResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ExperimentVersionSelector experimentVersionSelector */ 1:
                    message.experimentVersionSelector = ExperimentVersionSelector.internalBinaryRead(reader, reader.uint32(), options, message.experimentVersionSelector);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateExperimentVersionSelectorResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ExperimentVersionSelector experimentVersionSelector = 1; */
        if (message.experimentVersionSelector)
            ExperimentVersionSelector.internalBinaryWrite(message.experimentVersionSelector, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateExperimentVersionSelectorResponse
 */
export const CreateExperimentVersionSelectorResponse = new CreateExperimentVersionSelectorResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateVersionSelectorRequest$Type extends MessageType<UpdateVersionSelectorRequest> {
    constructor() {
        super("UpdateVersionSelectorRequest", [
            { no: 1, name: "appId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "versionSelectorId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "type", kind: "enum", T: () => ["VersionSelectorType", VersionSelectorType, "VERSION_SELECTOR_TYPE_"] },
            { no: 4, name: "versionNumber", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "versionNumbers", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateVersionSelectorRequest>): UpdateVersionSelectorRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.appId = 0;
        message.versionSelectorId = 0;
        message.type = 0;
        message.versionNumbers = [];
        if (value !== undefined)
            reflectionMergePartial<UpdateVersionSelectorRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateVersionSelectorRequest): UpdateVersionSelectorRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 appId */ 1:
                    message.appId = reader.uint64().toNumber();
                    break;
                case /* uint64 versionSelectorId */ 2:
                    message.versionSelectorId = reader.uint64().toNumber();
                    break;
                case /* VersionSelectorType type */ 3:
                    message.type = reader.int32();
                    break;
                case /* optional uint32 versionNumber */ 4:
                    message.versionNumber = reader.uint32();
                    break;
                case /* repeated uint32 versionNumbers */ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.versionNumbers.push(reader.uint32());
                    else
                        message.versionNumbers.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateVersionSelectorRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 appId = 1; */
        if (message.appId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.appId);
        /* uint64 versionSelectorId = 2; */
        if (message.versionSelectorId !== 0)
            writer.tag(2, WireType.Varint).uint64(message.versionSelectorId);
        /* VersionSelectorType type = 3; */
        if (message.type !== 0)
            writer.tag(3, WireType.Varint).int32(message.type);
        /* optional uint32 versionNumber = 4; */
        if (message.versionNumber !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.versionNumber);
        /* repeated uint32 versionNumbers = 5; */
        if (message.versionNumbers.length) {
            writer.tag(5, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.versionNumbers.length; i++)
                writer.uint32(message.versionNumbers[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateVersionSelectorRequest
 */
export const UpdateVersionSelectorRequest = new UpdateVersionSelectorRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateVersionSelectorResponse$Type extends MessageType<UpdateVersionSelectorResponse> {
    constructor() {
        super("UpdateVersionSelectorResponse", [
            { no: 1, name: "versionSelector", kind: "message", T: () => VersionSelector }
        ]);
    }
    create(value?: PartialMessage<UpdateVersionSelectorResponse>): UpdateVersionSelectorResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateVersionSelectorResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateVersionSelectorResponse): UpdateVersionSelectorResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* VersionSelector versionSelector */ 1:
                    message.versionSelector = VersionSelector.internalBinaryRead(reader, reader.uint32(), options, message.versionSelector);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateVersionSelectorResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* VersionSelector versionSelector = 1; */
        if (message.versionSelector)
            VersionSelector.internalBinaryWrite(message.versionSelector, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateVersionSelectorResponse
 */
export const UpdateVersionSelectorResponse = new UpdateVersionSelectorResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteVersionSelectorRequest$Type extends MessageType<DeleteVersionSelectorRequest> {
    constructor() {
        super("DeleteVersionSelectorRequest", [
            { no: 1, name: "versionSelectorId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteVersionSelectorRequest>): DeleteVersionSelectorRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.versionSelectorId = 0;
        if (value !== undefined)
            reflectionMergePartial<DeleteVersionSelectorRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteVersionSelectorRequest): DeleteVersionSelectorRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 versionSelectorId */ 1:
                    message.versionSelectorId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteVersionSelectorRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 versionSelectorId = 1; */
        if (message.versionSelectorId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.versionSelectorId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteVersionSelectorRequest
 */
export const DeleteVersionSelectorRequest = new DeleteVersionSelectorRequest$Type();
/**
 * @generated ServiceType for protobuf service VersionSelectorService
 */
export const VersionSelectorService = new ServiceType("VersionSelectorService", [
    { name: "GetVersionSelector", options: {}, I: GetVersionSelectorRequest, O: GetVersionSelectorResponse },
    { name: "ListVersionSelectors", options: {}, I: ListVersionSelectorsRequest, O: ListVersionSelectorsResponse },
    { name: "CreateStaticVersionSelector", options: {}, I: CreateStaticVersionSelectorRequest, O: CreateStaticVersionSelectorResponse },
    { name: "CreateExperimentVersionSelector", options: {}, I: CreateExperimentVersionSelectorRequest, O: CreateExperimentVersionSelectorResponse },
    { name: "UpdateVersionSelector", options: {}, I: UpdateVersionSelectorRequest, O: UpdateVersionSelectorResponse },
    { name: "DeleteVersionSelector", options: {}, I: DeleteVersionSelectorRequest, O: Empty }
]);
