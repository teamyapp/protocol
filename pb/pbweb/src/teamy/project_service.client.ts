// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "teamy/project_service.proto" (syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ProjectService } from "./project_service";
import type { Empty } from "../google/protobuf/empty";
import type { DeleteProjectRequest } from "./project_service";
import type { UpdateProjectResponse } from "./project_service";
import type { UpdateProjectRequest } from "./project_service";
import type { CreateProjectResponse } from "./project_service";
import type { CreateProjectRequest } from "./project_service";
import type { ListProjectsResponse } from "./project_service";
import type { ListProjectsRequest } from "./project_service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetProjectResponse } from "./project_service";
import type { GetProjectRequest } from "./project_service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service ProjectService
 */
export interface IProjectServiceClient {
    /**
     * @generated from protobuf rpc: GetProject(GetProjectRequest) returns (GetProjectResponse);
     */
    getProject(input: GetProjectRequest, options?: RpcOptions): UnaryCall<GetProjectRequest, GetProjectResponse>;
    /**
     * @generated from protobuf rpc: ListProjects(ListProjectsRequest) returns (ListProjectsResponse);
     */
    listProjects(input: ListProjectsRequest, options?: RpcOptions): UnaryCall<ListProjectsRequest, ListProjectsResponse>;
    /**
     * @generated from protobuf rpc: CreateProject(CreateProjectRequest) returns (CreateProjectResponse);
     */
    createProject(input: CreateProjectRequest, options?: RpcOptions): UnaryCall<CreateProjectRequest, CreateProjectResponse>;
    /**
     * @generated from protobuf rpc: UpdateProject(UpdateProjectRequest) returns (UpdateProjectResponse);
     */
    updateProject(input: UpdateProjectRequest, options?: RpcOptions): UnaryCall<UpdateProjectRequest, UpdateProjectResponse>;
    /**
     * @generated from protobuf rpc: DeleteProject(DeleteProjectRequest) returns (google.protobuf.Empty);
     */
    deleteProject(input: DeleteProjectRequest, options?: RpcOptions): UnaryCall<DeleteProjectRequest, Empty>;
}
/**
 * @generated from protobuf service ProjectService
 */
export class ProjectServiceClient implements IProjectServiceClient, ServiceInfo {
    typeName = ProjectService.typeName;
    methods = ProjectService.methods;
    options = ProjectService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetProject(GetProjectRequest) returns (GetProjectResponse);
     */
    getProject(input: GetProjectRequest, options?: RpcOptions): UnaryCall<GetProjectRequest, GetProjectResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetProjectRequest, GetProjectResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListProjects(ListProjectsRequest) returns (ListProjectsResponse);
     */
    listProjects(input: ListProjectsRequest, options?: RpcOptions): UnaryCall<ListProjectsRequest, ListProjectsResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListProjectsRequest, ListProjectsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateProject(CreateProjectRequest) returns (CreateProjectResponse);
     */
    createProject(input: CreateProjectRequest, options?: RpcOptions): UnaryCall<CreateProjectRequest, CreateProjectResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateProjectRequest, CreateProjectResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateProject(UpdateProjectRequest) returns (UpdateProjectResponse);
     */
    updateProject(input: UpdateProjectRequest, options?: RpcOptions): UnaryCall<UpdateProjectRequest, UpdateProjectResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateProjectRequest, UpdateProjectResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteProject(DeleteProjectRequest) returns (google.protobuf.Empty);
     */
    deleteProject(input: DeleteProjectRequest, options?: RpcOptions): UnaryCall<DeleteProjectRequest, Empty> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteProjectRequest, Empty>("unary", this._transport, method, opt, input);
    }
}
