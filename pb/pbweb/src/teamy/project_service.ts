// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "teamy/project_service.proto" (syntax proto3)
// tslint:disable
import { Empty } from "../google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../google/protobuf/timestamp";
import { Project } from "./message/project";
/**
 * @generated from protobuf message GetProjectRequest
 */
export interface GetProjectRequest {
    /**
     * @generated from protobuf field: uint64 projectId = 1;
     */
    projectId: number;
}
/**
 * @generated from protobuf message GetProjectResponse
 */
export interface GetProjectResponse {
    /**
     * @generated from protobuf field: Project project = 1;
     */
    project?: Project;
}
/**
 * @generated from protobuf message ListProjectsRequest
 */
export interface ListProjectsRequest {
    /**
     * @generated from protobuf field: repeated uint64 projectIds = 1;
     */
    projectIds: number[];
}
/**
 * @generated from protobuf message ListProjectsResponse
 */
export interface ListProjectsResponse {
    /**
     * @generated from protobuf field: repeated Project projects = 1;
     */
    projects: Project[];
}
/**
 * @generated from protobuf message CreateProjectRequest
 */
export interface CreateProjectRequest {
    /**
     * @generated from protobuf field: uint64 teamId = 1;
     */
    teamId: number;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp expectedStartAt = 3;
     */
    expectedStartAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp expectedEndAt = 4;
     */
    expectedEndAt?: Timestamp;
    /**
     * @generated from protobuf field: string iconUrl = 5;
     */
    iconUrl: string;
    /**
     * @generated from protobuf field: string color = 6;
     */
    color: string;
}
/**
 * @generated from protobuf message CreateProjectResponse
 */
export interface CreateProjectResponse {
    /**
     * @generated from protobuf field: Project project = 1;
     */
    project?: Project;
}
/**
 * @generated from protobuf message UpdateProjectRequest
 */
export interface UpdateProjectRequest {
    /**
     * @generated from protobuf field: uint64 projectId = 1;
     */
    projectId: number;
    /**
     * @generated from protobuf field: optional string name = 2;
     */
    name?: string;
    /**
     * @generated from protobuf field: optional google.protobuf.Timestamp expectedStartAt = 3;
     */
    expectedStartAt?: Timestamp;
    /**
     * @generated from protobuf field: optional google.protobuf.Timestamp expectedEndAt = 4;
     */
    expectedEndAt?: Timestamp;
    /**
     * @generated from protobuf field: optional google.protobuf.Timestamp actualStartAt = 5;
     */
    actualStartAt?: Timestamp;
    /**
     * @generated from protobuf field: optional google.protobuf.Timestamp actualEndAt = 6;
     */
    actualEndAt?: Timestamp;
    /**
     * @generated from protobuf field: optional string iconUrl = 7;
     */
    iconUrl?: string;
    /**
     * @generated from protobuf field: optional string color = 8;
     */
    color?: string;
}
/**
 * @generated from protobuf message UpdateProjectResponse
 */
export interface UpdateProjectResponse {
    /**
     * @generated from protobuf field: Project project = 1;
     */
    project?: Project;
}
/**
 * @generated from protobuf message DeleteProjectRequest
 */
export interface DeleteProjectRequest {
    /**
     * @generated from protobuf field: uint64 projectId = 1;
     */
    projectId: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetProjectRequest$Type extends MessageType<GetProjectRequest> {
    constructor() {
        super("GetProjectRequest", [
            { no: 1, name: "projectId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<GetProjectRequest>): GetProjectRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.projectId = 0;
        if (value !== undefined)
            reflectionMergePartial<GetProjectRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetProjectRequest): GetProjectRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 projectId */ 1:
                    message.projectId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetProjectRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 projectId = 1; */
        if (message.projectId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.projectId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetProjectRequest
 */
export const GetProjectRequest = new GetProjectRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetProjectResponse$Type extends MessageType<GetProjectResponse> {
    constructor() {
        super("GetProjectResponse", [
            { no: 1, name: "project", kind: "message", T: () => Project }
        ]);
    }
    create(value?: PartialMessage<GetProjectResponse>): GetProjectResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetProjectResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetProjectResponse): GetProjectResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Project project */ 1:
                    message.project = Project.internalBinaryRead(reader, reader.uint32(), options, message.project);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetProjectResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Project project = 1; */
        if (message.project)
            Project.internalBinaryWrite(message.project, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetProjectResponse
 */
export const GetProjectResponse = new GetProjectResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListProjectsRequest$Type extends MessageType<ListProjectsRequest> {
    constructor() {
        super("ListProjectsRequest", [
            { no: 1, name: "projectIds", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<ListProjectsRequest>): ListProjectsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.projectIds = [];
        if (value !== undefined)
            reflectionMergePartial<ListProjectsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListProjectsRequest): ListProjectsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint64 projectIds */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.projectIds.push(reader.uint64().toNumber());
                    else
                        message.projectIds.push(reader.uint64().toNumber());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListProjectsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint64 projectIds = 1; */
        if (message.projectIds.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.projectIds.length; i++)
                writer.uint64(message.projectIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListProjectsRequest
 */
export const ListProjectsRequest = new ListProjectsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListProjectsResponse$Type extends MessageType<ListProjectsResponse> {
    constructor() {
        super("ListProjectsResponse", [
            { no: 1, name: "projects", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Project }
        ]);
    }
    create(value?: PartialMessage<ListProjectsResponse>): ListProjectsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.projects = [];
        if (value !== undefined)
            reflectionMergePartial<ListProjectsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListProjectsResponse): ListProjectsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Project projects */ 1:
                    message.projects.push(Project.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListProjectsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Project projects = 1; */
        for (let i = 0; i < message.projects.length; i++)
            Project.internalBinaryWrite(message.projects[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListProjectsResponse
 */
export const ListProjectsResponse = new ListProjectsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateProjectRequest$Type extends MessageType<CreateProjectRequest> {
    constructor() {
        super("CreateProjectRequest", [
            { no: 1, name: "teamId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "expectedStartAt", kind: "message", T: () => Timestamp },
            { no: 4, name: "expectedEndAt", kind: "message", T: () => Timestamp },
            { no: 5, name: "iconUrl", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "color", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateProjectRequest>): CreateProjectRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamId = 0;
        message.name = "";
        message.iconUrl = "";
        message.color = "";
        if (value !== undefined)
            reflectionMergePartial<CreateProjectRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateProjectRequest): CreateProjectRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 teamId */ 1:
                    message.teamId = reader.uint64().toNumber();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* google.protobuf.Timestamp expectedStartAt */ 3:
                    message.expectedStartAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.expectedStartAt);
                    break;
                case /* google.protobuf.Timestamp expectedEndAt */ 4:
                    message.expectedEndAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.expectedEndAt);
                    break;
                case /* string iconUrl */ 5:
                    message.iconUrl = reader.string();
                    break;
                case /* string color */ 6:
                    message.color = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateProjectRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 teamId = 1; */
        if (message.teamId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.teamId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* google.protobuf.Timestamp expectedStartAt = 3; */
        if (message.expectedStartAt)
            Timestamp.internalBinaryWrite(message.expectedStartAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp expectedEndAt = 4; */
        if (message.expectedEndAt)
            Timestamp.internalBinaryWrite(message.expectedEndAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string iconUrl = 5; */
        if (message.iconUrl !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.iconUrl);
        /* string color = 6; */
        if (message.color !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.color);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateProjectRequest
 */
export const CreateProjectRequest = new CreateProjectRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateProjectResponse$Type extends MessageType<CreateProjectResponse> {
    constructor() {
        super("CreateProjectResponse", [
            { no: 1, name: "project", kind: "message", T: () => Project }
        ]);
    }
    create(value?: PartialMessage<CreateProjectResponse>): CreateProjectResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateProjectResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateProjectResponse): CreateProjectResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Project project */ 1:
                    message.project = Project.internalBinaryRead(reader, reader.uint32(), options, message.project);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateProjectResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Project project = 1; */
        if (message.project)
            Project.internalBinaryWrite(message.project, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateProjectResponse
 */
export const CreateProjectResponse = new CreateProjectResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateProjectRequest$Type extends MessageType<UpdateProjectRequest> {
    constructor() {
        super("UpdateProjectRequest", [
            { no: 1, name: "projectId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "expectedStartAt", kind: "message", T: () => Timestamp },
            { no: 4, name: "expectedEndAt", kind: "message", T: () => Timestamp },
            { no: 5, name: "actualStartAt", kind: "message", T: () => Timestamp },
            { no: 6, name: "actualEndAt", kind: "message", T: () => Timestamp },
            { no: 7, name: "iconUrl", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "color", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateProjectRequest>): UpdateProjectRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.projectId = 0;
        if (value !== undefined)
            reflectionMergePartial<UpdateProjectRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateProjectRequest): UpdateProjectRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 projectId */ 1:
                    message.projectId = reader.uint64().toNumber();
                    break;
                case /* optional string name */ 2:
                    message.name = reader.string();
                    break;
                case /* optional google.protobuf.Timestamp expectedStartAt */ 3:
                    message.expectedStartAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.expectedStartAt);
                    break;
                case /* optional google.protobuf.Timestamp expectedEndAt */ 4:
                    message.expectedEndAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.expectedEndAt);
                    break;
                case /* optional google.protobuf.Timestamp actualStartAt */ 5:
                    message.actualStartAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.actualStartAt);
                    break;
                case /* optional google.protobuf.Timestamp actualEndAt */ 6:
                    message.actualEndAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.actualEndAt);
                    break;
                case /* optional string iconUrl */ 7:
                    message.iconUrl = reader.string();
                    break;
                case /* optional string color */ 8:
                    message.color = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateProjectRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 projectId = 1; */
        if (message.projectId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.projectId);
        /* optional string name = 2; */
        if (message.name !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* optional google.protobuf.Timestamp expectedStartAt = 3; */
        if (message.expectedStartAt)
            Timestamp.internalBinaryWrite(message.expectedStartAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional google.protobuf.Timestamp expectedEndAt = 4; */
        if (message.expectedEndAt)
            Timestamp.internalBinaryWrite(message.expectedEndAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional google.protobuf.Timestamp actualStartAt = 5; */
        if (message.actualStartAt)
            Timestamp.internalBinaryWrite(message.actualStartAt, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* optional google.protobuf.Timestamp actualEndAt = 6; */
        if (message.actualEndAt)
            Timestamp.internalBinaryWrite(message.actualEndAt, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* optional string iconUrl = 7; */
        if (message.iconUrl !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.iconUrl);
        /* optional string color = 8; */
        if (message.color !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.color);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateProjectRequest
 */
export const UpdateProjectRequest = new UpdateProjectRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateProjectResponse$Type extends MessageType<UpdateProjectResponse> {
    constructor() {
        super("UpdateProjectResponse", [
            { no: 1, name: "project", kind: "message", T: () => Project }
        ]);
    }
    create(value?: PartialMessage<UpdateProjectResponse>): UpdateProjectResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateProjectResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateProjectResponse): UpdateProjectResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Project project */ 1:
                    message.project = Project.internalBinaryRead(reader, reader.uint32(), options, message.project);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateProjectResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Project project = 1; */
        if (message.project)
            Project.internalBinaryWrite(message.project, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateProjectResponse
 */
export const UpdateProjectResponse = new UpdateProjectResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteProjectRequest$Type extends MessageType<DeleteProjectRequest> {
    constructor() {
        super("DeleteProjectRequest", [
            { no: 1, name: "projectId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteProjectRequest>): DeleteProjectRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.projectId = 0;
        if (value !== undefined)
            reflectionMergePartial<DeleteProjectRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteProjectRequest): DeleteProjectRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 projectId */ 1:
                    message.projectId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteProjectRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 projectId = 1; */
        if (message.projectId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.projectId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteProjectRequest
 */
export const DeleteProjectRequest = new DeleteProjectRequest$Type();
/**
 * @generated ServiceType for protobuf service ProjectService
 */
export const ProjectService = new ServiceType("ProjectService", [
    { name: "GetProject", options: {}, I: GetProjectRequest, O: GetProjectResponse },
    { name: "ListProjects", options: {}, I: ListProjectsRequest, O: ListProjectsResponse },
    { name: "CreateProject", options: {}, I: CreateProjectRequest, O: CreateProjectResponse },
    { name: "UpdateProject", options: {}, I: UpdateProjectRequest, O: UpdateProjectResponse },
    { name: "DeleteProject", options: {}, I: DeleteProjectRequest, O: Empty }
]);
