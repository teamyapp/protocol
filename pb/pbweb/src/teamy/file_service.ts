// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "teamy/file_service.proto" (syntax proto3)
// tslint:disable
import { Empty } from "../google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { FileMetadata } from "./message/file_metadata";
/**
 * @generated from protobuf message CreateFileUploadSessionRequest
 */
export interface CreateFileUploadSessionRequest {
    /**
     * @generated from protobuf field: uint64 teamId = 1;
     */
    teamId: number;
}
/**
 * @generated from protobuf message CreateFileUploadSessionResponse
 */
export interface CreateFileUploadSessionResponse {
    /**
     * @generated from protobuf field: uint64 uploadSessionId = 1;
     */
    uploadSessionId: number;
}
/**
 * @generated from protobuf message FinishFileUploadSessionRequest
 */
export interface FinishFileUploadSessionRequest {
    /**
     * @generated from protobuf field: uint64 uploadSessionId = 1;
     */
    uploadSessionId: number;
}
/**
 * @generated from protobuf message FinishFileUploadSessionResponse
 */
export interface FinishFileUploadSessionResponse {
    /**
     * @generated from protobuf field: FileMetadata file_metadata = 1;
     */
    fileMetadata?: FileMetadata;
}
/**
 * @generated from protobuf message UpdateFileMetadataRequest
 */
export interface UpdateFileMetadataRequest {
    /**
     * @generated from protobuf field: uint64 fileId = 1;
     */
    fileId: number;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
}
/**
 * @generated from protobuf message UpdateFileMetadataResponse
 */
export interface UpdateFileMetadataResponse {
    /**
     * @generated from protobuf field: FileMetadata file_metadata = 1;
     */
    fileMetadata?: FileMetadata;
}
/**
 * @generated from protobuf message DeleteFileRequest
 */
export interface DeleteFileRequest {
    /**
     * @generated from protobuf field: uint64 fileId = 1;
     */
    fileId: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class CreateFileUploadSessionRequest$Type extends MessageType<CreateFileUploadSessionRequest> {
    constructor() {
        super("CreateFileUploadSessionRequest", [
            { no: 1, name: "teamId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<CreateFileUploadSessionRequest>): CreateFileUploadSessionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamId = 0;
        if (value !== undefined)
            reflectionMergePartial<CreateFileUploadSessionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateFileUploadSessionRequest): CreateFileUploadSessionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 teamId */ 1:
                    message.teamId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateFileUploadSessionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 teamId = 1; */
        if (message.teamId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.teamId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateFileUploadSessionRequest
 */
export const CreateFileUploadSessionRequest = new CreateFileUploadSessionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateFileUploadSessionResponse$Type extends MessageType<CreateFileUploadSessionResponse> {
    constructor() {
        super("CreateFileUploadSessionResponse", [
            { no: 1, name: "uploadSessionId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<CreateFileUploadSessionResponse>): CreateFileUploadSessionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uploadSessionId = 0;
        if (value !== undefined)
            reflectionMergePartial<CreateFileUploadSessionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateFileUploadSessionResponse): CreateFileUploadSessionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 uploadSessionId */ 1:
                    message.uploadSessionId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateFileUploadSessionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 uploadSessionId = 1; */
        if (message.uploadSessionId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.uploadSessionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateFileUploadSessionResponse
 */
export const CreateFileUploadSessionResponse = new CreateFileUploadSessionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FinishFileUploadSessionRequest$Type extends MessageType<FinishFileUploadSessionRequest> {
    constructor() {
        super("FinishFileUploadSessionRequest", [
            { no: 1, name: "uploadSessionId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<FinishFileUploadSessionRequest>): FinishFileUploadSessionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uploadSessionId = 0;
        if (value !== undefined)
            reflectionMergePartial<FinishFileUploadSessionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FinishFileUploadSessionRequest): FinishFileUploadSessionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 uploadSessionId */ 1:
                    message.uploadSessionId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FinishFileUploadSessionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 uploadSessionId = 1; */
        if (message.uploadSessionId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.uploadSessionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FinishFileUploadSessionRequest
 */
export const FinishFileUploadSessionRequest = new FinishFileUploadSessionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FinishFileUploadSessionResponse$Type extends MessageType<FinishFileUploadSessionResponse> {
    constructor() {
        super("FinishFileUploadSessionResponse", [
            { no: 1, name: "file_metadata", kind: "message", T: () => FileMetadata }
        ]);
    }
    create(value?: PartialMessage<FinishFileUploadSessionResponse>): FinishFileUploadSessionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<FinishFileUploadSessionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FinishFileUploadSessionResponse): FinishFileUploadSessionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* FileMetadata file_metadata */ 1:
                    message.fileMetadata = FileMetadata.internalBinaryRead(reader, reader.uint32(), options, message.fileMetadata);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FinishFileUploadSessionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* FileMetadata file_metadata = 1; */
        if (message.fileMetadata)
            FileMetadata.internalBinaryWrite(message.fileMetadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FinishFileUploadSessionResponse
 */
export const FinishFileUploadSessionResponse = new FinishFileUploadSessionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateFileMetadataRequest$Type extends MessageType<UpdateFileMetadataRequest> {
    constructor() {
        super("UpdateFileMetadataRequest", [
            { no: 1, name: "fileId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateFileMetadataRequest>): UpdateFileMetadataRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fileId = 0;
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<UpdateFileMetadataRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateFileMetadataRequest): UpdateFileMetadataRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 fileId */ 1:
                    message.fileId = reader.uint64().toNumber();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateFileMetadataRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 fileId = 1; */
        if (message.fileId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.fileId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateFileMetadataRequest
 */
export const UpdateFileMetadataRequest = new UpdateFileMetadataRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateFileMetadataResponse$Type extends MessageType<UpdateFileMetadataResponse> {
    constructor() {
        super("UpdateFileMetadataResponse", [
            { no: 1, name: "file_metadata", kind: "message", T: () => FileMetadata }
        ]);
    }
    create(value?: PartialMessage<UpdateFileMetadataResponse>): UpdateFileMetadataResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateFileMetadataResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateFileMetadataResponse): UpdateFileMetadataResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* FileMetadata file_metadata */ 1:
                    message.fileMetadata = FileMetadata.internalBinaryRead(reader, reader.uint32(), options, message.fileMetadata);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateFileMetadataResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* FileMetadata file_metadata = 1; */
        if (message.fileMetadata)
            FileMetadata.internalBinaryWrite(message.fileMetadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateFileMetadataResponse
 */
export const UpdateFileMetadataResponse = new UpdateFileMetadataResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteFileRequest$Type extends MessageType<DeleteFileRequest> {
    constructor() {
        super("DeleteFileRequest", [
            { no: 1, name: "fileId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteFileRequest>): DeleteFileRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fileId = 0;
        if (value !== undefined)
            reflectionMergePartial<DeleteFileRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteFileRequest): DeleteFileRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 fileId */ 1:
                    message.fileId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteFileRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 fileId = 1; */
        if (message.fileId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.fileId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteFileRequest
 */
export const DeleteFileRequest = new DeleteFileRequest$Type();
/**
 * @generated ServiceType for protobuf service FileService
 */
export const FileService = new ServiceType("FileService", [
    { name: "CreateFileUploadSession", options: {}, I: CreateFileUploadSessionRequest, O: CreateFileUploadSessionResponse },
    { name: "FinishFileUploadSession", options: {}, I: FinishFileUploadSessionRequest, O: FinishFileUploadSessionResponse },
    { name: "UpdateFileMetadata", options: {}, I: UpdateFileMetadataRequest, O: UpdateFileMetadataResponse },
    { name: "DeleteFile", options: {}, I: DeleteFileRequest, O: Empty }
]);
