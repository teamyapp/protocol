// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "teamy/team_member_group_service.proto" (syntax proto3)
// tslint:disable
import { Empty } from "../google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { TeamMemberGroup } from "./message/team_member_group";
/**
 * @generated from protobuf message GetMemberGroupRequest
 */
export interface GetMemberGroupRequest {
    /**
     * @generated from protobuf field: uint64 groupId = 1;
     */
    groupId: number;
}
/**
 * @generated from protobuf message GetMemberGroupResponse
 */
export interface GetMemberGroupResponse {
    /**
     * @generated from protobuf field: TeamMemberGroup group = 1;
     */
    group?: TeamMemberGroup;
}
/**
 * @generated from protobuf message ListMemberGroupsRequest
 */
export interface ListMemberGroupsRequest {
    /**
     * @generated from protobuf field: repeated uint64 teamMemberGroupIds = 1;
     */
    teamMemberGroupIds: number[];
}
/**
 * @generated from protobuf message ListTeamMemberGroupsResponse
 */
export interface ListTeamMemberGroupsResponse {
    /**
     * @generated from protobuf field: repeated TeamMemberGroup groups = 1;
     */
    groups: TeamMemberGroup[];
}
/**
 * @generated from protobuf message CreateTeamMemberGroupRequest
 */
export interface CreateTeamMemberGroupRequest {
    /**
     * @generated from protobuf field: uint64 teamId = 1;
     */
    teamId: number;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
}
/**
 * @generated from protobuf message CreateTeamMemberGroupResponse
 */
export interface CreateTeamMemberGroupResponse {
    /**
     * @generated from protobuf field: uint64 groupId = 1;
     */
    groupId: number;
}
/**
 * @generated from protobuf message UpdateTeamMemberGroupRequest
 */
export interface UpdateTeamMemberGroupRequest {
    /**
     * @generated from protobuf field: uint64 groupId = 1;
     */
    groupId: number;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
}
/**
 * @generated from protobuf message DeleteTeamMemberGroupRequest
 */
export interface DeleteTeamMemberGroupRequest {
    /**
     * @generated from protobuf field: uint64 groupId = 1;
     */
    groupId: number;
}
/**
 * @generated from protobuf message AddTeamMemberToGroupRequest
 */
export interface AddTeamMemberToGroupRequest {
    /**
     * @generated from protobuf field: uint64 groupId = 1;
     */
    groupId: number;
    /**
     * @generated from protobuf field: uint64 memberUserId = 2;
     */
    memberUserId: number;
}
/**
 * @generated from protobuf message RemoveTeamMemberFromGroupRequest
 */
export interface RemoveTeamMemberFromGroupRequest {
    /**
     * @generated from protobuf field: uint64 groupId = 1;
     */
    groupId: number;
    /**
     * @generated from protobuf field: uint64 memberUserId = 2;
     */
    memberUserId: number;
}
/**
 * @generated from protobuf message MoveUpTeamMemberGroupRequest
 */
export interface MoveUpTeamMemberGroupRequest {
    /**
     * @generated from protobuf field: uint64 groupId = 1;
     */
    groupId: number;
}
/**
 * @generated from protobuf message MoveDownTeamMemberGroupRequest
 */
export interface MoveDownTeamMemberGroupRequest {
    /**
     * @generated from protobuf field: uint64 groupId = 1;
     */
    groupId: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetMemberGroupRequest$Type extends MessageType<GetMemberGroupRequest> {
    constructor() {
        super("GetMemberGroupRequest", [
            { no: 1, name: "groupId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<GetMemberGroupRequest>): GetMemberGroupRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupId = 0;
        if (value !== undefined)
            reflectionMergePartial<GetMemberGroupRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetMemberGroupRequest): GetMemberGroupRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 groupId */ 1:
                    message.groupId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetMemberGroupRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 groupId = 1; */
        if (message.groupId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.groupId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetMemberGroupRequest
 */
export const GetMemberGroupRequest = new GetMemberGroupRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMemberGroupResponse$Type extends MessageType<GetMemberGroupResponse> {
    constructor() {
        super("GetMemberGroupResponse", [
            { no: 1, name: "group", kind: "message", T: () => TeamMemberGroup }
        ]);
    }
    create(value?: PartialMessage<GetMemberGroupResponse>): GetMemberGroupResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetMemberGroupResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetMemberGroupResponse): GetMemberGroupResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* TeamMemberGroup group */ 1:
                    message.group = TeamMemberGroup.internalBinaryRead(reader, reader.uint32(), options, message.group);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetMemberGroupResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* TeamMemberGroup group = 1; */
        if (message.group)
            TeamMemberGroup.internalBinaryWrite(message.group, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetMemberGroupResponse
 */
export const GetMemberGroupResponse = new GetMemberGroupResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListMemberGroupsRequest$Type extends MessageType<ListMemberGroupsRequest> {
    constructor() {
        super("ListMemberGroupsRequest", [
            { no: 1, name: "teamMemberGroupIds", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<ListMemberGroupsRequest>): ListMemberGroupsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamMemberGroupIds = [];
        if (value !== undefined)
            reflectionMergePartial<ListMemberGroupsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListMemberGroupsRequest): ListMemberGroupsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint64 teamMemberGroupIds */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.teamMemberGroupIds.push(reader.uint64().toNumber());
                    else
                        message.teamMemberGroupIds.push(reader.uint64().toNumber());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListMemberGroupsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint64 teamMemberGroupIds = 1; */
        if (message.teamMemberGroupIds.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.teamMemberGroupIds.length; i++)
                writer.uint64(message.teamMemberGroupIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListMemberGroupsRequest
 */
export const ListMemberGroupsRequest = new ListMemberGroupsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListTeamMemberGroupsResponse$Type extends MessageType<ListTeamMemberGroupsResponse> {
    constructor() {
        super("ListTeamMemberGroupsResponse", [
            { no: 1, name: "groups", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TeamMemberGroup }
        ]);
    }
    create(value?: PartialMessage<ListTeamMemberGroupsResponse>): ListTeamMemberGroupsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groups = [];
        if (value !== undefined)
            reflectionMergePartial<ListTeamMemberGroupsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListTeamMemberGroupsResponse): ListTeamMemberGroupsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated TeamMemberGroup groups */ 1:
                    message.groups.push(TeamMemberGroup.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListTeamMemberGroupsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated TeamMemberGroup groups = 1; */
        for (let i = 0; i < message.groups.length; i++)
            TeamMemberGroup.internalBinaryWrite(message.groups[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListTeamMemberGroupsResponse
 */
export const ListTeamMemberGroupsResponse = new ListTeamMemberGroupsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateTeamMemberGroupRequest$Type extends MessageType<CreateTeamMemberGroupRequest> {
    constructor() {
        super("CreateTeamMemberGroupRequest", [
            { no: 1, name: "teamId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateTeamMemberGroupRequest>): CreateTeamMemberGroupRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamId = 0;
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<CreateTeamMemberGroupRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateTeamMemberGroupRequest): CreateTeamMemberGroupRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 teamId */ 1:
                    message.teamId = reader.uint64().toNumber();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateTeamMemberGroupRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 teamId = 1; */
        if (message.teamId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.teamId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateTeamMemberGroupRequest
 */
export const CreateTeamMemberGroupRequest = new CreateTeamMemberGroupRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateTeamMemberGroupResponse$Type extends MessageType<CreateTeamMemberGroupResponse> {
    constructor() {
        super("CreateTeamMemberGroupResponse", [
            { no: 1, name: "groupId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<CreateTeamMemberGroupResponse>): CreateTeamMemberGroupResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupId = 0;
        if (value !== undefined)
            reflectionMergePartial<CreateTeamMemberGroupResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateTeamMemberGroupResponse): CreateTeamMemberGroupResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 groupId */ 1:
                    message.groupId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateTeamMemberGroupResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 groupId = 1; */
        if (message.groupId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.groupId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateTeamMemberGroupResponse
 */
export const CreateTeamMemberGroupResponse = new CreateTeamMemberGroupResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateTeamMemberGroupRequest$Type extends MessageType<UpdateTeamMemberGroupRequest> {
    constructor() {
        super("UpdateTeamMemberGroupRequest", [
            { no: 1, name: "groupId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateTeamMemberGroupRequest>): UpdateTeamMemberGroupRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupId = 0;
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<UpdateTeamMemberGroupRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateTeamMemberGroupRequest): UpdateTeamMemberGroupRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 groupId */ 1:
                    message.groupId = reader.uint64().toNumber();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateTeamMemberGroupRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 groupId = 1; */
        if (message.groupId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.groupId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateTeamMemberGroupRequest
 */
export const UpdateTeamMemberGroupRequest = new UpdateTeamMemberGroupRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteTeamMemberGroupRequest$Type extends MessageType<DeleteTeamMemberGroupRequest> {
    constructor() {
        super("DeleteTeamMemberGroupRequest", [
            { no: 1, name: "groupId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteTeamMemberGroupRequest>): DeleteTeamMemberGroupRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupId = 0;
        if (value !== undefined)
            reflectionMergePartial<DeleteTeamMemberGroupRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteTeamMemberGroupRequest): DeleteTeamMemberGroupRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 groupId */ 1:
                    message.groupId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteTeamMemberGroupRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 groupId = 1; */
        if (message.groupId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.groupId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteTeamMemberGroupRequest
 */
export const DeleteTeamMemberGroupRequest = new DeleteTeamMemberGroupRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddTeamMemberToGroupRequest$Type extends MessageType<AddTeamMemberToGroupRequest> {
    constructor() {
        super("AddTeamMemberToGroupRequest", [
            { no: 1, name: "groupId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "memberUserId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<AddTeamMemberToGroupRequest>): AddTeamMemberToGroupRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupId = 0;
        message.memberUserId = 0;
        if (value !== undefined)
            reflectionMergePartial<AddTeamMemberToGroupRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddTeamMemberToGroupRequest): AddTeamMemberToGroupRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 groupId */ 1:
                    message.groupId = reader.uint64().toNumber();
                    break;
                case /* uint64 memberUserId */ 2:
                    message.memberUserId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddTeamMemberToGroupRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 groupId = 1; */
        if (message.groupId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.groupId);
        /* uint64 memberUserId = 2; */
        if (message.memberUserId !== 0)
            writer.tag(2, WireType.Varint).uint64(message.memberUserId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AddTeamMemberToGroupRequest
 */
export const AddTeamMemberToGroupRequest = new AddTeamMemberToGroupRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveTeamMemberFromGroupRequest$Type extends MessageType<RemoveTeamMemberFromGroupRequest> {
    constructor() {
        super("RemoveTeamMemberFromGroupRequest", [
            { no: 1, name: "groupId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "memberUserId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveTeamMemberFromGroupRequest>): RemoveTeamMemberFromGroupRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupId = 0;
        message.memberUserId = 0;
        if (value !== undefined)
            reflectionMergePartial<RemoveTeamMemberFromGroupRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveTeamMemberFromGroupRequest): RemoveTeamMemberFromGroupRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 groupId */ 1:
                    message.groupId = reader.uint64().toNumber();
                    break;
                case /* uint64 memberUserId */ 2:
                    message.memberUserId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveTeamMemberFromGroupRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 groupId = 1; */
        if (message.groupId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.groupId);
        /* uint64 memberUserId = 2; */
        if (message.memberUserId !== 0)
            writer.tag(2, WireType.Varint).uint64(message.memberUserId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RemoveTeamMemberFromGroupRequest
 */
export const RemoveTeamMemberFromGroupRequest = new RemoveTeamMemberFromGroupRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MoveUpTeamMemberGroupRequest$Type extends MessageType<MoveUpTeamMemberGroupRequest> {
    constructor() {
        super("MoveUpTeamMemberGroupRequest", [
            { no: 1, name: "groupId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<MoveUpTeamMemberGroupRequest>): MoveUpTeamMemberGroupRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupId = 0;
        if (value !== undefined)
            reflectionMergePartial<MoveUpTeamMemberGroupRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MoveUpTeamMemberGroupRequest): MoveUpTeamMemberGroupRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 groupId */ 1:
                    message.groupId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MoveUpTeamMemberGroupRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 groupId = 1; */
        if (message.groupId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.groupId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MoveUpTeamMemberGroupRequest
 */
export const MoveUpTeamMemberGroupRequest = new MoveUpTeamMemberGroupRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MoveDownTeamMemberGroupRequest$Type extends MessageType<MoveDownTeamMemberGroupRequest> {
    constructor() {
        super("MoveDownTeamMemberGroupRequest", [
            { no: 1, name: "groupId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<MoveDownTeamMemberGroupRequest>): MoveDownTeamMemberGroupRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupId = 0;
        if (value !== undefined)
            reflectionMergePartial<MoveDownTeamMemberGroupRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MoveDownTeamMemberGroupRequest): MoveDownTeamMemberGroupRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 groupId */ 1:
                    message.groupId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MoveDownTeamMemberGroupRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 groupId = 1; */
        if (message.groupId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.groupId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MoveDownTeamMemberGroupRequest
 */
export const MoveDownTeamMemberGroupRequest = new MoveDownTeamMemberGroupRequest$Type();
/**
 * @generated ServiceType for protobuf service TeamMemberGroupService
 */
export const TeamMemberGroupService = new ServiceType("TeamMemberGroupService", [
    { name: "GetMemberGroup", options: {}, I: GetMemberGroupRequest, O: GetMemberGroupResponse },
    { name: "ListMemberGroups", options: {}, I: ListMemberGroupsRequest, O: ListTeamMemberGroupsResponse },
    { name: "CreateMemberGroup", options: {}, I: CreateTeamMemberGroupRequest, O: CreateTeamMemberGroupResponse },
    { name: "UpdateMemberGroup", options: {}, I: UpdateTeamMemberGroupRequest, O: Empty },
    { name: "DeleteMemberGroup", options: {}, I: DeleteTeamMemberGroupRequest, O: Empty },
    { name: "AddMemberToGroup", options: {}, I: AddTeamMemberToGroupRequest, O: Empty },
    { name: "RemoveMemberFromGroup", options: {}, I: RemoveTeamMemberFromGroupRequest, O: Empty },
    { name: "MoveUpTeamMemberGroup", options: {}, I: MoveUpTeamMemberGroupRequest, O: Empty },
    { name: "MoveDownTeamMemberGroup", options: {}, I: MoveDownTeamMemberGroupRequest, O: Empty }
]);
