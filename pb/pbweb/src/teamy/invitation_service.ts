// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "teamy/invitation_service.proto" (syntax proto3)
// tslint:disable
import { Empty } from "../google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../google/protobuf/timestamp";
import { Invitation } from "./message/invitation";
/**
 * @generated from protobuf message GetInvitationRequest
 */
export interface GetInvitationRequest {
    /**
     * @generated from protobuf field: optional uint64 invitationId = 1;
     */
    invitationId?: number;
    /**
     * @generated from protobuf field: optional string invitationCode = 2;
     */
    invitationCode?: string;
}
/**
 * @generated from protobuf message GetInvitationResponse
 */
export interface GetInvitationResponse {
    /**
     * @generated from protobuf field: Invitation invitation = 1;
     */
    invitation?: Invitation;
}
/**
 * @generated from protobuf message ListInvitationsRequest
 */
export interface ListInvitationsRequest {
    /**
     * @generated from protobuf field: repeated uint64 invitationIds = 1;
     */
    invitationIds: number[];
}
/**
 * @generated from protobuf message ListInvitationsResponse
 */
export interface ListInvitationsResponse {
    /**
     * @generated from protobuf field: repeated Invitation invitations = 1;
     */
    invitations: Invitation[];
}
/**
 * @generated from protobuf message CreateInvitationRequest
 */
export interface CreateInvitationRequest {
    /**
     * @generated from protobuf field: uint64 teamId = 1;
     */
    teamId: number;
    /**
     * @generated from protobuf field: string receiverFirstName = 2;
     */
    receiverFirstName: string;
    /**
     * @generated from protobuf field: string receiverLastName = 3;
     */
    receiverLastName: string;
    /**
     * @generated from protobuf field: string receiverEmail = 4;
     */
    receiverEmail: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp expireAt = 5;
     */
    expireAt?: Timestamp;
}
/**
 * @generated from protobuf message CreateInvitationResponse
 */
export interface CreateInvitationResponse {
    /**
     * @generated from protobuf field: uint64 invitationId = 1;
     */
    invitationId: number;
    /**
     * @generated from protobuf field: string invitationCode = 2;
     */
    invitationCode: string;
}
/**
 * @generated from protobuf message UpdateInvitationRequest
 */
export interface UpdateInvitationRequest {
    /**
     * @generated from protobuf field: uint64 invitationId = 1;
     */
    invitationId: number;
    /**
     * @generated from protobuf field: optional string receiverFirstName = 2;
     */
    receiverFirstName?: string;
    /**
     * @generated from protobuf field: optional string receiverLastName = 3;
     */
    receiverLastName?: string;
    /**
     * @generated from protobuf field: optional string receiverEmail = 4;
     */
    receiverEmail?: string;
    /**
     * @generated from protobuf field: optional google.protobuf.Timestamp expireAt = 5;
     */
    expireAt?: Timestamp;
}
/**
 * @generated from protobuf message AcceptInvitationRequest
 */
export interface AcceptInvitationRequest {
    /**
     * @generated from protobuf field: uint64 invitationId = 1;
     */
    invitationId: number;
    /**
     * @generated from protobuf field: string invitationCode = 2;
     */
    invitationCode: string;
}
/**
 * @generated from protobuf message DeclineInvitationRequest
 */
export interface DeclineInvitationRequest {
    /**
     * @generated from protobuf field: uint64 invitationId = 1;
     */
    invitationId: number;
    /**
     * @generated from protobuf field: string invitationCode = 2;
     */
    invitationCode: string;
}
/**
 * @generated from protobuf message DeleteInvitationRequest
 */
export interface DeleteInvitationRequest {
    /**
     * @generated from protobuf field: uint64 invitationId = 1;
     */
    invitationId: number;
}
/**
 * @generated from protobuf message AddInvitationToTeamMemberGroupRequest
 */
export interface AddInvitationToTeamMemberGroupRequest {
    /**
     * @generated from protobuf field: uint64 invitationId = 1;
     */
    invitationId: number;
    /**
     * @generated from protobuf field: uint64 teamMemberGroupId = 2;
     */
    teamMemberGroupId: number;
}
/**
 * @generated from protobuf message RemoveInvitationFromTeamMemberGroupRequest
 */
export interface RemoveInvitationFromTeamMemberGroupRequest {
    /**
     * @generated from protobuf field: uint64 invitationId = 1;
     */
    invitationId: number;
    /**
     * @generated from protobuf field: uint64 teamMemberGroupId = 2;
     */
    teamMemberGroupId: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetInvitationRequest$Type extends MessageType<GetInvitationRequest> {
    constructor() {
        super("GetInvitationRequest", [
            { no: 1, name: "invitationId", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "invitationCode", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetInvitationRequest>): GetInvitationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetInvitationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetInvitationRequest): GetInvitationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 invitationId */ 1:
                    message.invitationId = reader.uint64().toNumber();
                    break;
                case /* optional string invitationCode */ 2:
                    message.invitationCode = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetInvitationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 invitationId = 1; */
        if (message.invitationId !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.invitationId);
        /* optional string invitationCode = 2; */
        if (message.invitationCode !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.invitationCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetInvitationRequest
 */
export const GetInvitationRequest = new GetInvitationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetInvitationResponse$Type extends MessageType<GetInvitationResponse> {
    constructor() {
        super("GetInvitationResponse", [
            { no: 1, name: "invitation", kind: "message", T: () => Invitation }
        ]);
    }
    create(value?: PartialMessage<GetInvitationResponse>): GetInvitationResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetInvitationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetInvitationResponse): GetInvitationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Invitation invitation */ 1:
                    message.invitation = Invitation.internalBinaryRead(reader, reader.uint32(), options, message.invitation);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetInvitationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Invitation invitation = 1; */
        if (message.invitation)
            Invitation.internalBinaryWrite(message.invitation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetInvitationResponse
 */
export const GetInvitationResponse = new GetInvitationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListInvitationsRequest$Type extends MessageType<ListInvitationsRequest> {
    constructor() {
        super("ListInvitationsRequest", [
            { no: 1, name: "invitationIds", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<ListInvitationsRequest>): ListInvitationsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.invitationIds = [];
        if (value !== undefined)
            reflectionMergePartial<ListInvitationsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListInvitationsRequest): ListInvitationsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint64 invitationIds */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.invitationIds.push(reader.uint64().toNumber());
                    else
                        message.invitationIds.push(reader.uint64().toNumber());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListInvitationsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint64 invitationIds = 1; */
        if (message.invitationIds.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.invitationIds.length; i++)
                writer.uint64(message.invitationIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListInvitationsRequest
 */
export const ListInvitationsRequest = new ListInvitationsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListInvitationsResponse$Type extends MessageType<ListInvitationsResponse> {
    constructor() {
        super("ListInvitationsResponse", [
            { no: 1, name: "invitations", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Invitation }
        ]);
    }
    create(value?: PartialMessage<ListInvitationsResponse>): ListInvitationsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.invitations = [];
        if (value !== undefined)
            reflectionMergePartial<ListInvitationsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListInvitationsResponse): ListInvitationsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Invitation invitations */ 1:
                    message.invitations.push(Invitation.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListInvitationsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Invitation invitations = 1; */
        for (let i = 0; i < message.invitations.length; i++)
            Invitation.internalBinaryWrite(message.invitations[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListInvitationsResponse
 */
export const ListInvitationsResponse = new ListInvitationsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateInvitationRequest$Type extends MessageType<CreateInvitationRequest> {
    constructor() {
        super("CreateInvitationRequest", [
            { no: 1, name: "teamId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "receiverFirstName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "receiverLastName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "receiverEmail", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "expireAt", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<CreateInvitationRequest>): CreateInvitationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamId = 0;
        message.receiverFirstName = "";
        message.receiverLastName = "";
        message.receiverEmail = "";
        if (value !== undefined)
            reflectionMergePartial<CreateInvitationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateInvitationRequest): CreateInvitationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 teamId */ 1:
                    message.teamId = reader.uint64().toNumber();
                    break;
                case /* string receiverFirstName */ 2:
                    message.receiverFirstName = reader.string();
                    break;
                case /* string receiverLastName */ 3:
                    message.receiverLastName = reader.string();
                    break;
                case /* string receiverEmail */ 4:
                    message.receiverEmail = reader.string();
                    break;
                case /* google.protobuf.Timestamp expireAt */ 5:
                    message.expireAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.expireAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateInvitationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 teamId = 1; */
        if (message.teamId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.teamId);
        /* string receiverFirstName = 2; */
        if (message.receiverFirstName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.receiverFirstName);
        /* string receiverLastName = 3; */
        if (message.receiverLastName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.receiverLastName);
        /* string receiverEmail = 4; */
        if (message.receiverEmail !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.receiverEmail);
        /* google.protobuf.Timestamp expireAt = 5; */
        if (message.expireAt)
            Timestamp.internalBinaryWrite(message.expireAt, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateInvitationRequest
 */
export const CreateInvitationRequest = new CreateInvitationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateInvitationResponse$Type extends MessageType<CreateInvitationResponse> {
    constructor() {
        super("CreateInvitationResponse", [
            { no: 1, name: "invitationId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "invitationCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateInvitationResponse>): CreateInvitationResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.invitationId = 0;
        message.invitationCode = "";
        if (value !== undefined)
            reflectionMergePartial<CreateInvitationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateInvitationResponse): CreateInvitationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 invitationId */ 1:
                    message.invitationId = reader.uint64().toNumber();
                    break;
                case /* string invitationCode */ 2:
                    message.invitationCode = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateInvitationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 invitationId = 1; */
        if (message.invitationId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.invitationId);
        /* string invitationCode = 2; */
        if (message.invitationCode !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.invitationCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateInvitationResponse
 */
export const CreateInvitationResponse = new CreateInvitationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateInvitationRequest$Type extends MessageType<UpdateInvitationRequest> {
    constructor() {
        super("UpdateInvitationRequest", [
            { no: 1, name: "invitationId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "receiverFirstName", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "receiverLastName", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "receiverEmail", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "expireAt", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<UpdateInvitationRequest>): UpdateInvitationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.invitationId = 0;
        if (value !== undefined)
            reflectionMergePartial<UpdateInvitationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateInvitationRequest): UpdateInvitationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 invitationId */ 1:
                    message.invitationId = reader.uint64().toNumber();
                    break;
                case /* optional string receiverFirstName */ 2:
                    message.receiverFirstName = reader.string();
                    break;
                case /* optional string receiverLastName */ 3:
                    message.receiverLastName = reader.string();
                    break;
                case /* optional string receiverEmail */ 4:
                    message.receiverEmail = reader.string();
                    break;
                case /* optional google.protobuf.Timestamp expireAt */ 5:
                    message.expireAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.expireAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateInvitationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 invitationId = 1; */
        if (message.invitationId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.invitationId);
        /* optional string receiverFirstName = 2; */
        if (message.receiverFirstName !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.receiverFirstName);
        /* optional string receiverLastName = 3; */
        if (message.receiverLastName !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.receiverLastName);
        /* optional string receiverEmail = 4; */
        if (message.receiverEmail !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.receiverEmail);
        /* optional google.protobuf.Timestamp expireAt = 5; */
        if (message.expireAt)
            Timestamp.internalBinaryWrite(message.expireAt, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateInvitationRequest
 */
export const UpdateInvitationRequest = new UpdateInvitationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AcceptInvitationRequest$Type extends MessageType<AcceptInvitationRequest> {
    constructor() {
        super("AcceptInvitationRequest", [
            { no: 1, name: "invitationId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "invitationCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AcceptInvitationRequest>): AcceptInvitationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.invitationId = 0;
        message.invitationCode = "";
        if (value !== undefined)
            reflectionMergePartial<AcceptInvitationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AcceptInvitationRequest): AcceptInvitationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 invitationId */ 1:
                    message.invitationId = reader.uint64().toNumber();
                    break;
                case /* string invitationCode */ 2:
                    message.invitationCode = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AcceptInvitationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 invitationId = 1; */
        if (message.invitationId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.invitationId);
        /* string invitationCode = 2; */
        if (message.invitationCode !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.invitationCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AcceptInvitationRequest
 */
export const AcceptInvitationRequest = new AcceptInvitationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeclineInvitationRequest$Type extends MessageType<DeclineInvitationRequest> {
    constructor() {
        super("DeclineInvitationRequest", [
            { no: 1, name: "invitationId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "invitationCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeclineInvitationRequest>): DeclineInvitationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.invitationId = 0;
        message.invitationCode = "";
        if (value !== undefined)
            reflectionMergePartial<DeclineInvitationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeclineInvitationRequest): DeclineInvitationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 invitationId */ 1:
                    message.invitationId = reader.uint64().toNumber();
                    break;
                case /* string invitationCode */ 2:
                    message.invitationCode = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeclineInvitationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 invitationId = 1; */
        if (message.invitationId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.invitationId);
        /* string invitationCode = 2; */
        if (message.invitationCode !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.invitationCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeclineInvitationRequest
 */
export const DeclineInvitationRequest = new DeclineInvitationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteInvitationRequest$Type extends MessageType<DeleteInvitationRequest> {
    constructor() {
        super("DeleteInvitationRequest", [
            { no: 1, name: "invitationId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteInvitationRequest>): DeleteInvitationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.invitationId = 0;
        if (value !== undefined)
            reflectionMergePartial<DeleteInvitationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteInvitationRequest): DeleteInvitationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 invitationId */ 1:
                    message.invitationId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteInvitationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 invitationId = 1; */
        if (message.invitationId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.invitationId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteInvitationRequest
 */
export const DeleteInvitationRequest = new DeleteInvitationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddInvitationToTeamMemberGroupRequest$Type extends MessageType<AddInvitationToTeamMemberGroupRequest> {
    constructor() {
        super("AddInvitationToTeamMemberGroupRequest", [
            { no: 1, name: "invitationId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "teamMemberGroupId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<AddInvitationToTeamMemberGroupRequest>): AddInvitationToTeamMemberGroupRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.invitationId = 0;
        message.teamMemberGroupId = 0;
        if (value !== undefined)
            reflectionMergePartial<AddInvitationToTeamMemberGroupRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddInvitationToTeamMemberGroupRequest): AddInvitationToTeamMemberGroupRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 invitationId */ 1:
                    message.invitationId = reader.uint64().toNumber();
                    break;
                case /* uint64 teamMemberGroupId */ 2:
                    message.teamMemberGroupId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddInvitationToTeamMemberGroupRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 invitationId = 1; */
        if (message.invitationId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.invitationId);
        /* uint64 teamMemberGroupId = 2; */
        if (message.teamMemberGroupId !== 0)
            writer.tag(2, WireType.Varint).uint64(message.teamMemberGroupId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AddInvitationToTeamMemberGroupRequest
 */
export const AddInvitationToTeamMemberGroupRequest = new AddInvitationToTeamMemberGroupRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveInvitationFromTeamMemberGroupRequest$Type extends MessageType<RemoveInvitationFromTeamMemberGroupRequest> {
    constructor() {
        super("RemoveInvitationFromTeamMemberGroupRequest", [
            { no: 1, name: "invitationId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "teamMemberGroupId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveInvitationFromTeamMemberGroupRequest>): RemoveInvitationFromTeamMemberGroupRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.invitationId = 0;
        message.teamMemberGroupId = 0;
        if (value !== undefined)
            reflectionMergePartial<RemoveInvitationFromTeamMemberGroupRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveInvitationFromTeamMemberGroupRequest): RemoveInvitationFromTeamMemberGroupRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 invitationId */ 1:
                    message.invitationId = reader.uint64().toNumber();
                    break;
                case /* uint64 teamMemberGroupId */ 2:
                    message.teamMemberGroupId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveInvitationFromTeamMemberGroupRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 invitationId = 1; */
        if (message.invitationId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.invitationId);
        /* uint64 teamMemberGroupId = 2; */
        if (message.teamMemberGroupId !== 0)
            writer.tag(2, WireType.Varint).uint64(message.teamMemberGroupId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RemoveInvitationFromTeamMemberGroupRequest
 */
export const RemoveInvitationFromTeamMemberGroupRequest = new RemoveInvitationFromTeamMemberGroupRequest$Type();
/**
 * @generated ServiceType for protobuf service InvitationService
 */
export const InvitationService = new ServiceType("InvitationService", [
    { name: "GetInvitation", options: {}, I: GetInvitationRequest, O: GetInvitationResponse },
    { name: "ListInvitations", options: {}, I: ListInvitationsRequest, O: ListInvitationsResponse },
    { name: "CreateInvitation", options: {}, I: CreateInvitationRequest, O: CreateInvitationResponse },
    { name: "UpdateInvitation", options: {}, I: UpdateInvitationRequest, O: Empty },
    { name: "AcceptInvitation", options: {}, I: AcceptInvitationRequest, O: Empty },
    { name: "DeclineInvitation", options: {}, I: DeclineInvitationRequest, O: Empty },
    { name: "DeleteInvitation", options: {}, I: DeleteInvitationRequest, O: Empty },
    { name: "AddInvitationToTeamMemberGroup", options: {}, I: AddInvitationToTeamMemberGroupRequest, O: Empty },
    { name: "RemoveInvitationFromTeamMemberGroup", options: {}, I: RemoveInvitationFromTeamMemberGroupRequest, O: Empty }
]);
