// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "teamy/phase_service.proto" (syntax proto3)
// tslint:disable
import { Empty } from "../google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { PhaseStatus } from "./message/phase";
import { Timestamp } from "../google/protobuf/timestamp";
import { Phase } from "./message/phase";
/**
 * @generated from protobuf message GetPhaseRequest
 */
export interface GetPhaseRequest {
    /**
     * @generated from protobuf field: uint64 phaseId = 1;
     */
    phaseId: number;
}
/**
 * @generated from protobuf message GetPhaseResponse
 */
export interface GetPhaseResponse {
    /**
     * @generated from protobuf field: Phase phase = 1;
     */
    phase?: Phase;
}
/**
 * @generated from protobuf message ListPhasesRequest
 */
export interface ListPhasesRequest {
    /**
     * @generated from protobuf field: repeated uint64 phaseIds = 1;
     */
    phaseIds: number[];
}
/**
 * @generated from protobuf message ListPhasesResponse
 */
export interface ListPhasesResponse {
    /**
     * @generated from protobuf field: repeated Phase phases = 1;
     */
    phases: Phase[];
}
/**
 * @generated from protobuf message CreatePhaseRequest
 */
export interface CreatePhaseRequest {
    /**
     * @generated from protobuf field: uint64 projectId = 1;
     */
    projectId: number;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp expectedStartAt = 3;
     */
    expectedStartAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp expectedEndAt = 4;
     */
    expectedEndAt?: Timestamp;
}
/**
 * @generated from protobuf message CreatePhaseResponse
 */
export interface CreatePhaseResponse {
    /**
     * @generated from protobuf field: Phase phase = 1;
     */
    phase?: Phase;
}
/**
 * @generated from protobuf message UpdatePhaseRequest
 */
export interface UpdatePhaseRequest {
    /**
     * @generated from protobuf field: uint64 phaseId = 1;
     */
    phaseId: number;
    /**
     * @generated from protobuf field: optional string name = 2;
     */
    name?: string;
    /**
     * @generated from protobuf field: optional google.protobuf.Timestamp expectedStartAt = 3;
     */
    expectedStartAt?: Timestamp;
    /**
     * @generated from protobuf field: optional google.protobuf.Timestamp expectedEndAt = 4;
     */
    expectedEndAt?: Timestamp;
    /**
     * @generated from protobuf field: optional google.protobuf.Timestamp actualStartAt = 5;
     */
    actualStartAt?: Timestamp;
    /**
     * @generated from protobuf field: optional google.protobuf.Timestamp actualEndAt = 6;
     */
    actualEndAt?: Timestamp;
    /**
     * @generated from protobuf field: optional PhaseStatus status = 7;
     */
    status?: PhaseStatus;
}
/**
 * @generated from protobuf message UpdatePhaseResponse
 */
export interface UpdatePhaseResponse {
    /**
     * @generated from protobuf field: Phase phase = 1;
     */
    phase?: Phase;
}
/**
 * @generated from protobuf message DeletePhaseRequest
 */
export interface DeletePhaseRequest {
    /**
     * @generated from protobuf field: uint64 phaseId = 1;
     */
    phaseId: number;
}
/**
 * @generated from protobuf message AddStoryToPhaseRequest
 */
export interface AddStoryToPhaseRequest {
    /**
     * @generated from protobuf field: uint64 phaseId = 1;
     */
    phaseId: number;
    /**
     * @generated from protobuf field: uint64 storyId = 2;
     */
    storyId: number;
}
/**
 * @generated from protobuf message RemoveStoryFromPhaseRequest
 */
export interface RemoveStoryFromPhaseRequest {
    /**
     * @generated from protobuf field: uint64 phaseId = 1;
     */
    phaseId: number;
    /**
     * @generated from protobuf field: uint64 storyId = 2;
     */
    storyId: number;
}
/**
 * @generated from protobuf message AddStoriesToPhaseRequest
 */
export interface AddStoriesToPhaseRequest {
    /**
     * @generated from protobuf field: uint64 phaseId = 1;
     */
    phaseId: number;
    /**
     * @generated from protobuf field: repeated uint64 storyIds = 2;
     */
    storyIds: number[];
}
/**
 * @generated from protobuf message RemoveStoriesFromPhaseRequest
 */
export interface RemoveStoriesFromPhaseRequest {
    /**
     * @generated from protobuf field: uint64 phaseId = 1;
     */
    phaseId: number;
    /**
     * @generated from protobuf field: repeated uint64 storyIds = 2;
     */
    storyIds: number[];
}
// @generated message type with reflection information, may provide speed optimized methods
class GetPhaseRequest$Type extends MessageType<GetPhaseRequest> {
    constructor() {
        super("GetPhaseRequest", [
            { no: 1, name: "phaseId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<GetPhaseRequest>): GetPhaseRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.phaseId = 0;
        if (value !== undefined)
            reflectionMergePartial<GetPhaseRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPhaseRequest): GetPhaseRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 phaseId */ 1:
                    message.phaseId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPhaseRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 phaseId = 1; */
        if (message.phaseId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.phaseId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetPhaseRequest
 */
export const GetPhaseRequest = new GetPhaseRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPhaseResponse$Type extends MessageType<GetPhaseResponse> {
    constructor() {
        super("GetPhaseResponse", [
            { no: 1, name: "phase", kind: "message", T: () => Phase }
        ]);
    }
    create(value?: PartialMessage<GetPhaseResponse>): GetPhaseResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetPhaseResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPhaseResponse): GetPhaseResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Phase phase */ 1:
                    message.phase = Phase.internalBinaryRead(reader, reader.uint32(), options, message.phase);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPhaseResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Phase phase = 1; */
        if (message.phase)
            Phase.internalBinaryWrite(message.phase, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetPhaseResponse
 */
export const GetPhaseResponse = new GetPhaseResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListPhasesRequest$Type extends MessageType<ListPhasesRequest> {
    constructor() {
        super("ListPhasesRequest", [
            { no: 1, name: "phaseIds", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<ListPhasesRequest>): ListPhasesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.phaseIds = [];
        if (value !== undefined)
            reflectionMergePartial<ListPhasesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListPhasesRequest): ListPhasesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint64 phaseIds */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.phaseIds.push(reader.uint64().toNumber());
                    else
                        message.phaseIds.push(reader.uint64().toNumber());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListPhasesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint64 phaseIds = 1; */
        if (message.phaseIds.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.phaseIds.length; i++)
                writer.uint64(message.phaseIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListPhasesRequest
 */
export const ListPhasesRequest = new ListPhasesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListPhasesResponse$Type extends MessageType<ListPhasesResponse> {
    constructor() {
        super("ListPhasesResponse", [
            { no: 1, name: "phases", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Phase }
        ]);
    }
    create(value?: PartialMessage<ListPhasesResponse>): ListPhasesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.phases = [];
        if (value !== undefined)
            reflectionMergePartial<ListPhasesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListPhasesResponse): ListPhasesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Phase phases */ 1:
                    message.phases.push(Phase.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListPhasesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Phase phases = 1; */
        for (let i = 0; i < message.phases.length; i++)
            Phase.internalBinaryWrite(message.phases[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListPhasesResponse
 */
export const ListPhasesResponse = new ListPhasesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreatePhaseRequest$Type extends MessageType<CreatePhaseRequest> {
    constructor() {
        super("CreatePhaseRequest", [
            { no: 1, name: "projectId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "expectedStartAt", kind: "message", T: () => Timestamp },
            { no: 4, name: "expectedEndAt", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<CreatePhaseRequest>): CreatePhaseRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.projectId = 0;
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<CreatePhaseRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreatePhaseRequest): CreatePhaseRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 projectId */ 1:
                    message.projectId = reader.uint64().toNumber();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* google.protobuf.Timestamp expectedStartAt */ 3:
                    message.expectedStartAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.expectedStartAt);
                    break;
                case /* google.protobuf.Timestamp expectedEndAt */ 4:
                    message.expectedEndAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.expectedEndAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreatePhaseRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 projectId = 1; */
        if (message.projectId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.projectId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* google.protobuf.Timestamp expectedStartAt = 3; */
        if (message.expectedStartAt)
            Timestamp.internalBinaryWrite(message.expectedStartAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp expectedEndAt = 4; */
        if (message.expectedEndAt)
            Timestamp.internalBinaryWrite(message.expectedEndAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreatePhaseRequest
 */
export const CreatePhaseRequest = new CreatePhaseRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreatePhaseResponse$Type extends MessageType<CreatePhaseResponse> {
    constructor() {
        super("CreatePhaseResponse", [
            { no: 1, name: "phase", kind: "message", T: () => Phase }
        ]);
    }
    create(value?: PartialMessage<CreatePhaseResponse>): CreatePhaseResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreatePhaseResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreatePhaseResponse): CreatePhaseResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Phase phase */ 1:
                    message.phase = Phase.internalBinaryRead(reader, reader.uint32(), options, message.phase);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreatePhaseResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Phase phase = 1; */
        if (message.phase)
            Phase.internalBinaryWrite(message.phase, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreatePhaseResponse
 */
export const CreatePhaseResponse = new CreatePhaseResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatePhaseRequest$Type extends MessageType<UpdatePhaseRequest> {
    constructor() {
        super("UpdatePhaseRequest", [
            { no: 1, name: "phaseId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "expectedStartAt", kind: "message", T: () => Timestamp },
            { no: 4, name: "expectedEndAt", kind: "message", T: () => Timestamp },
            { no: 5, name: "actualStartAt", kind: "message", T: () => Timestamp },
            { no: 6, name: "actualEndAt", kind: "message", T: () => Timestamp },
            { no: 7, name: "status", kind: "enum", opt: true, T: () => ["PhaseStatus", PhaseStatus, "PHASE_STATUS_"] }
        ]);
    }
    create(value?: PartialMessage<UpdatePhaseRequest>): UpdatePhaseRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.phaseId = 0;
        if (value !== undefined)
            reflectionMergePartial<UpdatePhaseRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdatePhaseRequest): UpdatePhaseRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 phaseId */ 1:
                    message.phaseId = reader.uint64().toNumber();
                    break;
                case /* optional string name */ 2:
                    message.name = reader.string();
                    break;
                case /* optional google.protobuf.Timestamp expectedStartAt */ 3:
                    message.expectedStartAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.expectedStartAt);
                    break;
                case /* optional google.protobuf.Timestamp expectedEndAt */ 4:
                    message.expectedEndAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.expectedEndAt);
                    break;
                case /* optional google.protobuf.Timestamp actualStartAt */ 5:
                    message.actualStartAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.actualStartAt);
                    break;
                case /* optional google.protobuf.Timestamp actualEndAt */ 6:
                    message.actualEndAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.actualEndAt);
                    break;
                case /* optional PhaseStatus status */ 7:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdatePhaseRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 phaseId = 1; */
        if (message.phaseId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.phaseId);
        /* optional string name = 2; */
        if (message.name !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* optional google.protobuf.Timestamp expectedStartAt = 3; */
        if (message.expectedStartAt)
            Timestamp.internalBinaryWrite(message.expectedStartAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional google.protobuf.Timestamp expectedEndAt = 4; */
        if (message.expectedEndAt)
            Timestamp.internalBinaryWrite(message.expectedEndAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional google.protobuf.Timestamp actualStartAt = 5; */
        if (message.actualStartAt)
            Timestamp.internalBinaryWrite(message.actualStartAt, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* optional google.protobuf.Timestamp actualEndAt = 6; */
        if (message.actualEndAt)
            Timestamp.internalBinaryWrite(message.actualEndAt, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* optional PhaseStatus status = 7; */
        if (message.status !== undefined)
            writer.tag(7, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdatePhaseRequest
 */
export const UpdatePhaseRequest = new UpdatePhaseRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatePhaseResponse$Type extends MessageType<UpdatePhaseResponse> {
    constructor() {
        super("UpdatePhaseResponse", [
            { no: 1, name: "phase", kind: "message", T: () => Phase }
        ]);
    }
    create(value?: PartialMessage<UpdatePhaseResponse>): UpdatePhaseResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdatePhaseResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdatePhaseResponse): UpdatePhaseResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Phase phase */ 1:
                    message.phase = Phase.internalBinaryRead(reader, reader.uint32(), options, message.phase);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdatePhaseResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Phase phase = 1; */
        if (message.phase)
            Phase.internalBinaryWrite(message.phase, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdatePhaseResponse
 */
export const UpdatePhaseResponse = new UpdatePhaseResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeletePhaseRequest$Type extends MessageType<DeletePhaseRequest> {
    constructor() {
        super("DeletePhaseRequest", [
            { no: 1, name: "phaseId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<DeletePhaseRequest>): DeletePhaseRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.phaseId = 0;
        if (value !== undefined)
            reflectionMergePartial<DeletePhaseRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeletePhaseRequest): DeletePhaseRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 phaseId */ 1:
                    message.phaseId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeletePhaseRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 phaseId = 1; */
        if (message.phaseId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.phaseId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeletePhaseRequest
 */
export const DeletePhaseRequest = new DeletePhaseRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddStoryToPhaseRequest$Type extends MessageType<AddStoryToPhaseRequest> {
    constructor() {
        super("AddStoryToPhaseRequest", [
            { no: 1, name: "phaseId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "storyId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<AddStoryToPhaseRequest>): AddStoryToPhaseRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.phaseId = 0;
        message.storyId = 0;
        if (value !== undefined)
            reflectionMergePartial<AddStoryToPhaseRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddStoryToPhaseRequest): AddStoryToPhaseRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 phaseId */ 1:
                    message.phaseId = reader.uint64().toNumber();
                    break;
                case /* uint64 storyId */ 2:
                    message.storyId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddStoryToPhaseRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 phaseId = 1; */
        if (message.phaseId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.phaseId);
        /* uint64 storyId = 2; */
        if (message.storyId !== 0)
            writer.tag(2, WireType.Varint).uint64(message.storyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AddStoryToPhaseRequest
 */
export const AddStoryToPhaseRequest = new AddStoryToPhaseRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveStoryFromPhaseRequest$Type extends MessageType<RemoveStoryFromPhaseRequest> {
    constructor() {
        super("RemoveStoryFromPhaseRequest", [
            { no: 1, name: "phaseId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "storyId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveStoryFromPhaseRequest>): RemoveStoryFromPhaseRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.phaseId = 0;
        message.storyId = 0;
        if (value !== undefined)
            reflectionMergePartial<RemoveStoryFromPhaseRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveStoryFromPhaseRequest): RemoveStoryFromPhaseRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 phaseId */ 1:
                    message.phaseId = reader.uint64().toNumber();
                    break;
                case /* uint64 storyId */ 2:
                    message.storyId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveStoryFromPhaseRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 phaseId = 1; */
        if (message.phaseId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.phaseId);
        /* uint64 storyId = 2; */
        if (message.storyId !== 0)
            writer.tag(2, WireType.Varint).uint64(message.storyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RemoveStoryFromPhaseRequest
 */
export const RemoveStoryFromPhaseRequest = new RemoveStoryFromPhaseRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddStoriesToPhaseRequest$Type extends MessageType<AddStoriesToPhaseRequest> {
    constructor() {
        super("AddStoriesToPhaseRequest", [
            { no: 1, name: "phaseId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "storyIds", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<AddStoriesToPhaseRequest>): AddStoriesToPhaseRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.phaseId = 0;
        message.storyIds = [];
        if (value !== undefined)
            reflectionMergePartial<AddStoriesToPhaseRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddStoriesToPhaseRequest): AddStoriesToPhaseRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 phaseId */ 1:
                    message.phaseId = reader.uint64().toNumber();
                    break;
                case /* repeated uint64 storyIds */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.storyIds.push(reader.uint64().toNumber());
                    else
                        message.storyIds.push(reader.uint64().toNumber());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddStoriesToPhaseRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 phaseId = 1; */
        if (message.phaseId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.phaseId);
        /* repeated uint64 storyIds = 2; */
        if (message.storyIds.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.storyIds.length; i++)
                writer.uint64(message.storyIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AddStoriesToPhaseRequest
 */
export const AddStoriesToPhaseRequest = new AddStoriesToPhaseRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveStoriesFromPhaseRequest$Type extends MessageType<RemoveStoriesFromPhaseRequest> {
    constructor() {
        super("RemoveStoriesFromPhaseRequest", [
            { no: 1, name: "phaseId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "storyIds", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveStoriesFromPhaseRequest>): RemoveStoriesFromPhaseRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.phaseId = 0;
        message.storyIds = [];
        if (value !== undefined)
            reflectionMergePartial<RemoveStoriesFromPhaseRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveStoriesFromPhaseRequest): RemoveStoriesFromPhaseRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 phaseId */ 1:
                    message.phaseId = reader.uint64().toNumber();
                    break;
                case /* repeated uint64 storyIds */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.storyIds.push(reader.uint64().toNumber());
                    else
                        message.storyIds.push(reader.uint64().toNumber());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveStoriesFromPhaseRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 phaseId = 1; */
        if (message.phaseId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.phaseId);
        /* repeated uint64 storyIds = 2; */
        if (message.storyIds.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.storyIds.length; i++)
                writer.uint64(message.storyIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RemoveStoriesFromPhaseRequest
 */
export const RemoveStoriesFromPhaseRequest = new RemoveStoriesFromPhaseRequest$Type();
/**
 * @generated ServiceType for protobuf service PhaseService
 */
export const PhaseService = new ServiceType("PhaseService", [
    { name: "GetPhase", options: {}, I: GetPhaseRequest, O: GetPhaseResponse },
    { name: "ListPhases", options: {}, I: ListPhasesRequest, O: ListPhasesResponse },
    { name: "CreatePhase", options: {}, I: CreatePhaseRequest, O: CreatePhaseResponse },
    { name: "UpdatePhase", options: {}, I: UpdatePhaseRequest, O: UpdatePhaseResponse },
    { name: "DeletePhase", options: {}, I: DeletePhaseRequest, O: Empty },
    { name: "AddStoryToPhase", options: {}, I: AddStoryToPhaseRequest, O: Empty },
    { name: "RemoveStoryFromPhase", options: {}, I: RemoveStoryFromPhaseRequest, O: Empty },
    { name: "AddStoriesToPhase", options: {}, I: AddStoriesToPhaseRequest, O: Empty },
    { name: "RemoveStoriesFromPhase", options: {}, I: RemoveStoriesFromPhaseRequest, O: Empty }
]);
