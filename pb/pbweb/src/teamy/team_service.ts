// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "teamy/team_service.proto" (syntax proto3)
// tslint:disable
import { Empty } from "../google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Duration } from "../google/protobuf/duration";
import { TeamMember } from "./message/team_member";
import { Team } from "./message/team";
/**
 * @generated from protobuf message GetTeamRequest
 */
export interface GetTeamRequest {
    /**
     * @generated from protobuf field: uint64 teamId = 1;
     */
    teamId: number;
}
/**
 * @generated from protobuf message GetTeamResponse
 */
export interface GetTeamResponse {
    /**
     * @generated from protobuf field: Team team = 1;
     */
    team?: Team;
}
/**
 * @generated from protobuf message GetTeamMemberRequest
 */
export interface GetTeamMemberRequest {
    /**
     * @generated from protobuf field: uint64 teamId = 1;
     */
    teamId: number;
    /**
     * @generated from protobuf field: uint64 userId = 2;
     */
    userId: number;
}
/**
 * @generated from protobuf message GetTeamMemberResponse
 */
export interface GetTeamMemberResponse {
    /**
     * @generated from protobuf field: TeamMember member = 1;
     */
    member?: TeamMember;
}
/**
 * @generated from protobuf message CreateTeamRequest
 */
export interface CreateTeamRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * @generated from protobuf message CreateTeamResponse
 */
export interface CreateTeamResponse {
    /**
     * @generated from protobuf field: uint64 teamId = 1;
     */
    teamId: number;
}
/**
 * @generated from protobuf message UpdateTeamRequest
 */
export interface UpdateTeamRequest {
    /**
     * @generated from protobuf field: uint64 teamId = 1;
     */
    teamId: number;
    /**
     * @generated from protobuf field: optional string name = 2;
     */
    name?: string;
    /**
     * @generated from protobuf field: optional string iconUrl = 3;
     */
    iconUrl?: string;
    /**
     * @generated from protobuf field: optional uint64 ownerUserId = 4;
     */
    ownerUserId?: number;
}
/**
 * @generated from protobuf message DeleteTeamRequest
 */
export interface DeleteTeamRequest {
    /**
     * @generated from protobuf field: uint64 teamId = 1;
     */
    teamId: number;
}
/**
 * @generated from protobuf message UpdateTeamActiveSprintRequest
 */
export interface UpdateTeamActiveSprintRequest {
    /**
     * @generated from protobuf field: uint64 teamId = 1;
     */
    teamId: number;
    /**
     * @generated from protobuf field: uint64 sprintId = 2;
     */
    sprintId: number;
}
/**
 * @generated from protobuf message UpdateTeamMemberRequest
 */
export interface UpdateTeamMemberRequest {
    /**
     * @generated from protobuf field: uint64 teamId = 1;
     */
    teamId: number;
    /**
     * @generated from protobuf field: uint64 userId = 2;
     */
    userId: number;
    /**
     * @generated from protobuf field: optional google.protobuf.Duration weeklyBandwidth = 3;
     */
    weeklyBandwidth?: Duration;
}
/**
 * @generated from protobuf message ListTeamMembersRequest
 */
export interface ListTeamMembersRequest {
    /**
     * @generated from protobuf field: uint64 teamId = 1;
     */
    teamId: number;
}
/**
 * @generated from protobuf message ListTeamMembersResponse
 */
export interface ListTeamMembersResponse {
    /**
     * @generated from protobuf field: repeated TeamMember teamMembers = 1;
     */
    teamMembers: TeamMember[];
}
/**
 * @generated from protobuf message AddMemberToTeamRequest
 */
export interface AddMemberToTeamRequest {
    /**
     * @generated from protobuf field: uint64 teamId = 1;
     */
    teamId: number;
    /**
     * @generated from protobuf field: uint64 memberUserId = 2;
     */
    memberUserId: number;
}
/**
 * @generated from protobuf message RemoveMemberFromTeamRequest
 */
export interface RemoveMemberFromTeamRequest {
    /**
     * @generated from protobuf field: uint64 teamId = 1;
     */
    teamId: number;
    /**
     * @generated from protobuf field: uint64 memberUserId = 2;
     */
    memberUserId: number;
}
/**
 * @generated from protobuf message CreateTeamIconUploadSessionRequest
 */
export interface CreateTeamIconUploadSessionRequest {
    /**
     * @generated from protobuf field: uint64 teamId = 1;
     */
    teamId: number;
}
/**
 * @generated from protobuf message CreateTeamIconUploadSessionResponse
 */
export interface CreateTeamIconUploadSessionResponse {
    /**
     * @generated from protobuf field: uint64 uploadSessionId = 1;
     */
    uploadSessionId: number;
}
/**
 * @generated from protobuf message FinishTeamIconUploadSessionRequest
 */
export interface FinishTeamIconUploadSessionRequest {
    /**
     * @generated from protobuf field: uint64 uploadSessionId = 1;
     */
    uploadSessionId: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetTeamRequest$Type extends MessageType<GetTeamRequest> {
    constructor() {
        super("GetTeamRequest", [
            { no: 1, name: "teamId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<GetTeamRequest>): GetTeamRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamId = 0;
        if (value !== undefined)
            reflectionMergePartial<GetTeamRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTeamRequest): GetTeamRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 teamId */ 1:
                    message.teamId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTeamRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 teamId = 1; */
        if (message.teamId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.teamId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetTeamRequest
 */
export const GetTeamRequest = new GetTeamRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTeamResponse$Type extends MessageType<GetTeamResponse> {
    constructor() {
        super("GetTeamResponse", [
            { no: 1, name: "team", kind: "message", T: () => Team }
        ]);
    }
    create(value?: PartialMessage<GetTeamResponse>): GetTeamResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetTeamResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTeamResponse): GetTeamResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Team team */ 1:
                    message.team = Team.internalBinaryRead(reader, reader.uint32(), options, message.team);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTeamResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Team team = 1; */
        if (message.team)
            Team.internalBinaryWrite(message.team, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetTeamResponse
 */
export const GetTeamResponse = new GetTeamResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTeamMemberRequest$Type extends MessageType<GetTeamMemberRequest> {
    constructor() {
        super("GetTeamMemberRequest", [
            { no: 1, name: "teamId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "userId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<GetTeamMemberRequest>): GetTeamMemberRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamId = 0;
        message.userId = 0;
        if (value !== undefined)
            reflectionMergePartial<GetTeamMemberRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTeamMemberRequest): GetTeamMemberRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 teamId */ 1:
                    message.teamId = reader.uint64().toNumber();
                    break;
                case /* uint64 userId */ 2:
                    message.userId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTeamMemberRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 teamId = 1; */
        if (message.teamId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.teamId);
        /* uint64 userId = 2; */
        if (message.userId !== 0)
            writer.tag(2, WireType.Varint).uint64(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetTeamMemberRequest
 */
export const GetTeamMemberRequest = new GetTeamMemberRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTeamMemberResponse$Type extends MessageType<GetTeamMemberResponse> {
    constructor() {
        super("GetTeamMemberResponse", [
            { no: 1, name: "member", kind: "message", T: () => TeamMember }
        ]);
    }
    create(value?: PartialMessage<GetTeamMemberResponse>): GetTeamMemberResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetTeamMemberResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTeamMemberResponse): GetTeamMemberResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* TeamMember member */ 1:
                    message.member = TeamMember.internalBinaryRead(reader, reader.uint32(), options, message.member);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTeamMemberResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* TeamMember member = 1; */
        if (message.member)
            TeamMember.internalBinaryWrite(message.member, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetTeamMemberResponse
 */
export const GetTeamMemberResponse = new GetTeamMemberResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateTeamRequest$Type extends MessageType<CreateTeamRequest> {
    constructor() {
        super("CreateTeamRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateTeamRequest>): CreateTeamRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<CreateTeamRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateTeamRequest): CreateTeamRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateTeamRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateTeamRequest
 */
export const CreateTeamRequest = new CreateTeamRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateTeamResponse$Type extends MessageType<CreateTeamResponse> {
    constructor() {
        super("CreateTeamResponse", [
            { no: 1, name: "teamId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<CreateTeamResponse>): CreateTeamResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamId = 0;
        if (value !== undefined)
            reflectionMergePartial<CreateTeamResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateTeamResponse): CreateTeamResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 teamId */ 1:
                    message.teamId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateTeamResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 teamId = 1; */
        if (message.teamId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.teamId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateTeamResponse
 */
export const CreateTeamResponse = new CreateTeamResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateTeamRequest$Type extends MessageType<UpdateTeamRequest> {
    constructor() {
        super("UpdateTeamRequest", [
            { no: 1, name: "teamId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "iconUrl", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "ownerUserId", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateTeamRequest>): UpdateTeamRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamId = 0;
        if (value !== undefined)
            reflectionMergePartial<UpdateTeamRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateTeamRequest): UpdateTeamRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 teamId */ 1:
                    message.teamId = reader.uint64().toNumber();
                    break;
                case /* optional string name */ 2:
                    message.name = reader.string();
                    break;
                case /* optional string iconUrl */ 3:
                    message.iconUrl = reader.string();
                    break;
                case /* optional uint64 ownerUserId */ 4:
                    message.ownerUserId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateTeamRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 teamId = 1; */
        if (message.teamId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.teamId);
        /* optional string name = 2; */
        if (message.name !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* optional string iconUrl = 3; */
        if (message.iconUrl !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.iconUrl);
        /* optional uint64 ownerUserId = 4; */
        if (message.ownerUserId !== undefined)
            writer.tag(4, WireType.Varint).uint64(message.ownerUserId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateTeamRequest
 */
export const UpdateTeamRequest = new UpdateTeamRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteTeamRequest$Type extends MessageType<DeleteTeamRequest> {
    constructor() {
        super("DeleteTeamRequest", [
            { no: 1, name: "teamId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteTeamRequest>): DeleteTeamRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamId = 0;
        if (value !== undefined)
            reflectionMergePartial<DeleteTeamRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteTeamRequest): DeleteTeamRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 teamId */ 1:
                    message.teamId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteTeamRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 teamId = 1; */
        if (message.teamId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.teamId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteTeamRequest
 */
export const DeleteTeamRequest = new DeleteTeamRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateTeamActiveSprintRequest$Type extends MessageType<UpdateTeamActiveSprintRequest> {
    constructor() {
        super("UpdateTeamActiveSprintRequest", [
            { no: 1, name: "teamId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "sprintId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateTeamActiveSprintRequest>): UpdateTeamActiveSprintRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamId = 0;
        message.sprintId = 0;
        if (value !== undefined)
            reflectionMergePartial<UpdateTeamActiveSprintRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateTeamActiveSprintRequest): UpdateTeamActiveSprintRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 teamId */ 1:
                    message.teamId = reader.uint64().toNumber();
                    break;
                case /* uint64 sprintId */ 2:
                    message.sprintId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateTeamActiveSprintRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 teamId = 1; */
        if (message.teamId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.teamId);
        /* uint64 sprintId = 2; */
        if (message.sprintId !== 0)
            writer.tag(2, WireType.Varint).uint64(message.sprintId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateTeamActiveSprintRequest
 */
export const UpdateTeamActiveSprintRequest = new UpdateTeamActiveSprintRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateTeamMemberRequest$Type extends MessageType<UpdateTeamMemberRequest> {
    constructor() {
        super("UpdateTeamMemberRequest", [
            { no: 1, name: "teamId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "userId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "weeklyBandwidth", kind: "message", T: () => Duration }
        ]);
    }
    create(value?: PartialMessage<UpdateTeamMemberRequest>): UpdateTeamMemberRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamId = 0;
        message.userId = 0;
        if (value !== undefined)
            reflectionMergePartial<UpdateTeamMemberRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateTeamMemberRequest): UpdateTeamMemberRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 teamId */ 1:
                    message.teamId = reader.uint64().toNumber();
                    break;
                case /* uint64 userId */ 2:
                    message.userId = reader.uint64().toNumber();
                    break;
                case /* optional google.protobuf.Duration weeklyBandwidth */ 3:
                    message.weeklyBandwidth = Duration.internalBinaryRead(reader, reader.uint32(), options, message.weeklyBandwidth);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateTeamMemberRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 teamId = 1; */
        if (message.teamId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.teamId);
        /* uint64 userId = 2; */
        if (message.userId !== 0)
            writer.tag(2, WireType.Varint).uint64(message.userId);
        /* optional google.protobuf.Duration weeklyBandwidth = 3; */
        if (message.weeklyBandwidth)
            Duration.internalBinaryWrite(message.weeklyBandwidth, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateTeamMemberRequest
 */
export const UpdateTeamMemberRequest = new UpdateTeamMemberRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListTeamMembersRequest$Type extends MessageType<ListTeamMembersRequest> {
    constructor() {
        super("ListTeamMembersRequest", [
            { no: 1, name: "teamId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<ListTeamMembersRequest>): ListTeamMembersRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamId = 0;
        if (value !== undefined)
            reflectionMergePartial<ListTeamMembersRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListTeamMembersRequest): ListTeamMembersRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 teamId */ 1:
                    message.teamId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListTeamMembersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 teamId = 1; */
        if (message.teamId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.teamId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListTeamMembersRequest
 */
export const ListTeamMembersRequest = new ListTeamMembersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListTeamMembersResponse$Type extends MessageType<ListTeamMembersResponse> {
    constructor() {
        super("ListTeamMembersResponse", [
            { no: 1, name: "teamMembers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TeamMember }
        ]);
    }
    create(value?: PartialMessage<ListTeamMembersResponse>): ListTeamMembersResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamMembers = [];
        if (value !== undefined)
            reflectionMergePartial<ListTeamMembersResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListTeamMembersResponse): ListTeamMembersResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated TeamMember teamMembers */ 1:
                    message.teamMembers.push(TeamMember.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListTeamMembersResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated TeamMember teamMembers = 1; */
        for (let i = 0; i < message.teamMembers.length; i++)
            TeamMember.internalBinaryWrite(message.teamMembers[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListTeamMembersResponse
 */
export const ListTeamMembersResponse = new ListTeamMembersResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddMemberToTeamRequest$Type extends MessageType<AddMemberToTeamRequest> {
    constructor() {
        super("AddMemberToTeamRequest", [
            { no: 1, name: "teamId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "memberUserId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<AddMemberToTeamRequest>): AddMemberToTeamRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamId = 0;
        message.memberUserId = 0;
        if (value !== undefined)
            reflectionMergePartial<AddMemberToTeamRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddMemberToTeamRequest): AddMemberToTeamRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 teamId */ 1:
                    message.teamId = reader.uint64().toNumber();
                    break;
                case /* uint64 memberUserId */ 2:
                    message.memberUserId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddMemberToTeamRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 teamId = 1; */
        if (message.teamId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.teamId);
        /* uint64 memberUserId = 2; */
        if (message.memberUserId !== 0)
            writer.tag(2, WireType.Varint).uint64(message.memberUserId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AddMemberToTeamRequest
 */
export const AddMemberToTeamRequest = new AddMemberToTeamRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveMemberFromTeamRequest$Type extends MessageType<RemoveMemberFromTeamRequest> {
    constructor() {
        super("RemoveMemberFromTeamRequest", [
            { no: 1, name: "teamId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "memberUserId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveMemberFromTeamRequest>): RemoveMemberFromTeamRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamId = 0;
        message.memberUserId = 0;
        if (value !== undefined)
            reflectionMergePartial<RemoveMemberFromTeamRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveMemberFromTeamRequest): RemoveMemberFromTeamRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 teamId */ 1:
                    message.teamId = reader.uint64().toNumber();
                    break;
                case /* uint64 memberUserId */ 2:
                    message.memberUserId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveMemberFromTeamRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 teamId = 1; */
        if (message.teamId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.teamId);
        /* uint64 memberUserId = 2; */
        if (message.memberUserId !== 0)
            writer.tag(2, WireType.Varint).uint64(message.memberUserId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RemoveMemberFromTeamRequest
 */
export const RemoveMemberFromTeamRequest = new RemoveMemberFromTeamRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateTeamIconUploadSessionRequest$Type extends MessageType<CreateTeamIconUploadSessionRequest> {
    constructor() {
        super("CreateTeamIconUploadSessionRequest", [
            { no: 1, name: "teamId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<CreateTeamIconUploadSessionRequest>): CreateTeamIconUploadSessionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamId = 0;
        if (value !== undefined)
            reflectionMergePartial<CreateTeamIconUploadSessionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateTeamIconUploadSessionRequest): CreateTeamIconUploadSessionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 teamId */ 1:
                    message.teamId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateTeamIconUploadSessionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 teamId = 1; */
        if (message.teamId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.teamId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateTeamIconUploadSessionRequest
 */
export const CreateTeamIconUploadSessionRequest = new CreateTeamIconUploadSessionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateTeamIconUploadSessionResponse$Type extends MessageType<CreateTeamIconUploadSessionResponse> {
    constructor() {
        super("CreateTeamIconUploadSessionResponse", [
            { no: 1, name: "uploadSessionId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<CreateTeamIconUploadSessionResponse>): CreateTeamIconUploadSessionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uploadSessionId = 0;
        if (value !== undefined)
            reflectionMergePartial<CreateTeamIconUploadSessionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateTeamIconUploadSessionResponse): CreateTeamIconUploadSessionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 uploadSessionId */ 1:
                    message.uploadSessionId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateTeamIconUploadSessionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 uploadSessionId = 1; */
        if (message.uploadSessionId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.uploadSessionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateTeamIconUploadSessionResponse
 */
export const CreateTeamIconUploadSessionResponse = new CreateTeamIconUploadSessionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FinishTeamIconUploadSessionRequest$Type extends MessageType<FinishTeamIconUploadSessionRequest> {
    constructor() {
        super("FinishTeamIconUploadSessionRequest", [
            { no: 1, name: "uploadSessionId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<FinishTeamIconUploadSessionRequest>): FinishTeamIconUploadSessionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uploadSessionId = 0;
        if (value !== undefined)
            reflectionMergePartial<FinishTeamIconUploadSessionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FinishTeamIconUploadSessionRequest): FinishTeamIconUploadSessionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 uploadSessionId */ 1:
                    message.uploadSessionId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FinishTeamIconUploadSessionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 uploadSessionId = 1; */
        if (message.uploadSessionId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.uploadSessionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FinishTeamIconUploadSessionRequest
 */
export const FinishTeamIconUploadSessionRequest = new FinishTeamIconUploadSessionRequest$Type();
/**
 * @generated ServiceType for protobuf service TeamService
 */
export const TeamService = new ServiceType("TeamService", [
    { name: "GetTeam", options: {}, I: GetTeamRequest, O: GetTeamResponse },
    { name: "CreateTeam", options: {}, I: CreateTeamRequest, O: CreateTeamResponse },
    { name: "UpdateTeam", options: {}, I: UpdateTeamRequest, O: Empty },
    { name: "DeleteTeam", options: {}, I: DeleteTeamRequest, O: Empty },
    { name: "UpdateTeamActiveSprint", options: {}, I: UpdateTeamActiveSprintRequest, O: Empty },
    { name: "GetTeamMember", options: {}, I: GetTeamMemberRequest, O: GetTeamMemberResponse },
    { name: "UpdateTeamMember", options: {}, I: UpdateTeamMemberRequest, O: Empty },
    { name: "ListTeamMembers", options: {}, I: ListTeamMembersRequest, O: ListTeamMembersResponse },
    { name: "AddMemberToTeam", options: {}, I: AddMemberToTeamRequest, O: Empty },
    { name: "RemoveMemberFromTeam", options: {}, I: RemoveMemberFromTeamRequest, O: Empty },
    { name: "CreateTeamIconUploadSession", options: {}, I: CreateTeamIconUploadSessionRequest, O: CreateTeamIconUploadSessionResponse },
    { name: "FinishTeamIconUploadSession", options: {}, I: FinishTeamIconUploadSessionRequest, O: Empty }
]);
