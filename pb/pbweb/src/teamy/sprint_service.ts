// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "teamy/sprint_service.proto" (syntax proto3)
// tslint:disable
import { Empty } from "../google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Sprint } from "./message/sprint";
import { Timestamp } from "../google/protobuf/timestamp";
/**
 * @generated from protobuf message GetSprintRequest
 */
export interface GetSprintRequest {
    /**
     * @generated from protobuf field: uint64 sprintId = 1;
     */
    sprintId: number;
}
/**
 * @generated from protobuf message ListSprintsRequest
 */
export interface ListSprintsRequest {
    /**
     * @generated from protobuf field: optional google.protobuf.Timestamp startAtAndAfter = 1;
     */
    startAtAndAfter?: Timestamp;
    /**
     * @generated from protobuf field: optional google.protobuf.Timestamp sortByStartAt = 2;
     */
    sortByStartAt?: Timestamp;
    /**
     * @generated from protobuf field: optional int32 countLimit = 3;
     */
    countLimit?: number;
}
/**
 * @generated from protobuf message ListSprintsResponse
 */
export interface ListSprintsResponse {
    /**
     * @generated from protobuf field: repeated Sprint sprints = 1;
     */
    sprints: Sprint[];
}
/**
 * @generated from protobuf message CreateSprintRequest
 */
export interface CreateSprintRequest {
    /**
     * @generated from protobuf field: google.protobuf.Timestamp startDate = 1;
     */
    startDate?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp endDate = 2;
     */
    endDate?: Timestamp;
}
/**
 * @generated from protobuf message CreateSprintResponse
 */
export interface CreateSprintResponse {
    /**
     * @generated from protobuf field: Sprint sprint = 1;
     */
    sprint?: Sprint;
}
/**
 * @generated from protobuf message GetSprintResponse
 */
export interface GetSprintResponse {
    /**
     * @generated from protobuf field: Sprint sprint = 1;
     */
    sprint?: Sprint;
}
/**
 * @generated from protobuf message GetActiveSprintRequest
 */
export interface GetActiveSprintRequest {
    /**
     * @generated from protobuf field: uint64 teamId = 1;
     */
    teamId: number;
}
/**
 * @generated from protobuf message GetActiveSprintResponse
 */
export interface GetActiveSprintResponse {
    /**
     * @generated from protobuf field: Sprint sprint = 1;
     */
    sprint?: Sprint;
}
/**
 * @generated from protobuf message AddTaskToSprintRequest
 */
export interface AddTaskToSprintRequest {
    /**
     * @generated from protobuf field: uint64 taskId = 1;
     */
    taskId: number;
    /**
     * @generated from protobuf field: uint64 sprintId = 2;
     */
    sprintId: number;
}
/**
 * @generated from protobuf message RemoveTaskToSprintRequest
 */
export interface RemoveTaskToSprintRequest {
    /**
     * @generated from protobuf field: uint64 taskId = 1;
     */
    taskId: number;
    /**
     * @generated from protobuf field: uint64 sprintId = 2;
     */
    sprintId: number;
}
/**
 * @generated from protobuf message DeleteSprintRequest
 */
export interface DeleteSprintRequest {
    /**
     * @generated from protobuf field: uint64 sprintId = 1;
     */
    sprintId: number;
}
/**
 * @generated from protobuf message AddTeamMemberToSprintRequest
 */
export interface AddTeamMemberToSprintRequest {
    /**
     * @generated from protobuf field: uint64 sprintId = 1;
     */
    sprintId: number;
    /**
     * @generated from protobuf field: uint64 teamId = 2;
     */
    teamId: number;
    /**
     * @generated from protobuf field: uint64 userId = 3;
     */
    userId: number;
}
/**
 * @generated from protobuf message RemoveTeamMemberFromSprintRequest
 */
export interface RemoveTeamMemberFromSprintRequest {
    /**
     * @generated from protobuf field: uint64 sprintId = 1;
     */
    sprintId: number;
    /**
     * @generated from protobuf field: uint64 teamId = 2;
     */
    teamId: number;
    /**
     * @generated from protobuf field: uint64 userId = 3;
     */
    userId: number;
}
/**
 * @generated from protobuf message MoveTasksToSprintRequest
 */
export interface MoveTasksToSprintRequest {
    /**
     * @generated from protobuf field: uint64 fromSprintId = 1;
     */
    fromSprintId: number;
    /**
     * @generated from protobuf field: uint64 toSprintId = 2;
     */
    toSprintId: number;
    /**
     * @generated from protobuf field: repeated uint64 taskIds = 3;
     */
    taskIds: number[];
}
/**
 * @generated from protobuf message CopyTasksToSprintRequest
 */
export interface CopyTasksToSprintRequest {
    /**
     * @generated from protobuf field: uint64 toSprintId = 1;
     */
    toSprintId: number;
    /**
     * @generated from protobuf field: repeated uint64 taskIds = 2;
     */
    taskIds: number[];
}
// @generated message type with reflection information, may provide speed optimized methods
class GetSprintRequest$Type extends MessageType<GetSprintRequest> {
    constructor() {
        super("GetSprintRequest", [
            { no: 1, name: "sprintId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<GetSprintRequest>): GetSprintRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sprintId = 0;
        if (value !== undefined)
            reflectionMergePartial<GetSprintRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSprintRequest): GetSprintRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 sprintId */ 1:
                    message.sprintId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSprintRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 sprintId = 1; */
        if (message.sprintId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.sprintId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetSprintRequest
 */
export const GetSprintRequest = new GetSprintRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListSprintsRequest$Type extends MessageType<ListSprintsRequest> {
    constructor() {
        super("ListSprintsRequest", [
            { no: 1, name: "startAtAndAfter", kind: "message", T: () => Timestamp },
            { no: 2, name: "sortByStartAt", kind: "message", T: () => Timestamp },
            { no: 3, name: "countLimit", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ListSprintsRequest>): ListSprintsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListSprintsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListSprintsRequest): ListSprintsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional google.protobuf.Timestamp startAtAndAfter */ 1:
                    message.startAtAndAfter = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.startAtAndAfter);
                    break;
                case /* optional google.protobuf.Timestamp sortByStartAt */ 2:
                    message.sortByStartAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.sortByStartAt);
                    break;
                case /* optional int32 countLimit */ 3:
                    message.countLimit = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListSprintsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional google.protobuf.Timestamp startAtAndAfter = 1; */
        if (message.startAtAndAfter)
            Timestamp.internalBinaryWrite(message.startAtAndAfter, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional google.protobuf.Timestamp sortByStartAt = 2; */
        if (message.sortByStartAt)
            Timestamp.internalBinaryWrite(message.sortByStartAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 countLimit = 3; */
        if (message.countLimit !== undefined)
            writer.tag(3, WireType.Varint).int32(message.countLimit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListSprintsRequest
 */
export const ListSprintsRequest = new ListSprintsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListSprintsResponse$Type extends MessageType<ListSprintsResponse> {
    constructor() {
        super("ListSprintsResponse", [
            { no: 1, name: "sprints", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Sprint }
        ]);
    }
    create(value?: PartialMessage<ListSprintsResponse>): ListSprintsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sprints = [];
        if (value !== undefined)
            reflectionMergePartial<ListSprintsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListSprintsResponse): ListSprintsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Sprint sprints */ 1:
                    message.sprints.push(Sprint.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListSprintsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Sprint sprints = 1; */
        for (let i = 0; i < message.sprints.length; i++)
            Sprint.internalBinaryWrite(message.sprints[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListSprintsResponse
 */
export const ListSprintsResponse = new ListSprintsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateSprintRequest$Type extends MessageType<CreateSprintRequest> {
    constructor() {
        super("CreateSprintRequest", [
            { no: 1, name: "startDate", kind: "message", T: () => Timestamp },
            { no: 2, name: "endDate", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<CreateSprintRequest>): CreateSprintRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateSprintRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateSprintRequest): CreateSprintRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp startDate */ 1:
                    message.startDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.startDate);
                    break;
                case /* google.protobuf.Timestamp endDate */ 2:
                    message.endDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.endDate);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateSprintRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp startDate = 1; */
        if (message.startDate)
            Timestamp.internalBinaryWrite(message.startDate, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp endDate = 2; */
        if (message.endDate)
            Timestamp.internalBinaryWrite(message.endDate, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateSprintRequest
 */
export const CreateSprintRequest = new CreateSprintRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateSprintResponse$Type extends MessageType<CreateSprintResponse> {
    constructor() {
        super("CreateSprintResponse", [
            { no: 1, name: "sprint", kind: "message", T: () => Sprint }
        ]);
    }
    create(value?: PartialMessage<CreateSprintResponse>): CreateSprintResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateSprintResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateSprintResponse): CreateSprintResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Sprint sprint */ 1:
                    message.sprint = Sprint.internalBinaryRead(reader, reader.uint32(), options, message.sprint);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateSprintResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Sprint sprint = 1; */
        if (message.sprint)
            Sprint.internalBinaryWrite(message.sprint, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateSprintResponse
 */
export const CreateSprintResponse = new CreateSprintResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSprintResponse$Type extends MessageType<GetSprintResponse> {
    constructor() {
        super("GetSprintResponse", [
            { no: 1, name: "sprint", kind: "message", T: () => Sprint }
        ]);
    }
    create(value?: PartialMessage<GetSprintResponse>): GetSprintResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetSprintResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSprintResponse): GetSprintResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Sprint sprint */ 1:
                    message.sprint = Sprint.internalBinaryRead(reader, reader.uint32(), options, message.sprint);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSprintResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Sprint sprint = 1; */
        if (message.sprint)
            Sprint.internalBinaryWrite(message.sprint, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetSprintResponse
 */
export const GetSprintResponse = new GetSprintResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetActiveSprintRequest$Type extends MessageType<GetActiveSprintRequest> {
    constructor() {
        super("GetActiveSprintRequest", [
            { no: 1, name: "teamId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<GetActiveSprintRequest>): GetActiveSprintRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamId = 0;
        if (value !== undefined)
            reflectionMergePartial<GetActiveSprintRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetActiveSprintRequest): GetActiveSprintRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 teamId */ 1:
                    message.teamId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetActiveSprintRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 teamId = 1; */
        if (message.teamId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.teamId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetActiveSprintRequest
 */
export const GetActiveSprintRequest = new GetActiveSprintRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetActiveSprintResponse$Type extends MessageType<GetActiveSprintResponse> {
    constructor() {
        super("GetActiveSprintResponse", [
            { no: 1, name: "sprint", kind: "message", T: () => Sprint }
        ]);
    }
    create(value?: PartialMessage<GetActiveSprintResponse>): GetActiveSprintResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetActiveSprintResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetActiveSprintResponse): GetActiveSprintResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Sprint sprint */ 1:
                    message.sprint = Sprint.internalBinaryRead(reader, reader.uint32(), options, message.sprint);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetActiveSprintResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Sprint sprint = 1; */
        if (message.sprint)
            Sprint.internalBinaryWrite(message.sprint, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetActiveSprintResponse
 */
export const GetActiveSprintResponse = new GetActiveSprintResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddTaskToSprintRequest$Type extends MessageType<AddTaskToSprintRequest> {
    constructor() {
        super("AddTaskToSprintRequest", [
            { no: 1, name: "taskId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "sprintId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<AddTaskToSprintRequest>): AddTaskToSprintRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.taskId = 0;
        message.sprintId = 0;
        if (value !== undefined)
            reflectionMergePartial<AddTaskToSprintRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddTaskToSprintRequest): AddTaskToSprintRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 taskId */ 1:
                    message.taskId = reader.uint64().toNumber();
                    break;
                case /* uint64 sprintId */ 2:
                    message.sprintId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddTaskToSprintRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 taskId = 1; */
        if (message.taskId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.taskId);
        /* uint64 sprintId = 2; */
        if (message.sprintId !== 0)
            writer.tag(2, WireType.Varint).uint64(message.sprintId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AddTaskToSprintRequest
 */
export const AddTaskToSprintRequest = new AddTaskToSprintRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveTaskToSprintRequest$Type extends MessageType<RemoveTaskToSprintRequest> {
    constructor() {
        super("RemoveTaskToSprintRequest", [
            { no: 1, name: "taskId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "sprintId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveTaskToSprintRequest>): RemoveTaskToSprintRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.taskId = 0;
        message.sprintId = 0;
        if (value !== undefined)
            reflectionMergePartial<RemoveTaskToSprintRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveTaskToSprintRequest): RemoveTaskToSprintRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 taskId */ 1:
                    message.taskId = reader.uint64().toNumber();
                    break;
                case /* uint64 sprintId */ 2:
                    message.sprintId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveTaskToSprintRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 taskId = 1; */
        if (message.taskId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.taskId);
        /* uint64 sprintId = 2; */
        if (message.sprintId !== 0)
            writer.tag(2, WireType.Varint).uint64(message.sprintId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RemoveTaskToSprintRequest
 */
export const RemoveTaskToSprintRequest = new RemoveTaskToSprintRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteSprintRequest$Type extends MessageType<DeleteSprintRequest> {
    constructor() {
        super("DeleteSprintRequest", [
            { no: 1, name: "sprintId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteSprintRequest>): DeleteSprintRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sprintId = 0;
        if (value !== undefined)
            reflectionMergePartial<DeleteSprintRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteSprintRequest): DeleteSprintRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 sprintId */ 1:
                    message.sprintId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteSprintRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 sprintId = 1; */
        if (message.sprintId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.sprintId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteSprintRequest
 */
export const DeleteSprintRequest = new DeleteSprintRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddTeamMemberToSprintRequest$Type extends MessageType<AddTeamMemberToSprintRequest> {
    constructor() {
        super("AddTeamMemberToSprintRequest", [
            { no: 1, name: "sprintId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "teamId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "userId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<AddTeamMemberToSprintRequest>): AddTeamMemberToSprintRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sprintId = 0;
        message.teamId = 0;
        message.userId = 0;
        if (value !== undefined)
            reflectionMergePartial<AddTeamMemberToSprintRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddTeamMemberToSprintRequest): AddTeamMemberToSprintRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 sprintId */ 1:
                    message.sprintId = reader.uint64().toNumber();
                    break;
                case /* uint64 teamId */ 2:
                    message.teamId = reader.uint64().toNumber();
                    break;
                case /* uint64 userId */ 3:
                    message.userId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddTeamMemberToSprintRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 sprintId = 1; */
        if (message.sprintId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.sprintId);
        /* uint64 teamId = 2; */
        if (message.teamId !== 0)
            writer.tag(2, WireType.Varint).uint64(message.teamId);
        /* uint64 userId = 3; */
        if (message.userId !== 0)
            writer.tag(3, WireType.Varint).uint64(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AddTeamMemberToSprintRequest
 */
export const AddTeamMemberToSprintRequest = new AddTeamMemberToSprintRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveTeamMemberFromSprintRequest$Type extends MessageType<RemoveTeamMemberFromSprintRequest> {
    constructor() {
        super("RemoveTeamMemberFromSprintRequest", [
            { no: 1, name: "sprintId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "teamId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "userId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveTeamMemberFromSprintRequest>): RemoveTeamMemberFromSprintRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sprintId = 0;
        message.teamId = 0;
        message.userId = 0;
        if (value !== undefined)
            reflectionMergePartial<RemoveTeamMemberFromSprintRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveTeamMemberFromSprintRequest): RemoveTeamMemberFromSprintRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 sprintId */ 1:
                    message.sprintId = reader.uint64().toNumber();
                    break;
                case /* uint64 teamId */ 2:
                    message.teamId = reader.uint64().toNumber();
                    break;
                case /* uint64 userId */ 3:
                    message.userId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveTeamMemberFromSprintRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 sprintId = 1; */
        if (message.sprintId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.sprintId);
        /* uint64 teamId = 2; */
        if (message.teamId !== 0)
            writer.tag(2, WireType.Varint).uint64(message.teamId);
        /* uint64 userId = 3; */
        if (message.userId !== 0)
            writer.tag(3, WireType.Varint).uint64(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RemoveTeamMemberFromSprintRequest
 */
export const RemoveTeamMemberFromSprintRequest = new RemoveTeamMemberFromSprintRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MoveTasksToSprintRequest$Type extends MessageType<MoveTasksToSprintRequest> {
    constructor() {
        super("MoveTasksToSprintRequest", [
            { no: 1, name: "fromSprintId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "toSprintId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "taskIds", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<MoveTasksToSprintRequest>): MoveTasksToSprintRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fromSprintId = 0;
        message.toSprintId = 0;
        message.taskIds = [];
        if (value !== undefined)
            reflectionMergePartial<MoveTasksToSprintRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MoveTasksToSprintRequest): MoveTasksToSprintRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 fromSprintId */ 1:
                    message.fromSprintId = reader.uint64().toNumber();
                    break;
                case /* uint64 toSprintId */ 2:
                    message.toSprintId = reader.uint64().toNumber();
                    break;
                case /* repeated uint64 taskIds */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.taskIds.push(reader.uint64().toNumber());
                    else
                        message.taskIds.push(reader.uint64().toNumber());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MoveTasksToSprintRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 fromSprintId = 1; */
        if (message.fromSprintId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.fromSprintId);
        /* uint64 toSprintId = 2; */
        if (message.toSprintId !== 0)
            writer.tag(2, WireType.Varint).uint64(message.toSprintId);
        /* repeated uint64 taskIds = 3; */
        if (message.taskIds.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.taskIds.length; i++)
                writer.uint64(message.taskIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MoveTasksToSprintRequest
 */
export const MoveTasksToSprintRequest = new MoveTasksToSprintRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CopyTasksToSprintRequest$Type extends MessageType<CopyTasksToSprintRequest> {
    constructor() {
        super("CopyTasksToSprintRequest", [
            { no: 1, name: "toSprintId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "taskIds", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<CopyTasksToSprintRequest>): CopyTasksToSprintRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.toSprintId = 0;
        message.taskIds = [];
        if (value !== undefined)
            reflectionMergePartial<CopyTasksToSprintRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CopyTasksToSprintRequest): CopyTasksToSprintRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 toSprintId */ 1:
                    message.toSprintId = reader.uint64().toNumber();
                    break;
                case /* repeated uint64 taskIds */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.taskIds.push(reader.uint64().toNumber());
                    else
                        message.taskIds.push(reader.uint64().toNumber());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CopyTasksToSprintRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 toSprintId = 1; */
        if (message.toSprintId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.toSprintId);
        /* repeated uint64 taskIds = 2; */
        if (message.taskIds.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.taskIds.length; i++)
                writer.uint64(message.taskIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CopyTasksToSprintRequest
 */
export const CopyTasksToSprintRequest = new CopyTasksToSprintRequest$Type();
/**
 * @generated ServiceType for protobuf service SprintService
 */
export const SprintService = new ServiceType("SprintService", [
    { name: "GetSprint", options: {}, I: GetSprintRequest, O: GetSprintResponse },
    { name: "ListSprints", options: {}, I: ListSprintsRequest, O: ListSprintsResponse },
    { name: "CreateSprint", options: {}, I: CreateSprintRequest, O: CreateSprintResponse },
    { name: "DeleteSprint", options: {}, I: DeleteSprintRequest, O: Empty },
    { name: "GetActiveSprint", options: {}, I: GetActiveSprintRequest, O: GetActiveSprintResponse },
    { name: "AddTaskToSprint", options: {}, I: AddTaskToSprintRequest, O: Empty },
    { name: "RemoveTaskFromSprint", options: {}, I: RemoveTaskToSprintRequest, O: Empty },
    { name: "AddTeamMemberToSprint", options: {}, I: AddTeamMemberToSprintRequest, O: Empty },
    { name: "RemoveTeamMemberFromSprint", options: {}, I: RemoveTeamMemberFromSprintRequest, O: Empty },
    { name: "MoveTasksToSprint", options: {}, I: MoveTasksToSprintRequest, O: Empty },
    { name: "CopyTasksToSprint", options: {}, I: CopyTasksToSprintRequest, O: Empty }
]);
