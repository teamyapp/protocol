// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "teamy/story_service.proto" (syntax proto3)
// tslint:disable
import { Empty } from "../google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { StoryStatus } from "./message/story";
import { Priority } from "./message/priority";
import { Task } from "./message/task";
import { Story } from "./message/story";
/**
 * @generated from protobuf message GetStoryRequest
 */
export interface GetStoryRequest {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: number;
}
/**
 * @generated from protobuf message GetStoryResponse
 */
export interface GetStoryResponse {
    /**
     * @generated from protobuf field: Story story = 1;
     */
    story?: Story;
}
/**
 * @generated from protobuf message GetTasksByStoryRequest
 */
export interface GetTasksByStoryRequest {
    /**
     * @generated from protobuf field: uint64 storyId = 1;
     */
    storyId: number;
}
/**
 * @generated from protobuf message GetTasksByStoryResponse
 */
export interface GetTasksByStoryResponse {
    /**
     * @generated from protobuf field: repeated Task tasks = 1;
     */
    tasks: Task[];
}
/**
 * @generated from protobuf message ListStoriesRequest
 */
export interface ListStoriesRequest {
    /**
     * @generated from protobuf field: optional uint64 projectId = 1;
     */
    projectId?: number;
    /**
     * @generated from protobuf field: optional uint64 phaseId = 2;
     */
    phaseId?: number;
}
/**
 * @generated from protobuf message ListStoriesResponse
 */
export interface ListStoriesResponse {
    /**
     * @generated from protobuf field: repeated Story stories = 1;
     */
    stories: Story[];
}
/**
 * @generated from protobuf message CreateStoryRequest
 */
export interface CreateStoryRequest {
    /**
     * @generated from protobuf field: uint64 projectId = 1;
     */
    projectId: number;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: optional uint64 ownerUserId = 3;
     */
    ownerUserId?: number;
    /**
     * @generated from protobuf field: optional Priority priority = 4;
     */
    priority?: Priority;
    /**
     * @generated from protobuf field: StoryStatus status = 5;
     */
    status: StoryStatus;
}
/**
 * @generated from protobuf message CreateStoryResponse
 */
export interface CreateStoryResponse {
    /**
     * @generated from protobuf field: Story story = 1;
     */
    story?: Story;
}
/**
 * @generated from protobuf message UpdateStoryRequest
 */
export interface UpdateStoryRequest {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: optional string name = 2;
     */
    name?: string;
    /**
     * @generated from protobuf field: optional uint64 ownerUserId = 3;
     */
    ownerUserId?: number;
    /**
     * @generated from protobuf field: optional Priority priority = 4;
     */
    priority?: Priority;
    /**
     * @generated from protobuf field: optional StoryStatus status = 5;
     */
    status?: StoryStatus;
}
/**
 * @generated from protobuf message UpdateStoryResponse
 */
export interface UpdateStoryResponse {
    /**
     * @generated from protobuf field: Story story = 1;
     */
    story?: Story;
}
/**
 * @generated from protobuf message DeleteStoryRequest
 */
export interface DeleteStoryRequest {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: number;
}
/**
 * @generated from protobuf message AddTaskToStoryRequest
 */
export interface AddTaskToStoryRequest {
    /**
     * @generated from protobuf field: uint64 storyId = 1;
     */
    storyId: number;
    /**
     * @generated from protobuf field: uint64 taskId = 2;
     */
    taskId: number;
}
/**
 * @generated from protobuf message RemoveTaskFromStoryRequest
 */
export interface RemoveTaskFromStoryRequest {
    /**
     * @generated from protobuf field: uint64 storyId = 1;
     */
    storyId: number;
    /**
     * @generated from protobuf field: uint64 taskId = 2;
     */
    taskId: number;
}
/**
 * @generated from protobuf message AddTasksToStoryRequest
 */
export interface AddTasksToStoryRequest {
    /**
     * @generated from protobuf field: uint64 storyId = 1;
     */
    storyId: number;
    /**
     * @generated from protobuf field: repeated uint64 taskIds = 2;
     */
    taskIds: number[];
}
/**
 * @generated from protobuf message RemoveTasksFromStoryRequest
 */
export interface RemoveTasksFromStoryRequest {
    /**
     * @generated from protobuf field: uint64 storyId = 1;
     */
    storyId: number;
    /**
     * @generated from protobuf field: repeated uint64 taskIds = 2;
     */
    taskIds: number[];
}
// @generated message type with reflection information, may provide speed optimized methods
class GetStoryRequest$Type extends MessageType<GetStoryRequest> {
    constructor() {
        super("GetStoryRequest", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<GetStoryRequest>): GetStoryRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        if (value !== undefined)
            reflectionMergePartial<GetStoryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetStoryRequest): GetStoryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetStoryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetStoryRequest
 */
export const GetStoryRequest = new GetStoryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetStoryResponse$Type extends MessageType<GetStoryResponse> {
    constructor() {
        super("GetStoryResponse", [
            { no: 1, name: "story", kind: "message", T: () => Story }
        ]);
    }
    create(value?: PartialMessage<GetStoryResponse>): GetStoryResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetStoryResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetStoryResponse): GetStoryResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Story story */ 1:
                    message.story = Story.internalBinaryRead(reader, reader.uint32(), options, message.story);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetStoryResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Story story = 1; */
        if (message.story)
            Story.internalBinaryWrite(message.story, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetStoryResponse
 */
export const GetStoryResponse = new GetStoryResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTasksByStoryRequest$Type extends MessageType<GetTasksByStoryRequest> {
    constructor() {
        super("GetTasksByStoryRequest", [
            { no: 1, name: "storyId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<GetTasksByStoryRequest>): GetTasksByStoryRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.storyId = 0;
        if (value !== undefined)
            reflectionMergePartial<GetTasksByStoryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTasksByStoryRequest): GetTasksByStoryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 storyId */ 1:
                    message.storyId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTasksByStoryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 storyId = 1; */
        if (message.storyId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.storyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetTasksByStoryRequest
 */
export const GetTasksByStoryRequest = new GetTasksByStoryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTasksByStoryResponse$Type extends MessageType<GetTasksByStoryResponse> {
    constructor() {
        super("GetTasksByStoryResponse", [
            { no: 1, name: "tasks", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Task }
        ]);
    }
    create(value?: PartialMessage<GetTasksByStoryResponse>): GetTasksByStoryResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tasks = [];
        if (value !== undefined)
            reflectionMergePartial<GetTasksByStoryResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTasksByStoryResponse): GetTasksByStoryResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Task tasks */ 1:
                    message.tasks.push(Task.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTasksByStoryResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Task tasks = 1; */
        for (let i = 0; i < message.tasks.length; i++)
            Task.internalBinaryWrite(message.tasks[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetTasksByStoryResponse
 */
export const GetTasksByStoryResponse = new GetTasksByStoryResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListStoriesRequest$Type extends MessageType<ListStoriesRequest> {
    constructor() {
        super("ListStoriesRequest", [
            { no: 1, name: "projectId", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "phaseId", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<ListStoriesRequest>): ListStoriesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListStoriesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListStoriesRequest): ListStoriesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 projectId */ 1:
                    message.projectId = reader.uint64().toNumber();
                    break;
                case /* optional uint64 phaseId */ 2:
                    message.phaseId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListStoriesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 projectId = 1; */
        if (message.projectId !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.projectId);
        /* optional uint64 phaseId = 2; */
        if (message.phaseId !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.phaseId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListStoriesRequest
 */
export const ListStoriesRequest = new ListStoriesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListStoriesResponse$Type extends MessageType<ListStoriesResponse> {
    constructor() {
        super("ListStoriesResponse", [
            { no: 1, name: "stories", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Story }
        ]);
    }
    create(value?: PartialMessage<ListStoriesResponse>): ListStoriesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.stories = [];
        if (value !== undefined)
            reflectionMergePartial<ListStoriesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListStoriesResponse): ListStoriesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Story stories */ 1:
                    message.stories.push(Story.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListStoriesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Story stories = 1; */
        for (let i = 0; i < message.stories.length; i++)
            Story.internalBinaryWrite(message.stories[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListStoriesResponse
 */
export const ListStoriesResponse = new ListStoriesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateStoryRequest$Type extends MessageType<CreateStoryRequest> {
    constructor() {
        super("CreateStoryRequest", [
            { no: 1, name: "projectId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "ownerUserId", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "priority", kind: "enum", opt: true, T: () => ["Priority", Priority] },
            { no: 5, name: "status", kind: "enum", T: () => ["StoryStatus", StoryStatus] }
        ]);
    }
    create(value?: PartialMessage<CreateStoryRequest>): CreateStoryRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.projectId = 0;
        message.name = "";
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<CreateStoryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateStoryRequest): CreateStoryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 projectId */ 1:
                    message.projectId = reader.uint64().toNumber();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* optional uint64 ownerUserId */ 3:
                    message.ownerUserId = reader.uint64().toNumber();
                    break;
                case /* optional Priority priority */ 4:
                    message.priority = reader.int32();
                    break;
                case /* StoryStatus status */ 5:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateStoryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 projectId = 1; */
        if (message.projectId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.projectId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* optional uint64 ownerUserId = 3; */
        if (message.ownerUserId !== undefined)
            writer.tag(3, WireType.Varint).uint64(message.ownerUserId);
        /* optional Priority priority = 4; */
        if (message.priority !== undefined)
            writer.tag(4, WireType.Varint).int32(message.priority);
        /* StoryStatus status = 5; */
        if (message.status !== 0)
            writer.tag(5, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateStoryRequest
 */
export const CreateStoryRequest = new CreateStoryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateStoryResponse$Type extends MessageType<CreateStoryResponse> {
    constructor() {
        super("CreateStoryResponse", [
            { no: 1, name: "story", kind: "message", T: () => Story }
        ]);
    }
    create(value?: PartialMessage<CreateStoryResponse>): CreateStoryResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateStoryResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateStoryResponse): CreateStoryResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Story story */ 1:
                    message.story = Story.internalBinaryRead(reader, reader.uint32(), options, message.story);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateStoryResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Story story = 1; */
        if (message.story)
            Story.internalBinaryWrite(message.story, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateStoryResponse
 */
export const CreateStoryResponse = new CreateStoryResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateStoryRequest$Type extends MessageType<UpdateStoryRequest> {
    constructor() {
        super("UpdateStoryRequest", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "ownerUserId", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "priority", kind: "enum", opt: true, T: () => ["Priority", Priority] },
            { no: 5, name: "status", kind: "enum", opt: true, T: () => ["StoryStatus", StoryStatus] }
        ]);
    }
    create(value?: PartialMessage<UpdateStoryRequest>): UpdateStoryRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        if (value !== undefined)
            reflectionMergePartial<UpdateStoryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateStoryRequest): UpdateStoryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toNumber();
                    break;
                case /* optional string name */ 2:
                    message.name = reader.string();
                    break;
                case /* optional uint64 ownerUserId */ 3:
                    message.ownerUserId = reader.uint64().toNumber();
                    break;
                case /* optional Priority priority */ 4:
                    message.priority = reader.int32();
                    break;
                case /* optional StoryStatus status */ 5:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateStoryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* optional string name = 2; */
        if (message.name !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* optional uint64 ownerUserId = 3; */
        if (message.ownerUserId !== undefined)
            writer.tag(3, WireType.Varint).uint64(message.ownerUserId);
        /* optional Priority priority = 4; */
        if (message.priority !== undefined)
            writer.tag(4, WireType.Varint).int32(message.priority);
        /* optional StoryStatus status = 5; */
        if (message.status !== undefined)
            writer.tag(5, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateStoryRequest
 */
export const UpdateStoryRequest = new UpdateStoryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateStoryResponse$Type extends MessageType<UpdateStoryResponse> {
    constructor() {
        super("UpdateStoryResponse", [
            { no: 1, name: "story", kind: "message", T: () => Story }
        ]);
    }
    create(value?: PartialMessage<UpdateStoryResponse>): UpdateStoryResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateStoryResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateStoryResponse): UpdateStoryResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Story story */ 1:
                    message.story = Story.internalBinaryRead(reader, reader.uint32(), options, message.story);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateStoryResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Story story = 1; */
        if (message.story)
            Story.internalBinaryWrite(message.story, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateStoryResponse
 */
export const UpdateStoryResponse = new UpdateStoryResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteStoryRequest$Type extends MessageType<DeleteStoryRequest> {
    constructor() {
        super("DeleteStoryRequest", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteStoryRequest>): DeleteStoryRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        if (value !== undefined)
            reflectionMergePartial<DeleteStoryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteStoryRequest): DeleteStoryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteStoryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteStoryRequest
 */
export const DeleteStoryRequest = new DeleteStoryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddTaskToStoryRequest$Type extends MessageType<AddTaskToStoryRequest> {
    constructor() {
        super("AddTaskToStoryRequest", [
            { no: 1, name: "storyId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "taskId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<AddTaskToStoryRequest>): AddTaskToStoryRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.storyId = 0;
        message.taskId = 0;
        if (value !== undefined)
            reflectionMergePartial<AddTaskToStoryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddTaskToStoryRequest): AddTaskToStoryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 storyId */ 1:
                    message.storyId = reader.uint64().toNumber();
                    break;
                case /* uint64 taskId */ 2:
                    message.taskId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddTaskToStoryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 storyId = 1; */
        if (message.storyId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.storyId);
        /* uint64 taskId = 2; */
        if (message.taskId !== 0)
            writer.tag(2, WireType.Varint).uint64(message.taskId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AddTaskToStoryRequest
 */
export const AddTaskToStoryRequest = new AddTaskToStoryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveTaskFromStoryRequest$Type extends MessageType<RemoveTaskFromStoryRequest> {
    constructor() {
        super("RemoveTaskFromStoryRequest", [
            { no: 1, name: "storyId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "taskId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveTaskFromStoryRequest>): RemoveTaskFromStoryRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.storyId = 0;
        message.taskId = 0;
        if (value !== undefined)
            reflectionMergePartial<RemoveTaskFromStoryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveTaskFromStoryRequest): RemoveTaskFromStoryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 storyId */ 1:
                    message.storyId = reader.uint64().toNumber();
                    break;
                case /* uint64 taskId */ 2:
                    message.taskId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveTaskFromStoryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 storyId = 1; */
        if (message.storyId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.storyId);
        /* uint64 taskId = 2; */
        if (message.taskId !== 0)
            writer.tag(2, WireType.Varint).uint64(message.taskId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RemoveTaskFromStoryRequest
 */
export const RemoveTaskFromStoryRequest = new RemoveTaskFromStoryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddTasksToStoryRequest$Type extends MessageType<AddTasksToStoryRequest> {
    constructor() {
        super("AddTasksToStoryRequest", [
            { no: 1, name: "storyId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "taskIds", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<AddTasksToStoryRequest>): AddTasksToStoryRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.storyId = 0;
        message.taskIds = [];
        if (value !== undefined)
            reflectionMergePartial<AddTasksToStoryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddTasksToStoryRequest): AddTasksToStoryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 storyId */ 1:
                    message.storyId = reader.uint64().toNumber();
                    break;
                case /* repeated uint64 taskIds */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.taskIds.push(reader.uint64().toNumber());
                    else
                        message.taskIds.push(reader.uint64().toNumber());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddTasksToStoryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 storyId = 1; */
        if (message.storyId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.storyId);
        /* repeated uint64 taskIds = 2; */
        if (message.taskIds.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.taskIds.length; i++)
                writer.uint64(message.taskIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AddTasksToStoryRequest
 */
export const AddTasksToStoryRequest = new AddTasksToStoryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveTasksFromStoryRequest$Type extends MessageType<RemoveTasksFromStoryRequest> {
    constructor() {
        super("RemoveTasksFromStoryRequest", [
            { no: 1, name: "storyId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "taskIds", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveTasksFromStoryRequest>): RemoveTasksFromStoryRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.storyId = 0;
        message.taskIds = [];
        if (value !== undefined)
            reflectionMergePartial<RemoveTasksFromStoryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveTasksFromStoryRequest): RemoveTasksFromStoryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 storyId */ 1:
                    message.storyId = reader.uint64().toNumber();
                    break;
                case /* repeated uint64 taskIds */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.taskIds.push(reader.uint64().toNumber());
                    else
                        message.taskIds.push(reader.uint64().toNumber());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveTasksFromStoryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 storyId = 1; */
        if (message.storyId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.storyId);
        /* repeated uint64 taskIds = 2; */
        if (message.taskIds.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.taskIds.length; i++)
                writer.uint64(message.taskIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RemoveTasksFromStoryRequest
 */
export const RemoveTasksFromStoryRequest = new RemoveTasksFromStoryRequest$Type();
/**
 * @generated ServiceType for protobuf service StoryService
 */
export const StoryService = new ServiceType("StoryService", [
    { name: "GetStory", options: {}, I: GetStoryRequest, O: GetStoryResponse },
    { name: "ListStories", options: {}, I: ListStoriesRequest, O: ListStoriesResponse },
    { name: "GetTasksByStory", options: {}, I: GetTasksByStoryRequest, O: GetTasksByStoryResponse },
    { name: "CreateStory", options: {}, I: CreateStoryRequest, O: CreateStoryResponse },
    { name: "UpdateStory", options: {}, I: UpdateStoryRequest, O: UpdateStoryResponse },
    { name: "DeleteStory", options: {}, I: DeleteStoryRequest, O: Empty },
    { name: "AddTaskToStory", options: {}, I: AddTaskToStoryRequest, O: Empty },
    { name: "RemoveTaskFromStory", options: {}, I: RemoveTaskFromStoryRequest, O: Empty },
    { name: "AddTasksToStory", options: {}, I: AddTasksToStoryRequest, O: Empty },
    { name: "RemoveTasksFromStory", options: {}, I: RemoveTasksFromStoryRequest, O: Empty }
]);
