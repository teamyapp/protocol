// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "teamy/user_service.proto" (syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { UserService } from "./user_service";
import type { FinishUserProfileUploadSessionRequest } from "./user_service";
import type { CreateUserProfileUploadSessionResponse } from "./user_service";
import type { CreateUserProfileUploadSessionRequest } from "./user_service";
import type { UpdateUserRequest } from "./user_service";
import type { CreateUserRequest } from "./user_service";
import type { ListUsersResponse } from "./user_service";
import type { ListUsersRequest } from "./user_service";
import type { GetUserRequest } from "./user_service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetUserResponse } from "./user_service";
import type { Empty } from "../google/protobuf/empty";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service UserService
 */
export interface IUserServiceClient {
    /**
     * @generated from protobuf rpc: Me(google.protobuf.Empty) returns (GetUserResponse);
     */
    me(input: Empty, options?: RpcOptions): UnaryCall<Empty, GetUserResponse>;
    /**
     * @generated from protobuf rpc: GetUser(GetUserRequest) returns (GetUserResponse);
     */
    getUser(input: GetUserRequest, options?: RpcOptions): UnaryCall<GetUserRequest, GetUserResponse>;
    /**
     * @generated from protobuf rpc: ListUsers(ListUsersRequest) returns (ListUsersResponse);
     */
    listUsers(input: ListUsersRequest, options?: RpcOptions): UnaryCall<ListUsersRequest, ListUsersResponse>;
    /**
     * @generated from protobuf rpc: CreateUser(CreateUserRequest) returns (google.protobuf.Empty);
     */
    createUser(input: CreateUserRequest, options?: RpcOptions): UnaryCall<CreateUserRequest, Empty>;
    /**
     * @generated from protobuf rpc: UpdateUser(UpdateUserRequest) returns (google.protobuf.Empty);
     */
    updateUser(input: UpdateUserRequest, options?: RpcOptions): UnaryCall<UpdateUserRequest, Empty>;
    /**
     * @generated from protobuf rpc: CreateUserProfileUploadSession(CreateUserProfileUploadSessionRequest) returns (CreateUserProfileUploadSessionResponse);
     */
    createUserProfileUploadSession(input: CreateUserProfileUploadSessionRequest, options?: RpcOptions): UnaryCall<CreateUserProfileUploadSessionRequest, CreateUserProfileUploadSessionResponse>;
    /**
     * @generated from protobuf rpc: FinishUserProfileUploadSession(FinishUserProfileUploadSessionRequest) returns (google.protobuf.Empty);
     */
    finishUserProfileUploadSession(input: FinishUserProfileUploadSessionRequest, options?: RpcOptions): UnaryCall<FinishUserProfileUploadSessionRequest, Empty>;
}
/**
 * @generated from protobuf service UserService
 */
export class UserServiceClient implements IUserServiceClient, ServiceInfo {
    typeName = UserService.typeName;
    methods = UserService.methods;
    options = UserService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Me(google.protobuf.Empty) returns (GetUserResponse);
     */
    me(input: Empty, options?: RpcOptions): UnaryCall<Empty, GetUserResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, GetUserResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetUser(GetUserRequest) returns (GetUserResponse);
     */
    getUser(input: GetUserRequest, options?: RpcOptions): UnaryCall<GetUserRequest, GetUserResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetUserRequest, GetUserResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListUsers(ListUsersRequest) returns (ListUsersResponse);
     */
    listUsers(input: ListUsersRequest, options?: RpcOptions): UnaryCall<ListUsersRequest, ListUsersResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListUsersRequest, ListUsersResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateUser(CreateUserRequest) returns (google.protobuf.Empty);
     */
    createUser(input: CreateUserRequest, options?: RpcOptions): UnaryCall<CreateUserRequest, Empty> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateUserRequest, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateUser(UpdateUserRequest) returns (google.protobuf.Empty);
     */
    updateUser(input: UpdateUserRequest, options?: RpcOptions): UnaryCall<UpdateUserRequest, Empty> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateUserRequest, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateUserProfileUploadSession(CreateUserProfileUploadSessionRequest) returns (CreateUserProfileUploadSessionResponse);
     */
    createUserProfileUploadSession(input: CreateUserProfileUploadSessionRequest, options?: RpcOptions): UnaryCall<CreateUserProfileUploadSessionRequest, CreateUserProfileUploadSessionResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateUserProfileUploadSessionRequest, CreateUserProfileUploadSessionResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: FinishUserProfileUploadSession(FinishUserProfileUploadSessionRequest) returns (google.protobuf.Empty);
     */
    finishUserProfileUploadSession(input: FinishUserProfileUploadSessionRequest, options?: RpcOptions): UnaryCall<FinishUserProfileUploadSessionRequest, Empty> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<FinishUserProfileUploadSessionRequest, Empty>("unary", this._transport, method, opt, input);
    }
}
