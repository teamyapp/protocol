// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "teamy/task_link.proto" (syntax proto3)
// tslint:disable
import { Empty } from "../google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message CreateTaskLinkRequest
 */
export interface CreateTaskLinkRequest {
    /**
     * @generated from protobuf field: uint64 taskId = 1;
     */
    taskId: number;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: string url = 3;
     */
    url: string;
    /**
     * @generated from protobuf field: optional string iconUrl = 4;
     */
    iconUrl?: string;
    /**
     * @generated from protobuf field: optional string iconHoverUrl = 5;
     */
    iconHoverUrl?: string;
    /**
     * @generated from protobuf field: string preview_title = 6;
     */
    previewTitle: string;
}
/**
 * @generated from protobuf message CreateTaskLinkResponse
 */
export interface CreateTaskLinkResponse {
    /**
     * @generated from protobuf field: uint64 linkId = 1;
     */
    linkId: number;
}
/**
 * @generated from protobuf message DeleteTaskLinkRequest
 */
export interface DeleteTaskLinkRequest {
    /**
     * @generated from protobuf field: uint64 linkId = 1;
     */
    linkId: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class CreateTaskLinkRequest$Type extends MessageType<CreateTaskLinkRequest> {
    constructor() {
        super("CreateTaskLinkRequest", [
            { no: 1, name: "taskId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "iconUrl", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "iconHoverUrl", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "preview_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateTaskLinkRequest>): CreateTaskLinkRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.taskId = 0;
        message.title = "";
        message.url = "";
        message.previewTitle = "";
        if (value !== undefined)
            reflectionMergePartial<CreateTaskLinkRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateTaskLinkRequest): CreateTaskLinkRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 taskId */ 1:
                    message.taskId = reader.uint64().toNumber();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string url */ 3:
                    message.url = reader.string();
                    break;
                case /* optional string iconUrl */ 4:
                    message.iconUrl = reader.string();
                    break;
                case /* optional string iconHoverUrl */ 5:
                    message.iconHoverUrl = reader.string();
                    break;
                case /* string preview_title */ 6:
                    message.previewTitle = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateTaskLinkRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 taskId = 1; */
        if (message.taskId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.taskId);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string url = 3; */
        if (message.url !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.url);
        /* optional string iconUrl = 4; */
        if (message.iconUrl !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.iconUrl);
        /* optional string iconHoverUrl = 5; */
        if (message.iconHoverUrl !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.iconHoverUrl);
        /* string preview_title = 6; */
        if (message.previewTitle !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.previewTitle);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateTaskLinkRequest
 */
export const CreateTaskLinkRequest = new CreateTaskLinkRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateTaskLinkResponse$Type extends MessageType<CreateTaskLinkResponse> {
    constructor() {
        super("CreateTaskLinkResponse", [
            { no: 1, name: "linkId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<CreateTaskLinkResponse>): CreateTaskLinkResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.linkId = 0;
        if (value !== undefined)
            reflectionMergePartial<CreateTaskLinkResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateTaskLinkResponse): CreateTaskLinkResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 linkId */ 1:
                    message.linkId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateTaskLinkResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 linkId = 1; */
        if (message.linkId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.linkId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateTaskLinkResponse
 */
export const CreateTaskLinkResponse = new CreateTaskLinkResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteTaskLinkRequest$Type extends MessageType<DeleteTaskLinkRequest> {
    constructor() {
        super("DeleteTaskLinkRequest", [
            { no: 1, name: "linkId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteTaskLinkRequest>): DeleteTaskLinkRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.linkId = 0;
        if (value !== undefined)
            reflectionMergePartial<DeleteTaskLinkRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteTaskLinkRequest): DeleteTaskLinkRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 linkId */ 1:
                    message.linkId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteTaskLinkRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 linkId = 1; */
        if (message.linkId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.linkId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteTaskLinkRequest
 */
export const DeleteTaskLinkRequest = new DeleteTaskLinkRequest$Type();
/**
 * @generated ServiceType for protobuf service TaskLink
 */
export const TaskLink = new ServiceType("TaskLink", [
    { name: "CreateTaskLink", options: {}, I: CreateTaskLinkRequest, O: CreateTaskLinkResponse },
    { name: "DeleteTaskLink", options: {}, I: DeleteTaskLinkRequest, O: Empty }
]);
