// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "teamy/group_service.proto" (syntax proto3)
// tslint:disable
import { Empty } from "../google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { GroupType } from "./message/group";
import { FilterGroup } from "./message/group";
import { GroupMemberType } from "./message/group";
import { TeamStaticGroup } from "./message/group";
import { UserStaticGroup } from "./message/group";
import { Group } from "./message/group";
/**
 * @generated from protobuf message GetGroupRequest
 */
export interface GetGroupRequest {
    /**
     * @generated from protobuf field: uint64 groupId = 1;
     */
    groupId: number;
}
/**
 * @generated from protobuf message GetGroupResponse
 */
export interface GetGroupResponse {
    /**
     * @generated from protobuf field: Group group = 1;
     */
    group?: Group;
}
/**
 * @generated from protobuf message ListGroupsRequest
 */
export interface ListGroupsRequest {
    /**
     * @generated from protobuf field: repeated uint64 groupIds = 1;
     */
    groupIds: number[];
}
/**
 * @generated from protobuf message ListGroupsResponse
 */
export interface ListGroupsResponse {
    /**
     * @generated from protobuf field: repeated Group groups = 1;
     */
    groups: Group[];
}
/**
 * @generated from protobuf message CreateStaticUserGroupRequest
 */
export interface CreateStaticUserGroupRequest {
    /**
     * @generated from protobuf field: uint64 appId = 1;
     */
    appId: number;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: repeated uint64 userIds = 3;
     */
    userIds: number[];
    /**
     * @generated from protobuf field: repeated uint64 rolloutIds = 4;
     */
    rolloutIds: number[];
}
/**
 * @generated from protobuf message CreateStaticUserGroupResponse
 */
export interface CreateStaticUserGroupResponse {
    /**
     * @generated from protobuf field: UserStaticGroup userStaticGroup = 1;
     */
    userStaticGroup?: UserStaticGroup;
}
/**
 * @generated from protobuf message CreateStaticTeamGroupRequest
 */
export interface CreateStaticTeamGroupRequest {
    /**
     * @generated from protobuf field: uint64 appId = 1;
     */
    appId: number;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: repeated uint64 teamIds = 3;
     */
    teamIds: number[];
    /**
     * @generated from protobuf field: repeated uint64 rolloutIds = 4;
     */
    rolloutIds: number[];
}
/**
 * @generated from protobuf message CreateStaticTeamGroupResponse
 */
export interface CreateStaticTeamGroupResponse {
    /**
     * @generated from protobuf field: TeamStaticGroup teamStaticGroup = 1;
     */
    teamStaticGroup?: TeamStaticGroup;
}
/**
 * @generated from protobuf message CreateFilterGroupRequest
 */
export interface CreateFilterGroupRequest {
    /**
     * @generated from protobuf field: uint64 appId = 1;
     */
    appId: number;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string filter = 3;
     */
    filter: string;
    /**
     * @generated from protobuf field: GroupMemberType memberType = 4;
     */
    memberType: GroupMemberType;
    /**
     * @generated from protobuf field: repeated uint64 rolloutIds = 5;
     */
    rolloutIds: number[];
}
/**
 * @generated from protobuf message CreateFilterGroupResponse
 */
export interface CreateFilterGroupResponse {
    /**
     * @generated from protobuf field: FilterGroup filterGroup = 1;
     */
    filterGroup?: FilterGroup;
}
/**
 * @generated from protobuf message UpdateGroupRequest
 */
export interface UpdateGroupRequest {
    /**
     * @generated from protobuf field: uint64 appId = 1;
     */
    appId: number;
    /**
     * @generated from protobuf field: uint64 groupId = 2;
     */
    groupId: number;
    /**
     * @generated from protobuf field: optional string name = 3;
     */
    name?: string;
    /**
     * @generated from protobuf field: GroupType type = 4;
     */
    type: GroupType;
    /**
     * @generated from protobuf field: GroupMemberType memberType = 5;
     */
    memberType: GroupMemberType;
    /**
     * @generated from protobuf field: repeated uint64 memberIds = 6;
     */
    memberIds: number[];
    /**
     * @generated from protobuf field: optional string filter = 7;
     */
    filter?: string;
}
/**
 * @generated from protobuf message UpdateGroupResponse
 */
export interface UpdateGroupResponse {
    /**
     * @generated from protobuf field: Group group = 1;
     */
    group?: Group;
}
/**
 * @generated from protobuf message DeleteGroupRequest
 */
export interface DeleteGroupRequest {
    /**
     * @generated from protobuf field: uint64 groupId = 1;
     */
    groupId: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetGroupRequest$Type extends MessageType<GetGroupRequest> {
    constructor() {
        super("GetGroupRequest", [
            { no: 1, name: "groupId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<GetGroupRequest>): GetGroupRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupId = 0;
        if (value !== undefined)
            reflectionMergePartial<GetGroupRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGroupRequest): GetGroupRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 groupId */ 1:
                    message.groupId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetGroupRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 groupId = 1; */
        if (message.groupId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.groupId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetGroupRequest
 */
export const GetGroupRequest = new GetGroupRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGroupResponse$Type extends MessageType<GetGroupResponse> {
    constructor() {
        super("GetGroupResponse", [
            { no: 1, name: "group", kind: "message", T: () => Group }
        ]);
    }
    create(value?: PartialMessage<GetGroupResponse>): GetGroupResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetGroupResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGroupResponse): GetGroupResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Group group */ 1:
                    message.group = Group.internalBinaryRead(reader, reader.uint32(), options, message.group);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetGroupResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Group group = 1; */
        if (message.group)
            Group.internalBinaryWrite(message.group, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetGroupResponse
 */
export const GetGroupResponse = new GetGroupResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListGroupsRequest$Type extends MessageType<ListGroupsRequest> {
    constructor() {
        super("ListGroupsRequest", [
            { no: 1, name: "groupIds", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<ListGroupsRequest>): ListGroupsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupIds = [];
        if (value !== undefined)
            reflectionMergePartial<ListGroupsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListGroupsRequest): ListGroupsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint64 groupIds */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.groupIds.push(reader.uint64().toNumber());
                    else
                        message.groupIds.push(reader.uint64().toNumber());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListGroupsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint64 groupIds = 1; */
        if (message.groupIds.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.groupIds.length; i++)
                writer.uint64(message.groupIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListGroupsRequest
 */
export const ListGroupsRequest = new ListGroupsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListGroupsResponse$Type extends MessageType<ListGroupsResponse> {
    constructor() {
        super("ListGroupsResponse", [
            { no: 1, name: "groups", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Group }
        ]);
    }
    create(value?: PartialMessage<ListGroupsResponse>): ListGroupsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groups = [];
        if (value !== undefined)
            reflectionMergePartial<ListGroupsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListGroupsResponse): ListGroupsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Group groups */ 1:
                    message.groups.push(Group.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListGroupsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Group groups = 1; */
        for (let i = 0; i < message.groups.length; i++)
            Group.internalBinaryWrite(message.groups[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListGroupsResponse
 */
export const ListGroupsResponse = new ListGroupsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateStaticUserGroupRequest$Type extends MessageType<CreateStaticUserGroupRequest> {
    constructor() {
        super("CreateStaticUserGroupRequest", [
            { no: 1, name: "appId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "userIds", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "rolloutIds", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<CreateStaticUserGroupRequest>): CreateStaticUserGroupRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.appId = 0;
        message.name = "";
        message.userIds = [];
        message.rolloutIds = [];
        if (value !== undefined)
            reflectionMergePartial<CreateStaticUserGroupRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateStaticUserGroupRequest): CreateStaticUserGroupRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 appId */ 1:
                    message.appId = reader.uint64().toNumber();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* repeated uint64 userIds */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.userIds.push(reader.uint64().toNumber());
                    else
                        message.userIds.push(reader.uint64().toNumber());
                    break;
                case /* repeated uint64 rolloutIds */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.rolloutIds.push(reader.uint64().toNumber());
                    else
                        message.rolloutIds.push(reader.uint64().toNumber());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateStaticUserGroupRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 appId = 1; */
        if (message.appId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.appId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* repeated uint64 userIds = 3; */
        if (message.userIds.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.userIds.length; i++)
                writer.uint64(message.userIds[i]);
            writer.join();
        }
        /* repeated uint64 rolloutIds = 4; */
        if (message.rolloutIds.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.rolloutIds.length; i++)
                writer.uint64(message.rolloutIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateStaticUserGroupRequest
 */
export const CreateStaticUserGroupRequest = new CreateStaticUserGroupRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateStaticUserGroupResponse$Type extends MessageType<CreateStaticUserGroupResponse> {
    constructor() {
        super("CreateStaticUserGroupResponse", [
            { no: 1, name: "userStaticGroup", kind: "message", T: () => UserStaticGroup }
        ]);
    }
    create(value?: PartialMessage<CreateStaticUserGroupResponse>): CreateStaticUserGroupResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateStaticUserGroupResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateStaticUserGroupResponse): CreateStaticUserGroupResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* UserStaticGroup userStaticGroup */ 1:
                    message.userStaticGroup = UserStaticGroup.internalBinaryRead(reader, reader.uint32(), options, message.userStaticGroup);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateStaticUserGroupResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* UserStaticGroup userStaticGroup = 1; */
        if (message.userStaticGroup)
            UserStaticGroup.internalBinaryWrite(message.userStaticGroup, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateStaticUserGroupResponse
 */
export const CreateStaticUserGroupResponse = new CreateStaticUserGroupResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateStaticTeamGroupRequest$Type extends MessageType<CreateStaticTeamGroupRequest> {
    constructor() {
        super("CreateStaticTeamGroupRequest", [
            { no: 1, name: "appId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "teamIds", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "rolloutIds", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<CreateStaticTeamGroupRequest>): CreateStaticTeamGroupRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.appId = 0;
        message.name = "";
        message.teamIds = [];
        message.rolloutIds = [];
        if (value !== undefined)
            reflectionMergePartial<CreateStaticTeamGroupRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateStaticTeamGroupRequest): CreateStaticTeamGroupRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 appId */ 1:
                    message.appId = reader.uint64().toNumber();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* repeated uint64 teamIds */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.teamIds.push(reader.uint64().toNumber());
                    else
                        message.teamIds.push(reader.uint64().toNumber());
                    break;
                case /* repeated uint64 rolloutIds */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.rolloutIds.push(reader.uint64().toNumber());
                    else
                        message.rolloutIds.push(reader.uint64().toNumber());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateStaticTeamGroupRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 appId = 1; */
        if (message.appId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.appId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* repeated uint64 teamIds = 3; */
        if (message.teamIds.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.teamIds.length; i++)
                writer.uint64(message.teamIds[i]);
            writer.join();
        }
        /* repeated uint64 rolloutIds = 4; */
        if (message.rolloutIds.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.rolloutIds.length; i++)
                writer.uint64(message.rolloutIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateStaticTeamGroupRequest
 */
export const CreateStaticTeamGroupRequest = new CreateStaticTeamGroupRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateStaticTeamGroupResponse$Type extends MessageType<CreateStaticTeamGroupResponse> {
    constructor() {
        super("CreateStaticTeamGroupResponse", [
            { no: 1, name: "teamStaticGroup", kind: "message", T: () => TeamStaticGroup }
        ]);
    }
    create(value?: PartialMessage<CreateStaticTeamGroupResponse>): CreateStaticTeamGroupResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateStaticTeamGroupResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateStaticTeamGroupResponse): CreateStaticTeamGroupResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* TeamStaticGroup teamStaticGroup */ 1:
                    message.teamStaticGroup = TeamStaticGroup.internalBinaryRead(reader, reader.uint32(), options, message.teamStaticGroup);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateStaticTeamGroupResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* TeamStaticGroup teamStaticGroup = 1; */
        if (message.teamStaticGroup)
            TeamStaticGroup.internalBinaryWrite(message.teamStaticGroup, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateStaticTeamGroupResponse
 */
export const CreateStaticTeamGroupResponse = new CreateStaticTeamGroupResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateFilterGroupRequest$Type extends MessageType<CreateFilterGroupRequest> {
    constructor() {
        super("CreateFilterGroupRequest", [
            { no: 1, name: "appId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "filter", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "memberType", kind: "enum", T: () => ["GroupMemberType", GroupMemberType] },
            { no: 5, name: "rolloutIds", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<CreateFilterGroupRequest>): CreateFilterGroupRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.appId = 0;
        message.name = "";
        message.filter = "";
        message.memberType = 0;
        message.rolloutIds = [];
        if (value !== undefined)
            reflectionMergePartial<CreateFilterGroupRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateFilterGroupRequest): CreateFilterGroupRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 appId */ 1:
                    message.appId = reader.uint64().toNumber();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string filter */ 3:
                    message.filter = reader.string();
                    break;
                case /* GroupMemberType memberType */ 4:
                    message.memberType = reader.int32();
                    break;
                case /* repeated uint64 rolloutIds */ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.rolloutIds.push(reader.uint64().toNumber());
                    else
                        message.rolloutIds.push(reader.uint64().toNumber());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateFilterGroupRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 appId = 1; */
        if (message.appId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.appId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string filter = 3; */
        if (message.filter !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.filter);
        /* GroupMemberType memberType = 4; */
        if (message.memberType !== 0)
            writer.tag(4, WireType.Varint).int32(message.memberType);
        /* repeated uint64 rolloutIds = 5; */
        if (message.rolloutIds.length) {
            writer.tag(5, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.rolloutIds.length; i++)
                writer.uint64(message.rolloutIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateFilterGroupRequest
 */
export const CreateFilterGroupRequest = new CreateFilterGroupRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateFilterGroupResponse$Type extends MessageType<CreateFilterGroupResponse> {
    constructor() {
        super("CreateFilterGroupResponse", [
            { no: 1, name: "filterGroup", kind: "message", T: () => FilterGroup }
        ]);
    }
    create(value?: PartialMessage<CreateFilterGroupResponse>): CreateFilterGroupResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateFilterGroupResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateFilterGroupResponse): CreateFilterGroupResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* FilterGroup filterGroup */ 1:
                    message.filterGroup = FilterGroup.internalBinaryRead(reader, reader.uint32(), options, message.filterGroup);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateFilterGroupResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* FilterGroup filterGroup = 1; */
        if (message.filterGroup)
            FilterGroup.internalBinaryWrite(message.filterGroup, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateFilterGroupResponse
 */
export const CreateFilterGroupResponse = new CreateFilterGroupResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateGroupRequest$Type extends MessageType<UpdateGroupRequest> {
    constructor() {
        super("UpdateGroupRequest", [
            { no: 1, name: "appId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "groupId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "type", kind: "enum", T: () => ["GroupType", GroupType] },
            { no: 5, name: "memberType", kind: "enum", T: () => ["GroupMemberType", GroupMemberType] },
            { no: 6, name: "memberIds", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 7, name: "filter", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateGroupRequest>): UpdateGroupRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.appId = 0;
        message.groupId = 0;
        message.type = 0;
        message.memberType = 0;
        message.memberIds = [];
        if (value !== undefined)
            reflectionMergePartial<UpdateGroupRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateGroupRequest): UpdateGroupRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 appId */ 1:
                    message.appId = reader.uint64().toNumber();
                    break;
                case /* uint64 groupId */ 2:
                    message.groupId = reader.uint64().toNumber();
                    break;
                case /* optional string name */ 3:
                    message.name = reader.string();
                    break;
                case /* GroupType type */ 4:
                    message.type = reader.int32();
                    break;
                case /* GroupMemberType memberType */ 5:
                    message.memberType = reader.int32();
                    break;
                case /* repeated uint64 memberIds */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.memberIds.push(reader.uint64().toNumber());
                    else
                        message.memberIds.push(reader.uint64().toNumber());
                    break;
                case /* optional string filter */ 7:
                    message.filter = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateGroupRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 appId = 1; */
        if (message.appId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.appId);
        /* uint64 groupId = 2; */
        if (message.groupId !== 0)
            writer.tag(2, WireType.Varint).uint64(message.groupId);
        /* optional string name = 3; */
        if (message.name !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* GroupType type = 4; */
        if (message.type !== 0)
            writer.tag(4, WireType.Varint).int32(message.type);
        /* GroupMemberType memberType = 5; */
        if (message.memberType !== 0)
            writer.tag(5, WireType.Varint).int32(message.memberType);
        /* repeated uint64 memberIds = 6; */
        if (message.memberIds.length) {
            writer.tag(6, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.memberIds.length; i++)
                writer.uint64(message.memberIds[i]);
            writer.join();
        }
        /* optional string filter = 7; */
        if (message.filter !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.filter);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateGroupRequest
 */
export const UpdateGroupRequest = new UpdateGroupRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateGroupResponse$Type extends MessageType<UpdateGroupResponse> {
    constructor() {
        super("UpdateGroupResponse", [
            { no: 1, name: "group", kind: "message", T: () => Group }
        ]);
    }
    create(value?: PartialMessage<UpdateGroupResponse>): UpdateGroupResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateGroupResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateGroupResponse): UpdateGroupResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Group group */ 1:
                    message.group = Group.internalBinaryRead(reader, reader.uint32(), options, message.group);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateGroupResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Group group = 1; */
        if (message.group)
            Group.internalBinaryWrite(message.group, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateGroupResponse
 */
export const UpdateGroupResponse = new UpdateGroupResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteGroupRequest$Type extends MessageType<DeleteGroupRequest> {
    constructor() {
        super("DeleteGroupRequest", [
            { no: 1, name: "groupId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteGroupRequest>): DeleteGroupRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupId = 0;
        if (value !== undefined)
            reflectionMergePartial<DeleteGroupRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteGroupRequest): DeleteGroupRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 groupId */ 1:
                    message.groupId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteGroupRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 groupId = 1; */
        if (message.groupId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.groupId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteGroupRequest
 */
export const DeleteGroupRequest = new DeleteGroupRequest$Type();
/**
 * @generated ServiceType for protobuf service GroupSerivce
 */
export const GroupSerivce = new ServiceType("GroupSerivce", [
    { name: "GetGroup", options: {}, I: GetGroupRequest, O: GetGroupResponse },
    { name: "ListGroups", options: {}, I: ListGroupsRequest, O: ListGroupsResponse },
    { name: "CreateStaticUserGroup", options: {}, I: CreateStaticUserGroupRequest, O: CreateStaticUserGroupResponse },
    { name: "CreateStaticTeamGroup", options: {}, I: CreateStaticTeamGroupRequest, O: CreateStaticTeamGroupResponse },
    { name: "CreateFilterGroup", options: {}, I: CreateFilterGroupRequest, O: CreateFilterGroupResponse },
    { name: "UpdateGroup", options: {}, I: UpdateGroupRequest, O: UpdateGroupResponse },
    { name: "DeleteGroup", options: {}, I: DeleteGroupRequest, O: Empty }
]);
