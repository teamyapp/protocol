// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "teamy/message/task_activity.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message TaskActivity
 */
export interface TaskActivity {
    /**
     * @generated from protobuf field: uint64 taskId = 1;
     */
    taskId: number;
    /**
     * @generated from protobuf field: TaskActivity.DragTaskActivity dragTaskActivity = 2;
     */
    dragTaskActivity?: TaskActivity_DragTaskActivity;
}
/**
 * @generated from protobuf message TaskActivity.DragTaskActivity
 */
export interface TaskActivity_DragTaskActivity {
    /**
     * @generated from protobuf field: bool isDragging = 1;
     */
    isDragging: boolean;
    /**
     * @generated from protobuf field: TaskActivity.Client client = 2;
     */
    client?: TaskActivity_Client;
}
/**
 * @generated from protobuf message TaskActivity.Client
 */
export interface TaskActivity_Client {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: uint64 userId = 2;
     */
    userId: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class TaskActivity$Type extends MessageType<TaskActivity> {
    constructor() {
        super("TaskActivity", [
            { no: 1, name: "taskId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "dragTaskActivity", kind: "message", T: () => TaskActivity_DragTaskActivity }
        ]);
    }
    create(value?: PartialMessage<TaskActivity>): TaskActivity {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.taskId = 0;
        if (value !== undefined)
            reflectionMergePartial<TaskActivity>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TaskActivity): TaskActivity {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 taskId */ 1:
                    message.taskId = reader.uint64().toNumber();
                    break;
                case /* TaskActivity.DragTaskActivity dragTaskActivity */ 2:
                    message.dragTaskActivity = TaskActivity_DragTaskActivity.internalBinaryRead(reader, reader.uint32(), options, message.dragTaskActivity);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TaskActivity, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 taskId = 1; */
        if (message.taskId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.taskId);
        /* TaskActivity.DragTaskActivity dragTaskActivity = 2; */
        if (message.dragTaskActivity)
            TaskActivity_DragTaskActivity.internalBinaryWrite(message.dragTaskActivity, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TaskActivity
 */
export const TaskActivity = new TaskActivity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TaskActivity_DragTaskActivity$Type extends MessageType<TaskActivity_DragTaskActivity> {
    constructor() {
        super("TaskActivity.DragTaskActivity", [
            { no: 1, name: "isDragging", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "client", kind: "message", T: () => TaskActivity_Client }
        ]);
    }
    create(value?: PartialMessage<TaskActivity_DragTaskActivity>): TaskActivity_DragTaskActivity {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.isDragging = false;
        if (value !== undefined)
            reflectionMergePartial<TaskActivity_DragTaskActivity>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TaskActivity_DragTaskActivity): TaskActivity_DragTaskActivity {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool isDragging */ 1:
                    message.isDragging = reader.bool();
                    break;
                case /* TaskActivity.Client client */ 2:
                    message.client = TaskActivity_Client.internalBinaryRead(reader, reader.uint32(), options, message.client);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TaskActivity_DragTaskActivity, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool isDragging = 1; */
        if (message.isDragging !== false)
            writer.tag(1, WireType.Varint).bool(message.isDragging);
        /* TaskActivity.Client client = 2; */
        if (message.client)
            TaskActivity_Client.internalBinaryWrite(message.client, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TaskActivity.DragTaskActivity
 */
export const TaskActivity_DragTaskActivity = new TaskActivity_DragTaskActivity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TaskActivity_Client$Type extends MessageType<TaskActivity_Client> {
    constructor() {
        super("TaskActivity.Client", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "userId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<TaskActivity_Client>): TaskActivity_Client {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.userId = 0;
        if (value !== undefined)
            reflectionMergePartial<TaskActivity_Client>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TaskActivity_Client): TaskActivity_Client {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toNumber();
                    break;
                case /* uint64 userId */ 2:
                    message.userId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TaskActivity_Client, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* uint64 userId = 2; */
        if (message.userId !== 0)
            writer.tag(2, WireType.Varint).uint64(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TaskActivity.Client
 */
export const TaskActivity_Client = new TaskActivity_Client$Type();
