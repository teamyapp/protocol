// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "teamy/message/money.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message Money
 */
export interface Money {
    /**
     * @generated from protobuf field: Currency currency = 1;
     */
    currency: Currency;
    /**
     * @generated from protobuf field: int32 amount = 2;
     */
    amount: number;
}
/**
 * @generated from protobuf enum Currency
 */
export enum Currency {
    /**
     * @generated from protobuf enum value: USD = 0;
     */
    USD = 0
}
// @generated message type with reflection information, may provide speed optimized methods
class Money$Type extends MessageType<Money> {
    constructor() {
        super("Money", [
            { no: 1, name: "currency", kind: "enum", T: () => ["Currency", Currency] },
            { no: 2, name: "amount", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Money>): Money {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.currency = 0;
        message.amount = 0;
        if (value !== undefined)
            reflectionMergePartial<Money>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Money): Money {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Currency currency */ 1:
                    message.currency = reader.int32();
                    break;
                case /* int32 amount */ 2:
                    message.amount = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Money, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Currency currency = 1; */
        if (message.currency !== 0)
            writer.tag(1, WireType.Varint).int32(message.currency);
        /* int32 amount = 2; */
        if (message.amount !== 0)
            writer.tag(2, WireType.Varint).int32(message.amount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Money
 */
export const Money = new Money$Type();
