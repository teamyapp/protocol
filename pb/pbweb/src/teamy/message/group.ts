// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "teamy/message/group.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../../google/protobuf/timestamp";
/**
 * @generated from protobuf message GroupBase
 */
export interface GroupBase {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: bool locked = 2;
     */
    locked: boolean;
    /**
     * @generated from protobuf field: int32 maxRolloutIndex = 3;
     */
    maxRolloutIndex: number;
    /**
     * @generated from protobuf field: string name = 4;
     */
    name: string;
    /**
     * @generated from protobuf field: GroupType type = 5;
     */
    type: GroupType;
    /**
     * @generated from protobuf field: GroupMemberType memberType = 6;
     */
    memberType: GroupMemberType;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp createdAt = 7;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: optional google.protobuf.Timestamp updatedAt = 8;
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: repeated GroupRolloutRelation groupRolloutRelations = 9;
     */
    groupRolloutRelations: GroupRolloutRelation[];
    /**
     * @generated from protobuf field: repeated uint64 appIds = 10;
     */
    appIds: number[];
}
/**
 * @generated from protobuf message GroupRolloutRelation
 */
export interface GroupRolloutRelation {
    /**
     * @generated from protobuf field: uint64 groupId = 1;
     */
    groupId: number;
    /**
     * @generated from protobuf field: uint64 rolloutId = 2;
     */
    rolloutId: number;
    /**
     * @generated from protobuf field: int32 orderIndex = 3;
     */
    orderIndex: number;
}
/**
 * @generated from protobuf message UserStaticGroup
 */
export interface UserStaticGroup {
    /**
     * @generated from protobuf field: GroupBase base = 1;
     */
    base?: GroupBase;
    /**
     * @generated from protobuf field: repeated uint64 userIds = 2;
     */
    userIds: number[];
}
/**
 * @generated from protobuf message TeamStaticGroup
 */
export interface TeamStaticGroup {
    /**
     * @generated from protobuf field: GroupBase base = 1;
     */
    base?: GroupBase;
    /**
     * @generated from protobuf field: repeated uint64 teamIds = 2;
     */
    teamIds: number[];
}
/**
 * @generated from protobuf message FilterGroup
 */
export interface FilterGroup {
    /**
     * @generated from protobuf field: GroupBase base = 1;
     */
    base?: GroupBase;
    /**
     * @generated from protobuf field: string filter = 2;
     */
    filter: string;
}
/**
 * @generated from protobuf message Group
 */
export interface Group {
    /**
     * @generated from protobuf field: GroupType type = 1;
     */
    type: GroupType;
    /**
     * @generated from protobuf field: GroupMemberType memberType = 2;
     */
    memberType: GroupMemberType;
    /**
     * @generated from protobuf field: UserStaticGroup userStaticGroup = 3;
     */
    userStaticGroup?: UserStaticGroup;
    /**
     * @generated from protobuf field: TeamStaticGroup teamStaticGroup = 4;
     */
    teamStaticGroup?: TeamStaticGroup;
    /**
     * @generated from protobuf field: FilterGroup filterGroup = 5;
     */
    filterGroup?: FilterGroup;
}
/**
 * @generated from protobuf enum GroupType
 */
export enum GroupType {
    /**
     * @generated from protobuf enum value: GROUP_TYPE_STATIC = 0;
     */
    STATIC = 0,
    /**
     * @generated from protobuf enum value: GROUP_TYPE_FILTER = 1;
     */
    FILTER = 1
}
/**
 * @generated from protobuf enum GroupMemberType
 */
export enum GroupMemberType {
    /**
     * @generated from protobuf enum value: GROUP_MEMBER_TYPE_USER = 0;
     */
    USER = 0,
    /**
     * @generated from protobuf enum value: GROUP_MEMBER_TYPE_TEAM = 1;
     */
    TEAM = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class GroupBase$Type extends MessageType<GroupBase> {
    constructor() {
        super("GroupBase", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "locked", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "maxRolloutIndex", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "type", kind: "enum", T: () => ["GroupType", GroupType, "GROUP_TYPE_"] },
            { no: 6, name: "memberType", kind: "enum", T: () => ["GroupMemberType", GroupMemberType, "GROUP_MEMBER_TYPE_"] },
            { no: 7, name: "createdAt", kind: "message", T: () => Timestamp },
            { no: 8, name: "updatedAt", kind: "message", T: () => Timestamp },
            { no: 9, name: "groupRolloutRelations", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GroupRolloutRelation },
            { no: 10, name: "appIds", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<GroupBase>): GroupBase {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.locked = false;
        message.maxRolloutIndex = 0;
        message.name = "";
        message.type = 0;
        message.memberType = 0;
        message.groupRolloutRelations = [];
        message.appIds = [];
        if (value !== undefined)
            reflectionMergePartial<GroupBase>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupBase): GroupBase {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toNumber();
                    break;
                case /* bool locked */ 2:
                    message.locked = reader.bool();
                    break;
                case /* int32 maxRolloutIndex */ 3:
                    message.maxRolloutIndex = reader.int32();
                    break;
                case /* string name */ 4:
                    message.name = reader.string();
                    break;
                case /* GroupType type */ 5:
                    message.type = reader.int32();
                    break;
                case /* GroupMemberType memberType */ 6:
                    message.memberType = reader.int32();
                    break;
                case /* google.protobuf.Timestamp createdAt */ 7:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* optional google.protobuf.Timestamp updatedAt */ 8:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* repeated GroupRolloutRelation groupRolloutRelations */ 9:
                    message.groupRolloutRelations.push(GroupRolloutRelation.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint64 appIds */ 10:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.appIds.push(reader.uint64().toNumber());
                    else
                        message.appIds.push(reader.uint64().toNumber());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupBase, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* bool locked = 2; */
        if (message.locked !== false)
            writer.tag(2, WireType.Varint).bool(message.locked);
        /* int32 maxRolloutIndex = 3; */
        if (message.maxRolloutIndex !== 0)
            writer.tag(3, WireType.Varint).int32(message.maxRolloutIndex);
        /* string name = 4; */
        if (message.name !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.name);
        /* GroupType type = 5; */
        if (message.type !== 0)
            writer.tag(5, WireType.Varint).int32(message.type);
        /* GroupMemberType memberType = 6; */
        if (message.memberType !== 0)
            writer.tag(6, WireType.Varint).int32(message.memberType);
        /* google.protobuf.Timestamp createdAt = 7; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* optional google.protobuf.Timestamp updatedAt = 8; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* repeated GroupRolloutRelation groupRolloutRelations = 9; */
        for (let i = 0; i < message.groupRolloutRelations.length; i++)
            GroupRolloutRelation.internalBinaryWrite(message.groupRolloutRelations[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint64 appIds = 10; */
        if (message.appIds.length) {
            writer.tag(10, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.appIds.length; i++)
                writer.uint64(message.appIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GroupBase
 */
export const GroupBase = new GroupBase$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupRolloutRelation$Type extends MessageType<GroupRolloutRelation> {
    constructor() {
        super("GroupRolloutRelation", [
            { no: 1, name: "groupId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "rolloutId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "orderIndex", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GroupRolloutRelation>): GroupRolloutRelation {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupId = 0;
        message.rolloutId = 0;
        message.orderIndex = 0;
        if (value !== undefined)
            reflectionMergePartial<GroupRolloutRelation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupRolloutRelation): GroupRolloutRelation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 groupId */ 1:
                    message.groupId = reader.uint64().toNumber();
                    break;
                case /* uint64 rolloutId */ 2:
                    message.rolloutId = reader.uint64().toNumber();
                    break;
                case /* int32 orderIndex */ 3:
                    message.orderIndex = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupRolloutRelation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 groupId = 1; */
        if (message.groupId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.groupId);
        /* uint64 rolloutId = 2; */
        if (message.rolloutId !== 0)
            writer.tag(2, WireType.Varint).uint64(message.rolloutId);
        /* int32 orderIndex = 3; */
        if (message.orderIndex !== 0)
            writer.tag(3, WireType.Varint).int32(message.orderIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GroupRolloutRelation
 */
export const GroupRolloutRelation = new GroupRolloutRelation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserStaticGroup$Type extends MessageType<UserStaticGroup> {
    constructor() {
        super("UserStaticGroup", [
            { no: 1, name: "base", kind: "message", T: () => GroupBase },
            { no: 2, name: "userIds", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<UserStaticGroup>): UserStaticGroup {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userIds = [];
        if (value !== undefined)
            reflectionMergePartial<UserStaticGroup>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserStaticGroup): UserStaticGroup {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* GroupBase base */ 1:
                    message.base = GroupBase.internalBinaryRead(reader, reader.uint32(), options, message.base);
                    break;
                case /* repeated uint64 userIds */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.userIds.push(reader.uint64().toNumber());
                    else
                        message.userIds.push(reader.uint64().toNumber());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserStaticGroup, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* GroupBase base = 1; */
        if (message.base)
            GroupBase.internalBinaryWrite(message.base, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint64 userIds = 2; */
        if (message.userIds.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.userIds.length; i++)
                writer.uint64(message.userIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UserStaticGroup
 */
export const UserStaticGroup = new UserStaticGroup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamStaticGroup$Type extends MessageType<TeamStaticGroup> {
    constructor() {
        super("TeamStaticGroup", [
            { no: 1, name: "base", kind: "message", T: () => GroupBase },
            { no: 2, name: "teamIds", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<TeamStaticGroup>): TeamStaticGroup {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamIds = [];
        if (value !== undefined)
            reflectionMergePartial<TeamStaticGroup>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamStaticGroup): TeamStaticGroup {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* GroupBase base */ 1:
                    message.base = GroupBase.internalBinaryRead(reader, reader.uint32(), options, message.base);
                    break;
                case /* repeated uint64 teamIds */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.teamIds.push(reader.uint64().toNumber());
                    else
                        message.teamIds.push(reader.uint64().toNumber());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamStaticGroup, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* GroupBase base = 1; */
        if (message.base)
            GroupBase.internalBinaryWrite(message.base, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint64 teamIds = 2; */
        if (message.teamIds.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.teamIds.length; i++)
                writer.uint64(message.teamIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TeamStaticGroup
 */
export const TeamStaticGroup = new TeamStaticGroup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FilterGroup$Type extends MessageType<FilterGroup> {
    constructor() {
        super("FilterGroup", [
            { no: 1, name: "base", kind: "message", T: () => GroupBase },
            { no: 2, name: "filter", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FilterGroup>): FilterGroup {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.filter = "";
        if (value !== undefined)
            reflectionMergePartial<FilterGroup>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FilterGroup): FilterGroup {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* GroupBase base */ 1:
                    message.base = GroupBase.internalBinaryRead(reader, reader.uint32(), options, message.base);
                    break;
                case /* string filter */ 2:
                    message.filter = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FilterGroup, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* GroupBase base = 1; */
        if (message.base)
            GroupBase.internalBinaryWrite(message.base, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string filter = 2; */
        if (message.filter !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.filter);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FilterGroup
 */
export const FilterGroup = new FilterGroup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Group$Type extends MessageType<Group> {
    constructor() {
        super("Group", [
            { no: 1, name: "type", kind: "enum", T: () => ["GroupType", GroupType, "GROUP_TYPE_"] },
            { no: 2, name: "memberType", kind: "enum", T: () => ["GroupMemberType", GroupMemberType, "GROUP_MEMBER_TYPE_"] },
            { no: 3, name: "userStaticGroup", kind: "message", T: () => UserStaticGroup },
            { no: 4, name: "teamStaticGroup", kind: "message", T: () => TeamStaticGroup },
            { no: 5, name: "filterGroup", kind: "message", T: () => FilterGroup }
        ]);
    }
    create(value?: PartialMessage<Group>): Group {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = 0;
        message.memberType = 0;
        if (value !== undefined)
            reflectionMergePartial<Group>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Group): Group {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* GroupType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* GroupMemberType memberType */ 2:
                    message.memberType = reader.int32();
                    break;
                case /* UserStaticGroup userStaticGroup */ 3:
                    message.userStaticGroup = UserStaticGroup.internalBinaryRead(reader, reader.uint32(), options, message.userStaticGroup);
                    break;
                case /* TeamStaticGroup teamStaticGroup */ 4:
                    message.teamStaticGroup = TeamStaticGroup.internalBinaryRead(reader, reader.uint32(), options, message.teamStaticGroup);
                    break;
                case /* FilterGroup filterGroup */ 5:
                    message.filterGroup = FilterGroup.internalBinaryRead(reader, reader.uint32(), options, message.filterGroup);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Group, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* GroupType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* GroupMemberType memberType = 2; */
        if (message.memberType !== 0)
            writer.tag(2, WireType.Varint).int32(message.memberType);
        /* UserStaticGroup userStaticGroup = 3; */
        if (message.userStaticGroup)
            UserStaticGroup.internalBinaryWrite(message.userStaticGroup, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* TeamStaticGroup teamStaticGroup = 4; */
        if (message.teamStaticGroup)
            TeamStaticGroup.internalBinaryWrite(message.teamStaticGroup, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* FilterGroup filterGroup = 5; */
        if (message.filterGroup)
            FilterGroup.internalBinaryWrite(message.filterGroup, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Group
 */
export const Group = new Group$Type();
