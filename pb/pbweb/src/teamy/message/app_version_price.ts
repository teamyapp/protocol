// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "teamy/message/app_version_price.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Money } from "./money";
/**
 * @generated from protobuf message AppVersionPrice
 */
export interface AppVersionPrice {
    /**
     * @generated from protobuf field: uint64 appId = 1;
     */
    appId: number;
    /**
     * @generated from protobuf field: int32 versionNumber = 2;
     */
    versionNumber: number;
    /**
     * @generated from protobuf field: Money price = 3;
     */
    price?: Money;
}
// @generated message type with reflection information, may provide speed optimized methods
class AppVersionPrice$Type extends MessageType<AppVersionPrice> {
    constructor() {
        super("AppVersionPrice", [
            { no: 1, name: "appId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "versionNumber", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "price", kind: "message", T: () => Money }
        ]);
    }
    create(value?: PartialMessage<AppVersionPrice>): AppVersionPrice {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.appId = 0;
        message.versionNumber = 0;
        if (value !== undefined)
            reflectionMergePartial<AppVersionPrice>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AppVersionPrice): AppVersionPrice {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 appId */ 1:
                    message.appId = reader.uint64().toNumber();
                    break;
                case /* int32 versionNumber */ 2:
                    message.versionNumber = reader.int32();
                    break;
                case /* Money price */ 3:
                    message.price = Money.internalBinaryRead(reader, reader.uint32(), options, message.price);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AppVersionPrice, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 appId = 1; */
        if (message.appId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.appId);
        /* int32 versionNumber = 2; */
        if (message.versionNumber !== 0)
            writer.tag(2, WireType.Varint).int32(message.versionNumber);
        /* Money price = 3; */
        if (message.price)
            Money.internalBinaryWrite(message.price, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AppVersionPrice
 */
export const AppVersionPrice = new AppVersionPrice$Type();
