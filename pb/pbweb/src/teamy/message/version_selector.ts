// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "teamy/message/version_selector.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../../google/protobuf/timestamp";
/**
 * @generated from protobuf message VersionSelectorBase
 */
export interface VersionSelectorBase {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: VersionSelectorType type = 2;
     */
    type: VersionSelectorType;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp createdAt = 3;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: optional google.protobuf.Timestamp updatedAt = 4;
     */
    updatedAt?: Timestamp;
}
/**
 * @generated from protobuf message StaticVersionSelector
 */
export interface StaticVersionSelector {
    /**
     * @generated from protobuf field: VersionSelectorBase base = 1;
     */
    base?: VersionSelectorBase;
    /**
     * @generated from protobuf field: int32 versionNumber = 2;
     */
    versionNumber: number;
}
/**
 * @generated from protobuf message ExperimentVersionSelector
 */
export interface ExperimentVersionSelector {
    /**
     * @generated from protobuf field: VersionSelectorBase base = 1;
     */
    base?: VersionSelectorBase;
    /**
     * @generated from protobuf field: repeated int32 versionNumbers = 2;
     */
    versionNumbers: number[];
}
/**
 * @generated from protobuf message VersionSelector
 */
export interface VersionSelector {
    /**
     * @generated from protobuf field: VersionSelectorType type = 1;
     */
    type: VersionSelectorType;
    /**
     * @generated from protobuf field: StaticVersionSelector staticSelector = 2;
     */
    staticSelector?: StaticVersionSelector;
    /**
     * @generated from protobuf field: ExperimentVersionSelector experimentSelector = 3;
     */
    experimentSelector?: ExperimentVersionSelector;
}
/**
 * @generated from protobuf enum VersionSelectorType
 */
export enum VersionSelectorType {
    /**
     * @generated from protobuf enum value: VERSION_SELECTOR_TYPE_STATIC = 0;
     */
    STATIC = 0,
    /**
     * @generated from protobuf enum value: VERSION_SELECTOR_TYPE_EXPERIMENT = 1;
     */
    EXPERIMENT = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class VersionSelectorBase$Type extends MessageType<VersionSelectorBase> {
    constructor() {
        super("VersionSelectorBase", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "type", kind: "enum", T: () => ["VersionSelectorType", VersionSelectorType, "VERSION_SELECTOR_TYPE_"] },
            { no: 3, name: "createdAt", kind: "message", T: () => Timestamp },
            { no: 4, name: "updatedAt", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<VersionSelectorBase>): VersionSelectorBase {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.type = 0;
        if (value !== undefined)
            reflectionMergePartial<VersionSelectorBase>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VersionSelectorBase): VersionSelectorBase {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toNumber();
                    break;
                case /* VersionSelectorType type */ 2:
                    message.type = reader.int32();
                    break;
                case /* google.protobuf.Timestamp createdAt */ 3:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* optional google.protobuf.Timestamp updatedAt */ 4:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VersionSelectorBase, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* VersionSelectorType type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* google.protobuf.Timestamp createdAt = 3; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional google.protobuf.Timestamp updatedAt = 4; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message VersionSelectorBase
 */
export const VersionSelectorBase = new VersionSelectorBase$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StaticVersionSelector$Type extends MessageType<StaticVersionSelector> {
    constructor() {
        super("StaticVersionSelector", [
            { no: 1, name: "base", kind: "message", T: () => VersionSelectorBase },
            { no: 2, name: "versionNumber", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<StaticVersionSelector>): StaticVersionSelector {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.versionNumber = 0;
        if (value !== undefined)
            reflectionMergePartial<StaticVersionSelector>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StaticVersionSelector): StaticVersionSelector {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* VersionSelectorBase base */ 1:
                    message.base = VersionSelectorBase.internalBinaryRead(reader, reader.uint32(), options, message.base);
                    break;
                case /* int32 versionNumber */ 2:
                    message.versionNumber = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StaticVersionSelector, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* VersionSelectorBase base = 1; */
        if (message.base)
            VersionSelectorBase.internalBinaryWrite(message.base, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 versionNumber = 2; */
        if (message.versionNumber !== 0)
            writer.tag(2, WireType.Varint).int32(message.versionNumber);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StaticVersionSelector
 */
export const StaticVersionSelector = new StaticVersionSelector$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExperimentVersionSelector$Type extends MessageType<ExperimentVersionSelector> {
    constructor() {
        super("ExperimentVersionSelector", [
            { no: 1, name: "base", kind: "message", T: () => VersionSelectorBase },
            { no: 2, name: "versionNumbers", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ExperimentVersionSelector>): ExperimentVersionSelector {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.versionNumbers = [];
        if (value !== undefined)
            reflectionMergePartial<ExperimentVersionSelector>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExperimentVersionSelector): ExperimentVersionSelector {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* VersionSelectorBase base */ 1:
                    message.base = VersionSelectorBase.internalBinaryRead(reader, reader.uint32(), options, message.base);
                    break;
                case /* repeated int32 versionNumbers */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.versionNumbers.push(reader.int32());
                    else
                        message.versionNumbers.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExperimentVersionSelector, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* VersionSelectorBase base = 1; */
        if (message.base)
            VersionSelectorBase.internalBinaryWrite(message.base, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated int32 versionNumbers = 2; */
        if (message.versionNumbers.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.versionNumbers.length; i++)
                writer.int32(message.versionNumbers[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ExperimentVersionSelector
 */
export const ExperimentVersionSelector = new ExperimentVersionSelector$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VersionSelector$Type extends MessageType<VersionSelector> {
    constructor() {
        super("VersionSelector", [
            { no: 1, name: "type", kind: "enum", T: () => ["VersionSelectorType", VersionSelectorType, "VERSION_SELECTOR_TYPE_"] },
            { no: 2, name: "staticSelector", kind: "message", T: () => StaticVersionSelector },
            { no: 3, name: "experimentSelector", kind: "message", T: () => ExperimentVersionSelector }
        ]);
    }
    create(value?: PartialMessage<VersionSelector>): VersionSelector {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = 0;
        if (value !== undefined)
            reflectionMergePartial<VersionSelector>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VersionSelector): VersionSelector {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* VersionSelectorType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* StaticVersionSelector staticSelector */ 2:
                    message.staticSelector = StaticVersionSelector.internalBinaryRead(reader, reader.uint32(), options, message.staticSelector);
                    break;
                case /* ExperimentVersionSelector experimentSelector */ 3:
                    message.experimentSelector = ExperimentVersionSelector.internalBinaryRead(reader, reader.uint32(), options, message.experimentSelector);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VersionSelector, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* VersionSelectorType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* StaticVersionSelector staticSelector = 2; */
        if (message.staticSelector)
            StaticVersionSelector.internalBinaryWrite(message.staticSelector, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* ExperimentVersionSelector experimentSelector = 3; */
        if (message.experimentSelector)
            ExperimentVersionSelector.internalBinaryWrite(message.experimentSelector, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message VersionSelector
 */
export const VersionSelector = new VersionSelector$Type();
