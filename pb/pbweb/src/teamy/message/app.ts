// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "teamy/message/app.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../../google/protobuf/timestamp";
/**
 * @generated from protobuf message App
 */
export interface App {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp createdAt = 2;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: optional google.protobuf.Timestamp updatedAt = 3;
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: int32 totalInstallations = 4;
     */
    totalInstallations: number;
    /**
     * @generated from protobuf field: uint64 managedByTeamId = 5;
     */
    managedByTeamId: number;
    /**
     * @generated from protobuf field: int32 latestVersionNumberForTeam = 6;
     */
    latestVersionNumberForTeam: number;
    /**
     * @generated from protobuf field: repeated uint64 secretIds = 7;
     */
    secretIds: number[];
    /**
     * @generated from protobuf field: repeated uint64 installationIds = 8;
     */
    installationIds: number[];
    /**
     * @generated from protobuf field: repeated int32 versionNumbers = 9;
     */
    versionNumbers: number[];
    /**
     * @generated from protobuf field: repeated uint64 groupIds = 10;
     */
    groupIds: number[];
    /**
     * @generated from protobuf field: repeated uint64 userRolloutIds = 11;
     */
    userRolloutIds: number[];
    /**
     * @generated from protobuf field: repeated uint64 teamRolloutIds = 12;
     */
    teamRolloutIds: number[];
    /**
     * @generated from protobuf field: repeated uint64 tagIds = 13;
     */
    tagIds: number[];
}
// @generated message type with reflection information, may provide speed optimized methods
class App$Type extends MessageType<App> {
    constructor() {
        super("App", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "createdAt", kind: "message", T: () => Timestamp },
            { no: 3, name: "updatedAt", kind: "message", T: () => Timestamp },
            { no: 4, name: "totalInstallations", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "managedByTeamId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 6, name: "latestVersionNumberForTeam", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "secretIds", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 8, name: "installationIds", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 9, name: "versionNumbers", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "groupIds", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 11, name: "userRolloutIds", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 12, name: "teamRolloutIds", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 13, name: "tagIds", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<App>): App {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.totalInstallations = 0;
        message.managedByTeamId = 0;
        message.latestVersionNumberForTeam = 0;
        message.secretIds = [];
        message.installationIds = [];
        message.versionNumbers = [];
        message.groupIds = [];
        message.userRolloutIds = [];
        message.teamRolloutIds = [];
        message.tagIds = [];
        if (value !== undefined)
            reflectionMergePartial<App>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: App): App {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toNumber();
                    break;
                case /* google.protobuf.Timestamp createdAt */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* optional google.protobuf.Timestamp updatedAt */ 3:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* int32 totalInstallations */ 4:
                    message.totalInstallations = reader.int32();
                    break;
                case /* uint64 managedByTeamId */ 5:
                    message.managedByTeamId = reader.uint64().toNumber();
                    break;
                case /* int32 latestVersionNumberForTeam */ 6:
                    message.latestVersionNumberForTeam = reader.int32();
                    break;
                case /* repeated uint64 secretIds */ 7:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.secretIds.push(reader.uint64().toNumber());
                    else
                        message.secretIds.push(reader.uint64().toNumber());
                    break;
                case /* repeated uint64 installationIds */ 8:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.installationIds.push(reader.uint64().toNumber());
                    else
                        message.installationIds.push(reader.uint64().toNumber());
                    break;
                case /* repeated int32 versionNumbers */ 9:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.versionNumbers.push(reader.int32());
                    else
                        message.versionNumbers.push(reader.int32());
                    break;
                case /* repeated uint64 groupIds */ 10:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.groupIds.push(reader.uint64().toNumber());
                    else
                        message.groupIds.push(reader.uint64().toNumber());
                    break;
                case /* repeated uint64 userRolloutIds */ 11:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.userRolloutIds.push(reader.uint64().toNumber());
                    else
                        message.userRolloutIds.push(reader.uint64().toNumber());
                    break;
                case /* repeated uint64 teamRolloutIds */ 12:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.teamRolloutIds.push(reader.uint64().toNumber());
                    else
                        message.teamRolloutIds.push(reader.uint64().toNumber());
                    break;
                case /* repeated uint64 tagIds */ 13:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.tagIds.push(reader.uint64().toNumber());
                    else
                        message.tagIds.push(reader.uint64().toNumber());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: App, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* google.protobuf.Timestamp createdAt = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional google.protobuf.Timestamp updatedAt = 3; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int32 totalInstallations = 4; */
        if (message.totalInstallations !== 0)
            writer.tag(4, WireType.Varint).int32(message.totalInstallations);
        /* uint64 managedByTeamId = 5; */
        if (message.managedByTeamId !== 0)
            writer.tag(5, WireType.Varint).uint64(message.managedByTeamId);
        /* int32 latestVersionNumberForTeam = 6; */
        if (message.latestVersionNumberForTeam !== 0)
            writer.tag(6, WireType.Varint).int32(message.latestVersionNumberForTeam);
        /* repeated uint64 secretIds = 7; */
        if (message.secretIds.length) {
            writer.tag(7, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.secretIds.length; i++)
                writer.uint64(message.secretIds[i]);
            writer.join();
        }
        /* repeated uint64 installationIds = 8; */
        if (message.installationIds.length) {
            writer.tag(8, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.installationIds.length; i++)
                writer.uint64(message.installationIds[i]);
            writer.join();
        }
        /* repeated int32 versionNumbers = 9; */
        if (message.versionNumbers.length) {
            writer.tag(9, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.versionNumbers.length; i++)
                writer.int32(message.versionNumbers[i]);
            writer.join();
        }
        /* repeated uint64 groupIds = 10; */
        if (message.groupIds.length) {
            writer.tag(10, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.groupIds.length; i++)
                writer.uint64(message.groupIds[i]);
            writer.join();
        }
        /* repeated uint64 userRolloutIds = 11; */
        if (message.userRolloutIds.length) {
            writer.tag(11, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.userRolloutIds.length; i++)
                writer.uint64(message.userRolloutIds[i]);
            writer.join();
        }
        /* repeated uint64 teamRolloutIds = 12; */
        if (message.teamRolloutIds.length) {
            writer.tag(12, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.teamRolloutIds.length; i++)
                writer.uint64(message.teamRolloutIds[i]);
            writer.join();
        }
        /* repeated uint64 tagIds = 13; */
        if (message.tagIds.length) {
            writer.tag(13, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.tagIds.length; i++)
                writer.uint64(message.tagIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message App
 */
export const App = new App$Type();
