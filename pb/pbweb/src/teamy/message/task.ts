// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "teamy/message/task.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Priority } from "./priority";
import { Duration } from "../../google/protobuf/duration";
import { Timestamp } from "../../google/protobuf/timestamp";
/**
 * @generated from protobuf message Task
 */
export interface Task {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: string goal = 2;
     */
    goal: string;
    /**
     * @generated from protobuf field: optional string context = 3;
     */
    context?: string;
    /**
     * @generated from protobuf field: uint64 owningTeamId = 4;
     */
    owningTeamId: number;
    /**
     * @generated from protobuf field: uint64 creatorUserId = 5;
     */
    creatorUserId: number;
    /**
     * @generated from protobuf field: optional uint64 ownerUserId = 6;
     */
    ownerUserId?: number;
    /**
     * @generated from protobuf field: TaskStatus status = 7;
     */
    status: TaskStatus;
    /**
     * @generated from protobuf field: bool isScheduled = 8;
     */
    isScheduled: boolean;
    /**
     * @generated from protobuf field: bool isPlanned = 9;
     */
    isPlanned: boolean;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp createdAt = 10;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: optional google.protobuf.Timestamp updatedAt = 11;
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: optional google.protobuf.Timestamp deliveredAt = 12;
     */
    deliveredAt?: Timestamp;
    /**
     * @generated from protobuf field: optional google.protobuf.Timestamp dueAt = 13;
     */
    dueAt?: Timestamp;
    /**
     * @generated from protobuf field: optional google.protobuf.Duration effort = 14;
     */
    effort?: Duration;
    /**
     * @generated from protobuf field: optional Priority priority = 15;
     */
    priority?: Priority;
    /**
     * @generated from protobuf field: repeated TaskAction availableActions = 16;
     */
    availableActions: TaskAction[];
    /**
     * @generated from protobuf field: uint64 commentsThreadId = 17;
     */
    commentsThreadId: number;
}
/**
 * @generated from protobuf enum TaskStatus
 */
export enum TaskStatus {
    /**
     * @generated from protobuf enum value: TODO = 0;
     */
    TODO = 0,
    /**
     * @generated from protobuf enum value: IN_PROGRESS = 1;
     */
    IN_PROGRESS = 1,
    /**
     * @generated from protobuf enum value: PAUSED = 2;
     */
    PAUSED = 2,
    /**
     * @generated from protobuf enum value: AWAITING = 3;
     */
    AWAITING = 3,
    /**
     * @generated from protobuf enum value: BLOCKED = 4;
     */
    BLOCKED = 4,
    /**
     * @generated from protobuf enum value: DELIVERED = 5;
     */
    DELIVERED = 5
}
/**
 * @generated from protobuf enum TaskAction
 */
export enum TaskAction {
    /**
     * @generated from protobuf enum value: START = 0;
     */
    START = 0,
    /**
     * @generated from protobuf enum value: DELETE = 1;
     */
    DELETE = 1,
    /**
     * @generated from protobuf enum value: ASSIGN_OWNER = 2;
     */
    ASSIGN_OWNER = 2,
    /**
     * @generated from protobuf enum value: REPORT_BLOCKED = 3;
     */
    REPORT_BLOCKED = 3,
    /**
     * @generated from protobuf enum value: MARK_COMPLETE = 4;
     */
    MARK_COMPLETE = 4
}
// @generated message type with reflection information, may provide speed optimized methods
class Task$Type extends MessageType<Task> {
    constructor() {
        super("Task", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "goal", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "context", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "owningTeamId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "creatorUserId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 6, name: "ownerUserId", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 7, name: "status", kind: "enum", T: () => ["TaskStatus", TaskStatus] },
            { no: 8, name: "isScheduled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "isPlanned", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "createdAt", kind: "message", T: () => Timestamp },
            { no: 11, name: "updatedAt", kind: "message", T: () => Timestamp },
            { no: 12, name: "deliveredAt", kind: "message", T: () => Timestamp },
            { no: 13, name: "dueAt", kind: "message", T: () => Timestamp },
            { no: 14, name: "effort", kind: "message", T: () => Duration },
            { no: 15, name: "priority", kind: "enum", opt: true, T: () => ["Priority", Priority] },
            { no: 16, name: "availableActions", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["TaskAction", TaskAction] },
            { no: 17, name: "commentsThreadId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<Task>): Task {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.goal = "";
        message.owningTeamId = 0;
        message.creatorUserId = 0;
        message.status = 0;
        message.isScheduled = false;
        message.isPlanned = false;
        message.availableActions = [];
        message.commentsThreadId = 0;
        if (value !== undefined)
            reflectionMergePartial<Task>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Task): Task {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toNumber();
                    break;
                case /* string goal */ 2:
                    message.goal = reader.string();
                    break;
                case /* optional string context */ 3:
                    message.context = reader.string();
                    break;
                case /* uint64 owningTeamId */ 4:
                    message.owningTeamId = reader.uint64().toNumber();
                    break;
                case /* uint64 creatorUserId */ 5:
                    message.creatorUserId = reader.uint64().toNumber();
                    break;
                case /* optional uint64 ownerUserId */ 6:
                    message.ownerUserId = reader.uint64().toNumber();
                    break;
                case /* TaskStatus status */ 7:
                    message.status = reader.int32();
                    break;
                case /* bool isScheduled */ 8:
                    message.isScheduled = reader.bool();
                    break;
                case /* bool isPlanned */ 9:
                    message.isPlanned = reader.bool();
                    break;
                case /* google.protobuf.Timestamp createdAt */ 10:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* optional google.protobuf.Timestamp updatedAt */ 11:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* optional google.protobuf.Timestamp deliveredAt */ 12:
                    message.deliveredAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.deliveredAt);
                    break;
                case /* optional google.protobuf.Timestamp dueAt */ 13:
                    message.dueAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.dueAt);
                    break;
                case /* optional google.protobuf.Duration effort */ 14:
                    message.effort = Duration.internalBinaryRead(reader, reader.uint32(), options, message.effort);
                    break;
                case /* optional Priority priority */ 15:
                    message.priority = reader.int32();
                    break;
                case /* repeated TaskAction availableActions */ 16:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.availableActions.push(reader.int32());
                    else
                        message.availableActions.push(reader.int32());
                    break;
                case /* uint64 commentsThreadId */ 17:
                    message.commentsThreadId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Task, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* string goal = 2; */
        if (message.goal !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.goal);
        /* optional string context = 3; */
        if (message.context !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.context);
        /* uint64 owningTeamId = 4; */
        if (message.owningTeamId !== 0)
            writer.tag(4, WireType.Varint).uint64(message.owningTeamId);
        /* uint64 creatorUserId = 5; */
        if (message.creatorUserId !== 0)
            writer.tag(5, WireType.Varint).uint64(message.creatorUserId);
        /* optional uint64 ownerUserId = 6; */
        if (message.ownerUserId !== undefined)
            writer.tag(6, WireType.Varint).uint64(message.ownerUserId);
        /* TaskStatus status = 7; */
        if (message.status !== 0)
            writer.tag(7, WireType.Varint).int32(message.status);
        /* bool isScheduled = 8; */
        if (message.isScheduled !== false)
            writer.tag(8, WireType.Varint).bool(message.isScheduled);
        /* bool isPlanned = 9; */
        if (message.isPlanned !== false)
            writer.tag(9, WireType.Varint).bool(message.isPlanned);
        /* google.protobuf.Timestamp createdAt = 10; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional google.protobuf.Timestamp updatedAt = 11; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* optional google.protobuf.Timestamp deliveredAt = 12; */
        if (message.deliveredAt)
            Timestamp.internalBinaryWrite(message.deliveredAt, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* optional google.protobuf.Timestamp dueAt = 13; */
        if (message.dueAt)
            Timestamp.internalBinaryWrite(message.dueAt, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* optional google.protobuf.Duration effort = 14; */
        if (message.effort)
            Duration.internalBinaryWrite(message.effort, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* optional Priority priority = 15; */
        if (message.priority !== undefined)
            writer.tag(15, WireType.Varint).int32(message.priority);
        /* repeated TaskAction availableActions = 16; */
        if (message.availableActions.length) {
            writer.tag(16, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.availableActions.length; i++)
                writer.int32(message.availableActions[i]);
            writer.join();
        }
        /* uint64 commentsThreadId = 17; */
        if (message.commentsThreadId !== 0)
            writer.tag(17, WireType.Varint).uint64(message.commentsThreadId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Task
 */
export const Task = new Task$Type();
