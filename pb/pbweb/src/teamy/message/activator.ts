// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "teamy/message/activator.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../../google/protobuf/timestamp";
/**
 * @generated from protobuf message ActivatorBase
 */
export interface ActivatorBase {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: ActivatorType type = 2;
     */
    type: ActivatorType;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp createdAt = 3;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp updatedAt = 4;
     */
    updatedAt?: Timestamp;
}
/**
 * @generated from protobuf message StaticActivator
 */
export interface StaticActivator {
    /**
     * @generated from protobuf field: ActivatorBase base = 1;
     */
    base?: ActivatorBase;
}
/**
 * @generated from protobuf message TimeRangeActivator
 */
export interface TimeRangeActivator {
    /**
     * @generated from protobuf field: ActivatorBase base = 1;
     */
    base?: ActivatorBase;
    /**
     * @generated from protobuf field: optional google.protobuf.Timestamp startAt = 2;
     */
    startAt?: Timestamp;
    /**
     * @generated from protobuf field: optional google.protobuf.Timestamp endAt = 3;
     */
    endAt?: Timestamp;
}
/**
 * @generated from protobuf message MaxViewersActivator
 */
export interface MaxViewersActivator {
    /**
     * @generated from protobuf field: ActivatorBase base = 1;
     */
    base?: ActivatorBase;
    /**
     * @generated from protobuf field: int32 maxViewers = 2;
     */
    maxViewers: number;
}
/**
 * @generated from protobuf message PercentageActivator
 */
export interface PercentageActivator {
    /**
     * @generated from protobuf field: ActivatorBase base = 1;
     */
    base?: ActivatorBase;
    /**
     * @generated from protobuf field: int32 percentage = 2;
     */
    percentage: number;
}
/**
 * @generated from protobuf message Activator
 */
export interface Activator {
    /**
     * @generated from protobuf field: ActivatorType type = 1;
     */
    type: ActivatorType;
    /**
     * @generated from protobuf field: StaticActivator staticActivator = 2;
     */
    staticActivator?: StaticActivator;
    /**
     * @generated from protobuf field: TimeRangeActivator timeRangeActivator = 3;
     */
    timeRangeActivator?: TimeRangeActivator;
    /**
     * @generated from protobuf field: MaxViewersActivator maxViewersActivator = 4;
     */
    maxViewersActivator?: MaxViewersActivator;
    /**
     * @generated from protobuf field: PercentageActivator percentageActivator = 5;
     */
    percentageActivator?: PercentageActivator;
}
/**
 * @generated from protobuf enum ActivatorType
 */
export enum ActivatorType {
    /**
     * @generated from protobuf enum value: ACTIVATOR_TYPE_STATIC = 0;
     */
    STATIC = 0,
    /**
     * @generated from protobuf enum value: ACTIVATOR_TYPE_TIME_RANGE = 1;
     */
    TIME_RANGE = 1,
    /**
     * @generated from protobuf enum value: ACTIVATOR_TYPE_MAX_VIEWERS = 2;
     */
    MAX_VIEWERS = 2,
    /**
     * @generated from protobuf enum value: ACTIVATOR_TYPE_PERCENTAGE = 3;
     */
    PERCENTAGE = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class ActivatorBase$Type extends MessageType<ActivatorBase> {
    constructor() {
        super("ActivatorBase", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "type", kind: "enum", T: () => ["ActivatorType", ActivatorType, "ACTIVATOR_TYPE_"] },
            { no: 3, name: "createdAt", kind: "message", T: () => Timestamp },
            { no: 4, name: "updatedAt", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<ActivatorBase>): ActivatorBase {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.type = 0;
        if (value !== undefined)
            reflectionMergePartial<ActivatorBase>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivatorBase): ActivatorBase {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toNumber();
                    break;
                case /* ActivatorType type */ 2:
                    message.type = reader.int32();
                    break;
                case /* google.protobuf.Timestamp createdAt */ 3:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp updatedAt */ 4:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivatorBase, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* ActivatorType type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* google.protobuf.Timestamp createdAt = 3; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp updatedAt = 4; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ActivatorBase
 */
export const ActivatorBase = new ActivatorBase$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StaticActivator$Type extends MessageType<StaticActivator> {
    constructor() {
        super("StaticActivator", [
            { no: 1, name: "base", kind: "message", T: () => ActivatorBase }
        ]);
    }
    create(value?: PartialMessage<StaticActivator>): StaticActivator {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<StaticActivator>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StaticActivator): StaticActivator {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ActivatorBase base */ 1:
                    message.base = ActivatorBase.internalBinaryRead(reader, reader.uint32(), options, message.base);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StaticActivator, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ActivatorBase base = 1; */
        if (message.base)
            ActivatorBase.internalBinaryWrite(message.base, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StaticActivator
 */
export const StaticActivator = new StaticActivator$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TimeRangeActivator$Type extends MessageType<TimeRangeActivator> {
    constructor() {
        super("TimeRangeActivator", [
            { no: 1, name: "base", kind: "message", T: () => ActivatorBase },
            { no: 2, name: "startAt", kind: "message", T: () => Timestamp },
            { no: 3, name: "endAt", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<TimeRangeActivator>): TimeRangeActivator {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TimeRangeActivator>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TimeRangeActivator): TimeRangeActivator {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ActivatorBase base */ 1:
                    message.base = ActivatorBase.internalBinaryRead(reader, reader.uint32(), options, message.base);
                    break;
                case /* optional google.protobuf.Timestamp startAt */ 2:
                    message.startAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.startAt);
                    break;
                case /* optional google.protobuf.Timestamp endAt */ 3:
                    message.endAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.endAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TimeRangeActivator, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ActivatorBase base = 1; */
        if (message.base)
            ActivatorBase.internalBinaryWrite(message.base, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional google.protobuf.Timestamp startAt = 2; */
        if (message.startAt)
            Timestamp.internalBinaryWrite(message.startAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional google.protobuf.Timestamp endAt = 3; */
        if (message.endAt)
            Timestamp.internalBinaryWrite(message.endAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TimeRangeActivator
 */
export const TimeRangeActivator = new TimeRangeActivator$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MaxViewersActivator$Type extends MessageType<MaxViewersActivator> {
    constructor() {
        super("MaxViewersActivator", [
            { no: 1, name: "base", kind: "message", T: () => ActivatorBase },
            { no: 2, name: "maxViewers", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MaxViewersActivator>): MaxViewersActivator {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.maxViewers = 0;
        if (value !== undefined)
            reflectionMergePartial<MaxViewersActivator>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MaxViewersActivator): MaxViewersActivator {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ActivatorBase base */ 1:
                    message.base = ActivatorBase.internalBinaryRead(reader, reader.uint32(), options, message.base);
                    break;
                case /* int32 maxViewers */ 2:
                    message.maxViewers = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MaxViewersActivator, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ActivatorBase base = 1; */
        if (message.base)
            ActivatorBase.internalBinaryWrite(message.base, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 maxViewers = 2; */
        if (message.maxViewers !== 0)
            writer.tag(2, WireType.Varint).int32(message.maxViewers);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MaxViewersActivator
 */
export const MaxViewersActivator = new MaxViewersActivator$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PercentageActivator$Type extends MessageType<PercentageActivator> {
    constructor() {
        super("PercentageActivator", [
            { no: 1, name: "base", kind: "message", T: () => ActivatorBase },
            { no: 2, name: "percentage", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PercentageActivator>): PercentageActivator {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.percentage = 0;
        if (value !== undefined)
            reflectionMergePartial<PercentageActivator>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PercentageActivator): PercentageActivator {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ActivatorBase base */ 1:
                    message.base = ActivatorBase.internalBinaryRead(reader, reader.uint32(), options, message.base);
                    break;
                case /* int32 percentage */ 2:
                    message.percentage = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PercentageActivator, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ActivatorBase base = 1; */
        if (message.base)
            ActivatorBase.internalBinaryWrite(message.base, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 percentage = 2; */
        if (message.percentage !== 0)
            writer.tag(2, WireType.Varint).int32(message.percentage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PercentageActivator
 */
export const PercentageActivator = new PercentageActivator$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Activator$Type extends MessageType<Activator> {
    constructor() {
        super("Activator", [
            { no: 1, name: "type", kind: "enum", T: () => ["ActivatorType", ActivatorType, "ACTIVATOR_TYPE_"] },
            { no: 2, name: "staticActivator", kind: "message", T: () => StaticActivator },
            { no: 3, name: "timeRangeActivator", kind: "message", T: () => TimeRangeActivator },
            { no: 4, name: "maxViewersActivator", kind: "message", T: () => MaxViewersActivator },
            { no: 5, name: "percentageActivator", kind: "message", T: () => PercentageActivator }
        ]);
    }
    create(value?: PartialMessage<Activator>): Activator {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = 0;
        if (value !== undefined)
            reflectionMergePartial<Activator>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Activator): Activator {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ActivatorType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* StaticActivator staticActivator */ 2:
                    message.staticActivator = StaticActivator.internalBinaryRead(reader, reader.uint32(), options, message.staticActivator);
                    break;
                case /* TimeRangeActivator timeRangeActivator */ 3:
                    message.timeRangeActivator = TimeRangeActivator.internalBinaryRead(reader, reader.uint32(), options, message.timeRangeActivator);
                    break;
                case /* MaxViewersActivator maxViewersActivator */ 4:
                    message.maxViewersActivator = MaxViewersActivator.internalBinaryRead(reader, reader.uint32(), options, message.maxViewersActivator);
                    break;
                case /* PercentageActivator percentageActivator */ 5:
                    message.percentageActivator = PercentageActivator.internalBinaryRead(reader, reader.uint32(), options, message.percentageActivator);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Activator, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ActivatorType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* StaticActivator staticActivator = 2; */
        if (message.staticActivator)
            StaticActivator.internalBinaryWrite(message.staticActivator, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* TimeRangeActivator timeRangeActivator = 3; */
        if (message.timeRangeActivator)
            TimeRangeActivator.internalBinaryWrite(message.timeRangeActivator, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* MaxViewersActivator maxViewersActivator = 4; */
        if (message.maxViewersActivator)
            MaxViewersActivator.internalBinaryWrite(message.maxViewersActivator, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* PercentageActivator percentageActivator = 5; */
        if (message.percentageActivator)
            PercentageActivator.internalBinaryWrite(message.percentageActivator, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Activator
 */
export const Activator = new Activator$Type();
