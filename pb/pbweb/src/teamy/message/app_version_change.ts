// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "teamy/message/app_version_change.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message AppVersionChange
 */
export interface AppVersionChange {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: uint64 appId = 2;
     */
    appId: number;
    /**
     * @generated from protobuf field: int32 versionNumber = 3;
     */
    versionNumber: number;
    /**
     * @generated from protobuf field: string change = 4;
     */
    change: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class AppVersionChange$Type extends MessageType<AppVersionChange> {
    constructor() {
        super("AppVersionChange", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "appId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "versionNumber", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "change", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AppVersionChange>): AppVersionChange {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.appId = 0;
        message.versionNumber = 0;
        message.change = "";
        if (value !== undefined)
            reflectionMergePartial<AppVersionChange>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AppVersionChange): AppVersionChange {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toNumber();
                    break;
                case /* uint64 appId */ 2:
                    message.appId = reader.uint64().toNumber();
                    break;
                case /* int32 versionNumber */ 3:
                    message.versionNumber = reader.int32();
                    break;
                case /* string change */ 4:
                    message.change = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AppVersionChange, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* uint64 appId = 2; */
        if (message.appId !== 0)
            writer.tag(2, WireType.Varint).uint64(message.appId);
        /* int32 versionNumber = 3; */
        if (message.versionNumber !== 0)
            writer.tag(3, WireType.Varint).int32(message.versionNumber);
        /* string change = 4; */
        if (message.change !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.change);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AppVersionChange
 */
export const AppVersionChange = new AppVersionChange$Type();
