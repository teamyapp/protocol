// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "teamy/app_service.proto" (syntax proto3)
// tslint:disable
import { Empty } from "../google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { App } from "./message/app";
/**
 * @generated from protobuf message GetAppRequest
 */
export interface GetAppRequest {
    /**
     * @generated from protobuf field: string appId = 1;
     */
    appId: string;
}
/**
 * @generated from protobuf message GetAppResponse
 */
export interface GetAppResponse {
    /**
     * @generated from protobuf field: App app = 1;
     */
    app?: App;
}
/**
 * @generated from protobuf message ListAppsRequest
 */
export interface ListAppsRequest {
    /**
     * @generated from protobuf field: repeated uint64 appIds = 1;
     */
    appIds: number[];
    /**
     * @generated from protobuf field: optional string query = 2;
     */
    query?: string;
    /**
     * @generated from protobuf field: repeated string tagValues = 3;
     */
    tagValues: string[];
    /**
     * @generated from protobuf field: optional bool isOnPromotion = 4;
     */
    isOnPromotion?: boolean;
}
/**
 * @generated from protobuf message ListAppsResponse
 */
export interface ListAppsResponse {
    /**
     * @generated from protobuf field: repeated App apps = 1;
     */
    apps: App[];
}
/**
 * @generated from protobuf message CreateAppRequest
 */
export interface CreateAppRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * @generated from protobuf message CreateAppResponse
 */
export interface CreateAppResponse {
    /**
     * @generated from protobuf field: App app = 1;
     */
    app?: App;
}
/**
 * @generated from protobuf message DeleteAppRequest
 */
export interface DeleteAppRequest {
    /**
     * @generated from protobuf field: uint64 appId = 1;
     */
    appId: number;
}
/**
 * @generated from protobuf message AddTagToAppRequest
 */
export interface AddTagToAppRequest {
    /**
     * @generated from protobuf field: uint64 appId = 1;
     */
    appId: number;
    /**
     * @generated from protobuf field: string tag = 2;
     */
    tag: string;
}
/**
 * @generated from protobuf message RemoveTagFromAppRequest
 */
export interface RemoveTagFromAppRequest {
    /**
     * @generated from protobuf field: uint64 appId = 1;
     */
    appId: number;
    /**
     * @generated from protobuf field: uint64 tagId = 2;
     */
    tagId: number;
}
/**
 * @generated from protobuf message InstallAppToTeamRequest
 */
export interface InstallAppToTeamRequest {
    /**
     * @generated from protobuf field: uint64 appId = 1;
     */
    appId: number;
    /**
     * @generated from protobuf field: uint64 teamId = 2;
     */
    teamId: number;
}
/**
 * @generated from protobuf message UninstallAppFromTeamRequest
 */
export interface UninstallAppFromTeamRequest {
    /**
     * @generated from protobuf field: uint64 installationId = 1;
     */
    installationId: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetAppRequest$Type extends MessageType<GetAppRequest> {
    constructor() {
        super("GetAppRequest", [
            { no: 1, name: "appId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetAppRequest>): GetAppRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.appId = "";
        if (value !== undefined)
            reflectionMergePartial<GetAppRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAppRequest): GetAppRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string appId */ 1:
                    message.appId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAppRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string appId = 1; */
        if (message.appId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.appId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetAppRequest
 */
export const GetAppRequest = new GetAppRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAppResponse$Type extends MessageType<GetAppResponse> {
    constructor() {
        super("GetAppResponse", [
            { no: 1, name: "app", kind: "message", T: () => App }
        ]);
    }
    create(value?: PartialMessage<GetAppResponse>): GetAppResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetAppResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAppResponse): GetAppResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* App app */ 1:
                    message.app = App.internalBinaryRead(reader, reader.uint32(), options, message.app);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAppResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* App app = 1; */
        if (message.app)
            App.internalBinaryWrite(message.app, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetAppResponse
 */
export const GetAppResponse = new GetAppResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListAppsRequest$Type extends MessageType<ListAppsRequest> {
    constructor() {
        super("ListAppsRequest", [
            { no: 1, name: "appIds", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "query", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "tagValues", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "isOnPromotion", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ListAppsRequest>): ListAppsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.appIds = [];
        message.tagValues = [];
        if (value !== undefined)
            reflectionMergePartial<ListAppsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListAppsRequest): ListAppsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint64 appIds */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.appIds.push(reader.uint64().toNumber());
                    else
                        message.appIds.push(reader.uint64().toNumber());
                    break;
                case /* optional string query */ 2:
                    message.query = reader.string();
                    break;
                case /* repeated string tagValues */ 3:
                    message.tagValues.push(reader.string());
                    break;
                case /* optional bool isOnPromotion */ 4:
                    message.isOnPromotion = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListAppsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint64 appIds = 1; */
        if (message.appIds.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.appIds.length; i++)
                writer.uint64(message.appIds[i]);
            writer.join();
        }
        /* optional string query = 2; */
        if (message.query !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.query);
        /* repeated string tagValues = 3; */
        for (let i = 0; i < message.tagValues.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.tagValues[i]);
        /* optional bool isOnPromotion = 4; */
        if (message.isOnPromotion !== undefined)
            writer.tag(4, WireType.Varint).bool(message.isOnPromotion);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListAppsRequest
 */
export const ListAppsRequest = new ListAppsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListAppsResponse$Type extends MessageType<ListAppsResponse> {
    constructor() {
        super("ListAppsResponse", [
            { no: 1, name: "apps", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => App }
        ]);
    }
    create(value?: PartialMessage<ListAppsResponse>): ListAppsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.apps = [];
        if (value !== undefined)
            reflectionMergePartial<ListAppsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListAppsResponse): ListAppsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated App apps */ 1:
                    message.apps.push(App.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListAppsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated App apps = 1; */
        for (let i = 0; i < message.apps.length; i++)
            App.internalBinaryWrite(message.apps[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListAppsResponse
 */
export const ListAppsResponse = new ListAppsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateAppRequest$Type extends MessageType<CreateAppRequest> {
    constructor() {
        super("CreateAppRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateAppRequest>): CreateAppRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<CreateAppRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateAppRequest): CreateAppRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateAppRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateAppRequest
 */
export const CreateAppRequest = new CreateAppRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateAppResponse$Type extends MessageType<CreateAppResponse> {
    constructor() {
        super("CreateAppResponse", [
            { no: 1, name: "app", kind: "message", T: () => App }
        ]);
    }
    create(value?: PartialMessage<CreateAppResponse>): CreateAppResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateAppResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateAppResponse): CreateAppResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* App app */ 1:
                    message.app = App.internalBinaryRead(reader, reader.uint32(), options, message.app);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateAppResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* App app = 1; */
        if (message.app)
            App.internalBinaryWrite(message.app, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateAppResponse
 */
export const CreateAppResponse = new CreateAppResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteAppRequest$Type extends MessageType<DeleteAppRequest> {
    constructor() {
        super("DeleteAppRequest", [
            { no: 1, name: "appId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteAppRequest>): DeleteAppRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.appId = 0;
        if (value !== undefined)
            reflectionMergePartial<DeleteAppRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteAppRequest): DeleteAppRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 appId */ 1:
                    message.appId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteAppRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 appId = 1; */
        if (message.appId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.appId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteAppRequest
 */
export const DeleteAppRequest = new DeleteAppRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddTagToAppRequest$Type extends MessageType<AddTagToAppRequest> {
    constructor() {
        super("AddTagToAppRequest", [
            { no: 1, name: "appId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "tag", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AddTagToAppRequest>): AddTagToAppRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.appId = 0;
        message.tag = "";
        if (value !== undefined)
            reflectionMergePartial<AddTagToAppRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddTagToAppRequest): AddTagToAppRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 appId */ 1:
                    message.appId = reader.uint64().toNumber();
                    break;
                case /* string tag */ 2:
                    message.tag = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddTagToAppRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 appId = 1; */
        if (message.appId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.appId);
        /* string tag = 2; */
        if (message.tag !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.tag);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AddTagToAppRequest
 */
export const AddTagToAppRequest = new AddTagToAppRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveTagFromAppRequest$Type extends MessageType<RemoveTagFromAppRequest> {
    constructor() {
        super("RemoveTagFromAppRequest", [
            { no: 1, name: "appId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "tagId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveTagFromAppRequest>): RemoveTagFromAppRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.appId = 0;
        message.tagId = 0;
        if (value !== undefined)
            reflectionMergePartial<RemoveTagFromAppRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveTagFromAppRequest): RemoveTagFromAppRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 appId */ 1:
                    message.appId = reader.uint64().toNumber();
                    break;
                case /* uint64 tagId */ 2:
                    message.tagId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveTagFromAppRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 appId = 1; */
        if (message.appId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.appId);
        /* uint64 tagId = 2; */
        if (message.tagId !== 0)
            writer.tag(2, WireType.Varint).uint64(message.tagId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RemoveTagFromAppRequest
 */
export const RemoveTagFromAppRequest = new RemoveTagFromAppRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InstallAppToTeamRequest$Type extends MessageType<InstallAppToTeamRequest> {
    constructor() {
        super("InstallAppToTeamRequest", [
            { no: 1, name: "appId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "teamId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<InstallAppToTeamRequest>): InstallAppToTeamRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.appId = 0;
        message.teamId = 0;
        if (value !== undefined)
            reflectionMergePartial<InstallAppToTeamRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InstallAppToTeamRequest): InstallAppToTeamRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 appId */ 1:
                    message.appId = reader.uint64().toNumber();
                    break;
                case /* uint64 teamId */ 2:
                    message.teamId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InstallAppToTeamRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 appId = 1; */
        if (message.appId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.appId);
        /* uint64 teamId = 2; */
        if (message.teamId !== 0)
            writer.tag(2, WireType.Varint).uint64(message.teamId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message InstallAppToTeamRequest
 */
export const InstallAppToTeamRequest = new InstallAppToTeamRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UninstallAppFromTeamRequest$Type extends MessageType<UninstallAppFromTeamRequest> {
    constructor() {
        super("UninstallAppFromTeamRequest", [
            { no: 1, name: "installationId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<UninstallAppFromTeamRequest>): UninstallAppFromTeamRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.installationId = 0;
        if (value !== undefined)
            reflectionMergePartial<UninstallAppFromTeamRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UninstallAppFromTeamRequest): UninstallAppFromTeamRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 installationId */ 1:
                    message.installationId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UninstallAppFromTeamRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 installationId = 1; */
        if (message.installationId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.installationId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UninstallAppFromTeamRequest
 */
export const UninstallAppFromTeamRequest = new UninstallAppFromTeamRequest$Type();
/**
 * @generated ServiceType for protobuf service AppService
 */
export const AppService = new ServiceType("AppService", [
    { name: "GetApp", options: {}, I: GetAppRequest, O: GetAppResponse },
    { name: "ListApps", options: {}, I: ListAppsRequest, O: ListAppsResponse },
    { name: "CreateApp", options: {}, I: CreateAppRequest, O: CreateAppResponse },
    { name: "DeleteApp", options: {}, I: DeleteAppRequest, O: Empty },
    { name: "AddTagToApp", options: {}, I: AddTagToAppRequest, O: Empty },
    { name: "RemoveTagFromApp", options: {}, I: RemoveTagFromAppRequest, O: Empty },
    { name: "InstallAppToTeam", options: {}, I: InstallAppToTeamRequest, O: Empty },
    { name: "UninstallAppFromTeam", options: {}, I: UninstallAppFromTeamRequest, O: Empty }
]);
