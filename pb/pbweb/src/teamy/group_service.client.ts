// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "teamy/group_service.proto" (syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { GroupSerivce } from "./group_service";
import type { Empty } from "../google/protobuf/empty";
import type { DeleteGroupRequest } from "./group_service";
import type { UpdateGroupResponse } from "./group_service";
import type { UpdateGroupRequest } from "./group_service";
import type { CreateFilterGroupResponse } from "./group_service";
import type { CreateFilterGroupRequest } from "./group_service";
import type { CreateStaticTeamGroupResponse } from "./group_service";
import type { CreateStaticTeamGroupRequest } from "./group_service";
import type { CreateStaticUserGroupResponse } from "./group_service";
import type { CreateStaticUserGroupRequest } from "./group_service";
import type { ListGroupsResponse } from "./group_service";
import type { ListGroupsRequest } from "./group_service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetGroupResponse } from "./group_service";
import type { GetGroupRequest } from "./group_service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service GroupSerivce
 */
export interface IGroupSerivceClient {
    /**
     * @generated from protobuf rpc: GetGroup(GetGroupRequest) returns (GetGroupResponse);
     */
    getGroup(input: GetGroupRequest, options?: RpcOptions): UnaryCall<GetGroupRequest, GetGroupResponse>;
    /**
     * @generated from protobuf rpc: ListGroups(ListGroupsRequest) returns (ListGroupsResponse);
     */
    listGroups(input: ListGroupsRequest, options?: RpcOptions): UnaryCall<ListGroupsRequest, ListGroupsResponse>;
    /**
     * @generated from protobuf rpc: CreateStaticUserGroup(CreateStaticUserGroupRequest) returns (CreateStaticUserGroupResponse);
     */
    createStaticUserGroup(input: CreateStaticUserGroupRequest, options?: RpcOptions): UnaryCall<CreateStaticUserGroupRequest, CreateStaticUserGroupResponse>;
    /**
     * @generated from protobuf rpc: CreateStaticTeamGroup(CreateStaticTeamGroupRequest) returns (CreateStaticTeamGroupResponse);
     */
    createStaticTeamGroup(input: CreateStaticTeamGroupRequest, options?: RpcOptions): UnaryCall<CreateStaticTeamGroupRequest, CreateStaticTeamGroupResponse>;
    /**
     * @generated from protobuf rpc: CreateFilterGroup(CreateFilterGroupRequest) returns (CreateFilterGroupResponse);
     */
    createFilterGroup(input: CreateFilterGroupRequest, options?: RpcOptions): UnaryCall<CreateFilterGroupRequest, CreateFilterGroupResponse>;
    /**
     * @generated from protobuf rpc: UpdateGroup(UpdateGroupRequest) returns (UpdateGroupResponse);
     */
    updateGroup(input: UpdateGroupRequest, options?: RpcOptions): UnaryCall<UpdateGroupRequest, UpdateGroupResponse>;
    /**
     * @generated from protobuf rpc: DeleteGroup(DeleteGroupRequest) returns (google.protobuf.Empty);
     */
    deleteGroup(input: DeleteGroupRequest, options?: RpcOptions): UnaryCall<DeleteGroupRequest, Empty>;
}
/**
 * @generated from protobuf service GroupSerivce
 */
export class GroupSerivceClient implements IGroupSerivceClient, ServiceInfo {
    typeName = GroupSerivce.typeName;
    methods = GroupSerivce.methods;
    options = GroupSerivce.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetGroup(GetGroupRequest) returns (GetGroupResponse);
     */
    getGroup(input: GetGroupRequest, options?: RpcOptions): UnaryCall<GetGroupRequest, GetGroupResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetGroupRequest, GetGroupResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListGroups(ListGroupsRequest) returns (ListGroupsResponse);
     */
    listGroups(input: ListGroupsRequest, options?: RpcOptions): UnaryCall<ListGroupsRequest, ListGroupsResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListGroupsRequest, ListGroupsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateStaticUserGroup(CreateStaticUserGroupRequest) returns (CreateStaticUserGroupResponse);
     */
    createStaticUserGroup(input: CreateStaticUserGroupRequest, options?: RpcOptions): UnaryCall<CreateStaticUserGroupRequest, CreateStaticUserGroupResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateStaticUserGroupRequest, CreateStaticUserGroupResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateStaticTeamGroup(CreateStaticTeamGroupRequest) returns (CreateStaticTeamGroupResponse);
     */
    createStaticTeamGroup(input: CreateStaticTeamGroupRequest, options?: RpcOptions): UnaryCall<CreateStaticTeamGroupRequest, CreateStaticTeamGroupResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateStaticTeamGroupRequest, CreateStaticTeamGroupResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateFilterGroup(CreateFilterGroupRequest) returns (CreateFilterGroupResponse);
     */
    createFilterGroup(input: CreateFilterGroupRequest, options?: RpcOptions): UnaryCall<CreateFilterGroupRequest, CreateFilterGroupResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateFilterGroupRequest, CreateFilterGroupResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateGroup(UpdateGroupRequest) returns (UpdateGroupResponse);
     */
    updateGroup(input: UpdateGroupRequest, options?: RpcOptions): UnaryCall<UpdateGroupRequest, UpdateGroupResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateGroupRequest, UpdateGroupResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteGroup(DeleteGroupRequest) returns (google.protobuf.Empty);
     */
    deleteGroup(input: DeleteGroupRequest, options?: RpcOptions): UnaryCall<DeleteGroupRequest, Empty> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteGroupRequest, Empty>("unary", this._transport, method, opt, input);
    }
}
