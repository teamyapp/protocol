// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "teamy/app_version_service.proto" (syntax proto3)
// tslint:disable
import { Empty } from "../google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { AppVersionStatus } from "./message/app_version";
import { AppVersion } from "./message/app_version";
/**
 * @generated from protobuf message GetAppVersionRequest
 */
export interface GetAppVersionRequest {
    /**
     * @generated from protobuf field: uint64 appId = 1;
     */
    appId: number;
    /**
     * @generated from protobuf field: uint32 versionNumber = 2;
     */
    versionNumber: number;
}
/**
 * @generated from protobuf message GetAppVersionResponse
 */
export interface GetAppVersionResponse {
    /**
     * @generated from protobuf field: AppVersion appVersion = 1;
     */
    appVersion?: AppVersion;
}
/**
 * @generated from protobuf message ListAppVersionsRequest
 */
export interface ListAppVersionsRequest {
    /**
     * @generated from protobuf field: uint64 appId = 1;
     */
    appId: number;
}
/**
 * @generated from protobuf message ListAppVersionsResponse
 */
export interface ListAppVersionsResponse {
    /**
     * @generated from protobuf field: repeated AppVersion appVersions = 1;
     */
    appVersions: AppVersion[];
}
/**
 * @generated from protobuf message CreateAppVersionRequest
 */
export interface CreateAppVersionRequest {
    /**
     * @generated from protobuf field: uint64 appId = 1;
     */
    appId: number;
}
/**
 * @generated from protobuf message CreateAppVersionResponse
 */
export interface CreateAppVersionResponse {
    /**
     * @generated from protobuf field: AppVersion appVersion = 1;
     */
    appVersion?: AppVersion;
}
/**
 * @generated from protobuf message UpdateAppVersionRequest
 */
export interface UpdateAppVersionRequest {
    /**
     * @generated from protobuf field: uint64 appId = 1;
     */
    appId: number;
    /**
     * @generated from protobuf field: uint32 versionNumber = 2;
     */
    versionNumber: number;
    /**
     * @generated from protobuf field: optional AppVersionStatus status = 3;
     */
    status?: AppVersionStatus;
}
/**
 * @generated from protobuf message UpdateAppVersionResponse
 */
export interface UpdateAppVersionResponse {
    /**
     * @generated from protobuf field: AppVersion appVersion = 1;
     */
    appVersion?: AppVersion;
}
/**
 * @generated from protobuf message DeleteAppVersionRequest
 */
export interface DeleteAppVersionRequest {
    /**
     * @generated from protobuf field: uint64 appId = 1;
     */
    appId: number;
    /**
     * @generated from protobuf field: uint32 versionNumber = 2;
     */
    versionNumber: number;
}
/**
 * @generated from protobuf message CreateAppPackageUploadSessionRequest
 */
export interface CreateAppPackageUploadSessionRequest {
    /**
     * @generated from protobuf field: uint64 appId = 1;
     */
    appId: number;
    /**
     * @generated from protobuf field: uint32 versionNumber = 2;
     */
    versionNumber: number;
}
/**
 * @generated from protobuf message CreateAppPackageUploadSessionResponse
 */
export interface CreateAppPackageUploadSessionResponse {
    /**
     * @generated from protobuf field: string uploadSessionId = 1;
     */
    uploadSessionId: string;
}
/**
 * @generated from protobuf message FinishAppPackageUploadSessionRequest
 */
export interface FinishAppPackageUploadSessionRequest {
    /**
     * @generated from protobuf field: uint64 appId = 1;
     */
    appId: number;
    /**
     * @generated from protobuf field: uint32 versionNumber = 2;
     */
    versionNumber: number;
    /**
     * @generated from protobuf field: string uploadSessionId = 3;
     */
    uploadSessionId: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetAppVersionRequest$Type extends MessageType<GetAppVersionRequest> {
    constructor() {
        super("GetAppVersionRequest", [
            { no: 1, name: "appId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "versionNumber", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetAppVersionRequest>): GetAppVersionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.appId = 0;
        message.versionNumber = 0;
        if (value !== undefined)
            reflectionMergePartial<GetAppVersionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAppVersionRequest): GetAppVersionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 appId */ 1:
                    message.appId = reader.uint64().toNumber();
                    break;
                case /* uint32 versionNumber */ 2:
                    message.versionNumber = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAppVersionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 appId = 1; */
        if (message.appId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.appId);
        /* uint32 versionNumber = 2; */
        if (message.versionNumber !== 0)
            writer.tag(2, WireType.Varint).uint32(message.versionNumber);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetAppVersionRequest
 */
export const GetAppVersionRequest = new GetAppVersionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAppVersionResponse$Type extends MessageType<GetAppVersionResponse> {
    constructor() {
        super("GetAppVersionResponse", [
            { no: 1, name: "appVersion", kind: "message", T: () => AppVersion }
        ]);
    }
    create(value?: PartialMessage<GetAppVersionResponse>): GetAppVersionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetAppVersionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAppVersionResponse): GetAppVersionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* AppVersion appVersion */ 1:
                    message.appVersion = AppVersion.internalBinaryRead(reader, reader.uint32(), options, message.appVersion);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAppVersionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* AppVersion appVersion = 1; */
        if (message.appVersion)
            AppVersion.internalBinaryWrite(message.appVersion, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetAppVersionResponse
 */
export const GetAppVersionResponse = new GetAppVersionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListAppVersionsRequest$Type extends MessageType<ListAppVersionsRequest> {
    constructor() {
        super("ListAppVersionsRequest", [
            { no: 1, name: "appId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<ListAppVersionsRequest>): ListAppVersionsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.appId = 0;
        if (value !== undefined)
            reflectionMergePartial<ListAppVersionsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListAppVersionsRequest): ListAppVersionsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 appId */ 1:
                    message.appId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListAppVersionsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 appId = 1; */
        if (message.appId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.appId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListAppVersionsRequest
 */
export const ListAppVersionsRequest = new ListAppVersionsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListAppVersionsResponse$Type extends MessageType<ListAppVersionsResponse> {
    constructor() {
        super("ListAppVersionsResponse", [
            { no: 1, name: "appVersions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AppVersion }
        ]);
    }
    create(value?: PartialMessage<ListAppVersionsResponse>): ListAppVersionsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.appVersions = [];
        if (value !== undefined)
            reflectionMergePartial<ListAppVersionsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListAppVersionsResponse): ListAppVersionsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated AppVersion appVersions */ 1:
                    message.appVersions.push(AppVersion.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListAppVersionsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated AppVersion appVersions = 1; */
        for (let i = 0; i < message.appVersions.length; i++)
            AppVersion.internalBinaryWrite(message.appVersions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListAppVersionsResponse
 */
export const ListAppVersionsResponse = new ListAppVersionsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateAppVersionRequest$Type extends MessageType<CreateAppVersionRequest> {
    constructor() {
        super("CreateAppVersionRequest", [
            { no: 1, name: "appId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<CreateAppVersionRequest>): CreateAppVersionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.appId = 0;
        if (value !== undefined)
            reflectionMergePartial<CreateAppVersionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateAppVersionRequest): CreateAppVersionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 appId */ 1:
                    message.appId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateAppVersionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 appId = 1; */
        if (message.appId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.appId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateAppVersionRequest
 */
export const CreateAppVersionRequest = new CreateAppVersionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateAppVersionResponse$Type extends MessageType<CreateAppVersionResponse> {
    constructor() {
        super("CreateAppVersionResponse", [
            { no: 1, name: "appVersion", kind: "message", T: () => AppVersion }
        ]);
    }
    create(value?: PartialMessage<CreateAppVersionResponse>): CreateAppVersionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateAppVersionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateAppVersionResponse): CreateAppVersionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* AppVersion appVersion */ 1:
                    message.appVersion = AppVersion.internalBinaryRead(reader, reader.uint32(), options, message.appVersion);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateAppVersionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* AppVersion appVersion = 1; */
        if (message.appVersion)
            AppVersion.internalBinaryWrite(message.appVersion, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateAppVersionResponse
 */
export const CreateAppVersionResponse = new CreateAppVersionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateAppVersionRequest$Type extends MessageType<UpdateAppVersionRequest> {
    constructor() {
        super("UpdateAppVersionRequest", [
            { no: 1, name: "appId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "versionNumber", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "status", kind: "enum", opt: true, T: () => ["AppVersionStatus", AppVersionStatus, "APP_VERSION_STATUS_"] }
        ]);
    }
    create(value?: PartialMessage<UpdateAppVersionRequest>): UpdateAppVersionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.appId = 0;
        message.versionNumber = 0;
        if (value !== undefined)
            reflectionMergePartial<UpdateAppVersionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateAppVersionRequest): UpdateAppVersionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 appId */ 1:
                    message.appId = reader.uint64().toNumber();
                    break;
                case /* uint32 versionNumber */ 2:
                    message.versionNumber = reader.uint32();
                    break;
                case /* optional AppVersionStatus status */ 3:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateAppVersionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 appId = 1; */
        if (message.appId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.appId);
        /* uint32 versionNumber = 2; */
        if (message.versionNumber !== 0)
            writer.tag(2, WireType.Varint).uint32(message.versionNumber);
        /* optional AppVersionStatus status = 3; */
        if (message.status !== undefined)
            writer.tag(3, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateAppVersionRequest
 */
export const UpdateAppVersionRequest = new UpdateAppVersionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateAppVersionResponse$Type extends MessageType<UpdateAppVersionResponse> {
    constructor() {
        super("UpdateAppVersionResponse", [
            { no: 1, name: "appVersion", kind: "message", T: () => AppVersion }
        ]);
    }
    create(value?: PartialMessage<UpdateAppVersionResponse>): UpdateAppVersionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateAppVersionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateAppVersionResponse): UpdateAppVersionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* AppVersion appVersion */ 1:
                    message.appVersion = AppVersion.internalBinaryRead(reader, reader.uint32(), options, message.appVersion);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateAppVersionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* AppVersion appVersion = 1; */
        if (message.appVersion)
            AppVersion.internalBinaryWrite(message.appVersion, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateAppVersionResponse
 */
export const UpdateAppVersionResponse = new UpdateAppVersionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteAppVersionRequest$Type extends MessageType<DeleteAppVersionRequest> {
    constructor() {
        super("DeleteAppVersionRequest", [
            { no: 1, name: "appId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "versionNumber", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteAppVersionRequest>): DeleteAppVersionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.appId = 0;
        message.versionNumber = 0;
        if (value !== undefined)
            reflectionMergePartial<DeleteAppVersionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteAppVersionRequest): DeleteAppVersionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 appId */ 1:
                    message.appId = reader.uint64().toNumber();
                    break;
                case /* uint32 versionNumber */ 2:
                    message.versionNumber = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteAppVersionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 appId = 1; */
        if (message.appId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.appId);
        /* uint32 versionNumber = 2; */
        if (message.versionNumber !== 0)
            writer.tag(2, WireType.Varint).uint32(message.versionNumber);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteAppVersionRequest
 */
export const DeleteAppVersionRequest = new DeleteAppVersionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateAppPackageUploadSessionRequest$Type extends MessageType<CreateAppPackageUploadSessionRequest> {
    constructor() {
        super("CreateAppPackageUploadSessionRequest", [
            { no: 1, name: "appId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "versionNumber", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CreateAppPackageUploadSessionRequest>): CreateAppPackageUploadSessionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.appId = 0;
        message.versionNumber = 0;
        if (value !== undefined)
            reflectionMergePartial<CreateAppPackageUploadSessionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateAppPackageUploadSessionRequest): CreateAppPackageUploadSessionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 appId */ 1:
                    message.appId = reader.uint64().toNumber();
                    break;
                case /* uint32 versionNumber */ 2:
                    message.versionNumber = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateAppPackageUploadSessionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 appId = 1; */
        if (message.appId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.appId);
        /* uint32 versionNumber = 2; */
        if (message.versionNumber !== 0)
            writer.tag(2, WireType.Varint).uint32(message.versionNumber);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateAppPackageUploadSessionRequest
 */
export const CreateAppPackageUploadSessionRequest = new CreateAppPackageUploadSessionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateAppPackageUploadSessionResponse$Type extends MessageType<CreateAppPackageUploadSessionResponse> {
    constructor() {
        super("CreateAppPackageUploadSessionResponse", [
            { no: 1, name: "uploadSessionId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateAppPackageUploadSessionResponse>): CreateAppPackageUploadSessionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uploadSessionId = "";
        if (value !== undefined)
            reflectionMergePartial<CreateAppPackageUploadSessionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateAppPackageUploadSessionResponse): CreateAppPackageUploadSessionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string uploadSessionId */ 1:
                    message.uploadSessionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateAppPackageUploadSessionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string uploadSessionId = 1; */
        if (message.uploadSessionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.uploadSessionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateAppPackageUploadSessionResponse
 */
export const CreateAppPackageUploadSessionResponse = new CreateAppPackageUploadSessionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FinishAppPackageUploadSessionRequest$Type extends MessageType<FinishAppPackageUploadSessionRequest> {
    constructor() {
        super("FinishAppPackageUploadSessionRequest", [
            { no: 1, name: "appId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "versionNumber", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "uploadSessionId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FinishAppPackageUploadSessionRequest>): FinishAppPackageUploadSessionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.appId = 0;
        message.versionNumber = 0;
        message.uploadSessionId = "";
        if (value !== undefined)
            reflectionMergePartial<FinishAppPackageUploadSessionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FinishAppPackageUploadSessionRequest): FinishAppPackageUploadSessionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 appId */ 1:
                    message.appId = reader.uint64().toNumber();
                    break;
                case /* uint32 versionNumber */ 2:
                    message.versionNumber = reader.uint32();
                    break;
                case /* string uploadSessionId */ 3:
                    message.uploadSessionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FinishAppPackageUploadSessionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 appId = 1; */
        if (message.appId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.appId);
        /* uint32 versionNumber = 2; */
        if (message.versionNumber !== 0)
            writer.tag(2, WireType.Varint).uint32(message.versionNumber);
        /* string uploadSessionId = 3; */
        if (message.uploadSessionId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.uploadSessionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FinishAppPackageUploadSessionRequest
 */
export const FinishAppPackageUploadSessionRequest = new FinishAppPackageUploadSessionRequest$Type();
/**
 * @generated ServiceType for protobuf service AppVersionService
 */
export const AppVersionService = new ServiceType("AppVersionService", [
    { name: "GetAppVersion", options: {}, I: GetAppVersionRequest, O: GetAppVersionResponse },
    { name: "ListAppVersions", options: {}, I: ListAppVersionsRequest, O: ListAppVersionsResponse },
    { name: "CreateAppVersion", options: {}, I: CreateAppVersionRequest, O: CreateAppVersionResponse },
    { name: "UpdateAppVersion", options: {}, I: UpdateAppVersionRequest, O: UpdateAppVersionResponse },
    { name: "DeleteAppVersion", options: {}, I: DeleteAppVersionRequest, O: Empty },
    { name: "CreateAppPackageUploadSession", options: {}, I: CreateAppPackageUploadSessionRequest, O: CreateAppPackageUploadSessionResponse },
    { name: "FinishAppPackageUploadSession", options: {}, I: FinishAppPackageUploadSessionRequest, O: Empty }
]);
