// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "teamy/activator_service.proto" (syntax proto3)
// tslint:disable
import { Empty } from "../google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ActivatorType } from "./message/activator";
import { PercentageActivator } from "./message/activator";
import { MaxViewersActivator } from "./message/activator";
import { TimeRangeActivator } from "./message/activator";
import { Timestamp } from "../google/protobuf/timestamp";
import { StaticActivator } from "./message/activator";
import { Activator } from "./message/activator";
/**
 * @generated from protobuf message GetActivatorRequest
 */
export interface GetActivatorRequest {
    /**
     * @generated from protobuf field: uint64 activatorId = 1;
     */
    activatorId: number;
}
/**
 * @generated from protobuf message GetActivatorResponse
 */
export interface GetActivatorResponse {
    /**
     * @generated from protobuf field: Activator activator = 1;
     */
    activator?: Activator;
}
/**
 * @generated from protobuf message ListActivatorsRequest
 */
export interface ListActivatorsRequest {
    /**
     * @generated from protobuf field: repeated uint64 activatorIds = 1;
     */
    activatorIds: number[];
}
/**
 * @generated from protobuf message ListActivatorsResponse
 */
export interface ListActivatorsResponse {
    /**
     * @generated from protobuf field: repeated Activator activators = 1;
     */
    activators: Activator[];
}
/**
 * @generated from protobuf message CreateStaticActivatorResponse
 */
export interface CreateStaticActivatorResponse {
    /**
     * @generated from protobuf field: StaticActivator staticActivator = 1;
     */
    staticActivator?: StaticActivator;
}
/**
 * @generated from protobuf message CreateTimeRangeActivatorRequest
 */
export interface CreateTimeRangeActivatorRequest {
    /**
     * @generated from protobuf field: google.protobuf.Timestamp startAt = 1;
     */
    startAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp endAt = 2;
     */
    endAt?: Timestamp;
}
/**
 * @generated from protobuf message CreateTimeRangeActivatorResponse
 */
export interface CreateTimeRangeActivatorResponse {
    /**
     * @generated from protobuf field: TimeRangeActivator timeRangeActivator = 1;
     */
    timeRangeActivator?: TimeRangeActivator;
}
/**
 * @generated from protobuf message CreateMaxViewersActivatorRequest
 */
export interface CreateMaxViewersActivatorRequest {
    /**
     * @generated from protobuf field: int32 maxViewer = 1;
     */
    maxViewer: number;
}
/**
 * @generated from protobuf message CreateMaxViewersActivatorResponse
 */
export interface CreateMaxViewersActivatorResponse {
    /**
     * @generated from protobuf field: MaxViewersActivator maxViewersActivator = 1;
     */
    maxViewersActivator?: MaxViewersActivator;
}
/**
 * @generated from protobuf message CreatePercentageActivatorRequest
 */
export interface CreatePercentageActivatorRequest {
    /**
     * @generated from protobuf field: int32 percentage = 1;
     */
    percentage: number;
}
/**
 * @generated from protobuf message CreatePercentageActivatorResponse
 */
export interface CreatePercentageActivatorResponse {
    /**
     * @generated from protobuf field: PercentageActivator percentageActivator = 1;
     */
    percentageActivator?: PercentageActivator;
}
/**
 * @generated from protobuf message UpdateActivatorRequest
 */
export interface UpdateActivatorRequest {
    /**
     * @generated from protobuf field: uint64 activatorId = 1;
     */
    activatorId: number;
    /**
     * @generated from protobuf field: ActivatorType type = 2;
     */
    type: ActivatorType;
    /**
     * @generated from protobuf field: optional google.protobuf.Timestamp startAt = 3;
     */
    startAt?: Timestamp;
    /**
     * @generated from protobuf field: optional google.protobuf.Timestamp endAt = 4;
     */
    endAt?: Timestamp;
    /**
     * @generated from protobuf field: optional int32 maxViewer = 5;
     */
    maxViewer?: number;
    /**
     * @generated from protobuf field: optional int32 percentage = 6;
     */
    percentage?: number;
}
/**
 * @generated from protobuf message UpdateActivatorResponse
 */
export interface UpdateActivatorResponse {
    /**
     * @generated from protobuf field: Activator activator = 1;
     */
    activator?: Activator;
}
/**
 * @generated from protobuf message DeleteActivatorRequest
 */
export interface DeleteActivatorRequest {
    /**
     * @generated from protobuf field: uint64 activatorId = 1;
     */
    activatorId: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetActivatorRequest$Type extends MessageType<GetActivatorRequest> {
    constructor() {
        super("GetActivatorRequest", [
            { no: 1, name: "activatorId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<GetActivatorRequest>): GetActivatorRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.activatorId = 0;
        if (value !== undefined)
            reflectionMergePartial<GetActivatorRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetActivatorRequest): GetActivatorRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 activatorId */ 1:
                    message.activatorId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetActivatorRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 activatorId = 1; */
        if (message.activatorId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.activatorId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetActivatorRequest
 */
export const GetActivatorRequest = new GetActivatorRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetActivatorResponse$Type extends MessageType<GetActivatorResponse> {
    constructor() {
        super("GetActivatorResponse", [
            { no: 1, name: "activator", kind: "message", T: () => Activator }
        ]);
    }
    create(value?: PartialMessage<GetActivatorResponse>): GetActivatorResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetActivatorResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetActivatorResponse): GetActivatorResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Activator activator */ 1:
                    message.activator = Activator.internalBinaryRead(reader, reader.uint32(), options, message.activator);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetActivatorResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Activator activator = 1; */
        if (message.activator)
            Activator.internalBinaryWrite(message.activator, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetActivatorResponse
 */
export const GetActivatorResponse = new GetActivatorResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListActivatorsRequest$Type extends MessageType<ListActivatorsRequest> {
    constructor() {
        super("ListActivatorsRequest", [
            { no: 1, name: "activatorIds", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<ListActivatorsRequest>): ListActivatorsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.activatorIds = [];
        if (value !== undefined)
            reflectionMergePartial<ListActivatorsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListActivatorsRequest): ListActivatorsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint64 activatorIds */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.activatorIds.push(reader.uint64().toNumber());
                    else
                        message.activatorIds.push(reader.uint64().toNumber());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListActivatorsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint64 activatorIds = 1; */
        if (message.activatorIds.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.activatorIds.length; i++)
                writer.uint64(message.activatorIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListActivatorsRequest
 */
export const ListActivatorsRequest = new ListActivatorsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListActivatorsResponse$Type extends MessageType<ListActivatorsResponse> {
    constructor() {
        super("ListActivatorsResponse", [
            { no: 1, name: "activators", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Activator }
        ]);
    }
    create(value?: PartialMessage<ListActivatorsResponse>): ListActivatorsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.activators = [];
        if (value !== undefined)
            reflectionMergePartial<ListActivatorsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListActivatorsResponse): ListActivatorsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Activator activators */ 1:
                    message.activators.push(Activator.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListActivatorsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Activator activators = 1; */
        for (let i = 0; i < message.activators.length; i++)
            Activator.internalBinaryWrite(message.activators[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListActivatorsResponse
 */
export const ListActivatorsResponse = new ListActivatorsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateStaticActivatorResponse$Type extends MessageType<CreateStaticActivatorResponse> {
    constructor() {
        super("CreateStaticActivatorResponse", [
            { no: 1, name: "staticActivator", kind: "message", T: () => StaticActivator }
        ]);
    }
    create(value?: PartialMessage<CreateStaticActivatorResponse>): CreateStaticActivatorResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateStaticActivatorResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateStaticActivatorResponse): CreateStaticActivatorResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* StaticActivator staticActivator */ 1:
                    message.staticActivator = StaticActivator.internalBinaryRead(reader, reader.uint32(), options, message.staticActivator);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateStaticActivatorResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* StaticActivator staticActivator = 1; */
        if (message.staticActivator)
            StaticActivator.internalBinaryWrite(message.staticActivator, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateStaticActivatorResponse
 */
export const CreateStaticActivatorResponse = new CreateStaticActivatorResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateTimeRangeActivatorRequest$Type extends MessageType<CreateTimeRangeActivatorRequest> {
    constructor() {
        super("CreateTimeRangeActivatorRequest", [
            { no: 1, name: "startAt", kind: "message", T: () => Timestamp },
            { no: 2, name: "endAt", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<CreateTimeRangeActivatorRequest>): CreateTimeRangeActivatorRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateTimeRangeActivatorRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateTimeRangeActivatorRequest): CreateTimeRangeActivatorRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp startAt */ 1:
                    message.startAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.startAt);
                    break;
                case /* google.protobuf.Timestamp endAt */ 2:
                    message.endAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.endAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateTimeRangeActivatorRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp startAt = 1; */
        if (message.startAt)
            Timestamp.internalBinaryWrite(message.startAt, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp endAt = 2; */
        if (message.endAt)
            Timestamp.internalBinaryWrite(message.endAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateTimeRangeActivatorRequest
 */
export const CreateTimeRangeActivatorRequest = new CreateTimeRangeActivatorRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateTimeRangeActivatorResponse$Type extends MessageType<CreateTimeRangeActivatorResponse> {
    constructor() {
        super("CreateTimeRangeActivatorResponse", [
            { no: 1, name: "timeRangeActivator", kind: "message", T: () => TimeRangeActivator }
        ]);
    }
    create(value?: PartialMessage<CreateTimeRangeActivatorResponse>): CreateTimeRangeActivatorResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateTimeRangeActivatorResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateTimeRangeActivatorResponse): CreateTimeRangeActivatorResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* TimeRangeActivator timeRangeActivator */ 1:
                    message.timeRangeActivator = TimeRangeActivator.internalBinaryRead(reader, reader.uint32(), options, message.timeRangeActivator);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateTimeRangeActivatorResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* TimeRangeActivator timeRangeActivator = 1; */
        if (message.timeRangeActivator)
            TimeRangeActivator.internalBinaryWrite(message.timeRangeActivator, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateTimeRangeActivatorResponse
 */
export const CreateTimeRangeActivatorResponse = new CreateTimeRangeActivatorResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateMaxViewersActivatorRequest$Type extends MessageType<CreateMaxViewersActivatorRequest> {
    constructor() {
        super("CreateMaxViewersActivatorRequest", [
            { no: 1, name: "maxViewer", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CreateMaxViewersActivatorRequest>): CreateMaxViewersActivatorRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.maxViewer = 0;
        if (value !== undefined)
            reflectionMergePartial<CreateMaxViewersActivatorRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateMaxViewersActivatorRequest): CreateMaxViewersActivatorRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 maxViewer */ 1:
                    message.maxViewer = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateMaxViewersActivatorRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 maxViewer = 1; */
        if (message.maxViewer !== 0)
            writer.tag(1, WireType.Varint).int32(message.maxViewer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateMaxViewersActivatorRequest
 */
export const CreateMaxViewersActivatorRequest = new CreateMaxViewersActivatorRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateMaxViewersActivatorResponse$Type extends MessageType<CreateMaxViewersActivatorResponse> {
    constructor() {
        super("CreateMaxViewersActivatorResponse", [
            { no: 1, name: "maxViewersActivator", kind: "message", T: () => MaxViewersActivator }
        ]);
    }
    create(value?: PartialMessage<CreateMaxViewersActivatorResponse>): CreateMaxViewersActivatorResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateMaxViewersActivatorResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateMaxViewersActivatorResponse): CreateMaxViewersActivatorResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MaxViewersActivator maxViewersActivator */ 1:
                    message.maxViewersActivator = MaxViewersActivator.internalBinaryRead(reader, reader.uint32(), options, message.maxViewersActivator);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateMaxViewersActivatorResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MaxViewersActivator maxViewersActivator = 1; */
        if (message.maxViewersActivator)
            MaxViewersActivator.internalBinaryWrite(message.maxViewersActivator, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateMaxViewersActivatorResponse
 */
export const CreateMaxViewersActivatorResponse = new CreateMaxViewersActivatorResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreatePercentageActivatorRequest$Type extends MessageType<CreatePercentageActivatorRequest> {
    constructor() {
        super("CreatePercentageActivatorRequest", [
            { no: 1, name: "percentage", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CreatePercentageActivatorRequest>): CreatePercentageActivatorRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.percentage = 0;
        if (value !== undefined)
            reflectionMergePartial<CreatePercentageActivatorRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreatePercentageActivatorRequest): CreatePercentageActivatorRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 percentage */ 1:
                    message.percentage = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreatePercentageActivatorRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 percentage = 1; */
        if (message.percentage !== 0)
            writer.tag(1, WireType.Varint).int32(message.percentage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreatePercentageActivatorRequest
 */
export const CreatePercentageActivatorRequest = new CreatePercentageActivatorRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreatePercentageActivatorResponse$Type extends MessageType<CreatePercentageActivatorResponse> {
    constructor() {
        super("CreatePercentageActivatorResponse", [
            { no: 1, name: "percentageActivator", kind: "message", T: () => PercentageActivator }
        ]);
    }
    create(value?: PartialMessage<CreatePercentageActivatorResponse>): CreatePercentageActivatorResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreatePercentageActivatorResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreatePercentageActivatorResponse): CreatePercentageActivatorResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PercentageActivator percentageActivator */ 1:
                    message.percentageActivator = PercentageActivator.internalBinaryRead(reader, reader.uint32(), options, message.percentageActivator);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreatePercentageActivatorResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PercentageActivator percentageActivator = 1; */
        if (message.percentageActivator)
            PercentageActivator.internalBinaryWrite(message.percentageActivator, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreatePercentageActivatorResponse
 */
export const CreatePercentageActivatorResponse = new CreatePercentageActivatorResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateActivatorRequest$Type extends MessageType<UpdateActivatorRequest> {
    constructor() {
        super("UpdateActivatorRequest", [
            { no: 1, name: "activatorId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "type", kind: "enum", T: () => ["ActivatorType", ActivatorType] },
            { no: 3, name: "startAt", kind: "message", T: () => Timestamp },
            { no: 4, name: "endAt", kind: "message", T: () => Timestamp },
            { no: 5, name: "maxViewer", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "percentage", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateActivatorRequest>): UpdateActivatorRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.activatorId = 0;
        message.type = 0;
        if (value !== undefined)
            reflectionMergePartial<UpdateActivatorRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateActivatorRequest): UpdateActivatorRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 activatorId */ 1:
                    message.activatorId = reader.uint64().toNumber();
                    break;
                case /* ActivatorType type */ 2:
                    message.type = reader.int32();
                    break;
                case /* optional google.protobuf.Timestamp startAt */ 3:
                    message.startAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.startAt);
                    break;
                case /* optional google.protobuf.Timestamp endAt */ 4:
                    message.endAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.endAt);
                    break;
                case /* optional int32 maxViewer */ 5:
                    message.maxViewer = reader.int32();
                    break;
                case /* optional int32 percentage */ 6:
                    message.percentage = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateActivatorRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 activatorId = 1; */
        if (message.activatorId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.activatorId);
        /* ActivatorType type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* optional google.protobuf.Timestamp startAt = 3; */
        if (message.startAt)
            Timestamp.internalBinaryWrite(message.startAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional google.protobuf.Timestamp endAt = 4; */
        if (message.endAt)
            Timestamp.internalBinaryWrite(message.endAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 maxViewer = 5; */
        if (message.maxViewer !== undefined)
            writer.tag(5, WireType.Varint).int32(message.maxViewer);
        /* optional int32 percentage = 6; */
        if (message.percentage !== undefined)
            writer.tag(6, WireType.Varint).int32(message.percentage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateActivatorRequest
 */
export const UpdateActivatorRequest = new UpdateActivatorRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateActivatorResponse$Type extends MessageType<UpdateActivatorResponse> {
    constructor() {
        super("UpdateActivatorResponse", [
            { no: 1, name: "activator", kind: "message", T: () => Activator }
        ]);
    }
    create(value?: PartialMessage<UpdateActivatorResponse>): UpdateActivatorResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateActivatorResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateActivatorResponse): UpdateActivatorResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Activator activator */ 1:
                    message.activator = Activator.internalBinaryRead(reader, reader.uint32(), options, message.activator);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateActivatorResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Activator activator = 1; */
        if (message.activator)
            Activator.internalBinaryWrite(message.activator, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateActivatorResponse
 */
export const UpdateActivatorResponse = new UpdateActivatorResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteActivatorRequest$Type extends MessageType<DeleteActivatorRequest> {
    constructor() {
        super("DeleteActivatorRequest", [
            { no: 1, name: "activatorId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteActivatorRequest>): DeleteActivatorRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.activatorId = 0;
        if (value !== undefined)
            reflectionMergePartial<DeleteActivatorRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteActivatorRequest): DeleteActivatorRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 activatorId */ 1:
                    message.activatorId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteActivatorRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 activatorId = 1; */
        if (message.activatorId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.activatorId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteActivatorRequest
 */
export const DeleteActivatorRequest = new DeleteActivatorRequest$Type();
/**
 * @generated ServiceType for protobuf service ActivatorService
 */
export const ActivatorService = new ServiceType("ActivatorService", [
    { name: "GetActivator", options: {}, I: GetActivatorRequest, O: GetActivatorResponse },
    { name: "ListActivators", options: {}, I: ListActivatorsRequest, O: ListActivatorsResponse },
    { name: "CreateStaticActivator", options: {}, I: Empty, O: CreateStaticActivatorResponse },
    { name: "CreateTimeRangeActivator", options: {}, I: CreateTimeRangeActivatorRequest, O: CreateTimeRangeActivatorResponse },
    { name: "CreateMaxViewersActivator", options: {}, I: CreateMaxViewersActivatorRequest, O: CreateMaxViewersActivatorResponse },
    { name: "CreatePercentageActivator", options: {}, I: CreatePercentageActivatorRequest, O: CreatePercentageActivatorResponse },
    { name: "UpdateActivator", options: {}, I: UpdateActivatorRequest, O: UpdateActivatorResponse },
    { name: "DeleteActivator", options: {}, I: DeleteActivatorRequest, O: Empty }
]);
