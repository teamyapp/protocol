// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "teamy/attachment_service.proto" (syntax proto3)
// tslint:disable
import { Empty } from "../google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { AttachmentList } from "./message/attachment_list";
import { Attachment } from "./message/attachment";
/**
 * @generated from protobuf message GetAttachmentRequest
 */
export interface GetAttachmentRequest {
    /**
     * @generated from protobuf field: uint64 attachmentId = 1;
     */
    attachmentId: number;
}
/**
 * @generated from protobuf message GetAttachmentResponse
 */
export interface GetAttachmentResponse {
    /**
     * @generated from protobuf field: Attachment attachment = 1;
     */
    attachment?: Attachment;
}
/**
 * @generated from protobuf message GetAttachmentListRequest
 */
export interface GetAttachmentListRequest {
    /**
     * @generated from protobuf field: uint64 attachmentListId = 1;
     */
    attachmentListId: number;
}
/**
 * @generated from protobuf message GetAttachmentListResponse
 */
export interface GetAttachmentListResponse {
    /**
     * @generated from protobuf field: AttachmentList attachmentList = 1;
     */
    attachmentList?: AttachmentList;
}
/**
 * @generated from protobuf message ListAttachmentsRequest
 */
export interface ListAttachmentsRequest {
    /**
     * @generated from protobuf field: repeated uint64 attachmentIds = 1;
     */
    attachmentIds: number[];
    /**
     * @generated from protobuf field: optional uint64 attachmentListId = 2;
     */
    attachmentListId?: number;
}
/**
 * @generated from protobuf message ListAttachmentsResponse
 */
export interface ListAttachmentsResponse {
    /**
     * @generated from protobuf field: repeated Attachment attachments = 1;
     */
    attachments: Attachment[];
}
/**
 * @generated from protobuf message CreateAttachmentListFileUploadSessionRequest
 */
export interface CreateAttachmentListFileUploadSessionRequest {
    /**
     * @generated from protobuf field: uint64 attachmentListId = 1;
     */
    attachmentListId: number;
}
/**
 * @generated from protobuf message CreateAttachmentListFileUploadSessionResponse
 */
export interface CreateAttachmentListFileUploadSessionResponse {
    /**
     * @generated from protobuf field: uint64 uploadSessionId = 1;
     */
    uploadSessionId: number;
}
/**
 * @generated from protobuf message FinishAttachmentListFileUploadSessionRequest
 */
export interface FinishAttachmentListFileUploadSessionRequest {
    /**
     * @generated from protobuf field: uint64 attachmentListId = 1;
     */
    attachmentListId: number;
    /**
     * @generated from protobuf field: uint64 uploadSessionId = 2;
     */
    uploadSessionId: number;
}
/**
 * @generated from protobuf message FinishAttachmentListFileUploadSessionResponse
 */
export interface FinishAttachmentListFileUploadSessionResponse {
    /**
     * @generated from protobuf field: AttachmentList attachmentList = 1;
     */
    attachmentList?: AttachmentList;
}
/**
 * @generated from protobuf message DeleteAttachmentListFileRequest
 */
export interface DeleteAttachmentListFileRequest {
    /**
     * @generated from protobuf field: uint64 attachmentId = 1;
     */
    attachmentId: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetAttachmentRequest$Type extends MessageType<GetAttachmentRequest> {
    constructor() {
        super("GetAttachmentRequest", [
            { no: 1, name: "attachmentId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<GetAttachmentRequest>): GetAttachmentRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.attachmentId = 0;
        if (value !== undefined)
            reflectionMergePartial<GetAttachmentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAttachmentRequest): GetAttachmentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 attachmentId */ 1:
                    message.attachmentId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAttachmentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 attachmentId = 1; */
        if (message.attachmentId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.attachmentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetAttachmentRequest
 */
export const GetAttachmentRequest = new GetAttachmentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAttachmentResponse$Type extends MessageType<GetAttachmentResponse> {
    constructor() {
        super("GetAttachmentResponse", [
            { no: 1, name: "attachment", kind: "message", T: () => Attachment }
        ]);
    }
    create(value?: PartialMessage<GetAttachmentResponse>): GetAttachmentResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetAttachmentResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAttachmentResponse): GetAttachmentResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Attachment attachment */ 1:
                    message.attachment = Attachment.internalBinaryRead(reader, reader.uint32(), options, message.attachment);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAttachmentResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Attachment attachment = 1; */
        if (message.attachment)
            Attachment.internalBinaryWrite(message.attachment, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetAttachmentResponse
 */
export const GetAttachmentResponse = new GetAttachmentResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAttachmentListRequest$Type extends MessageType<GetAttachmentListRequest> {
    constructor() {
        super("GetAttachmentListRequest", [
            { no: 1, name: "attachmentListId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<GetAttachmentListRequest>): GetAttachmentListRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.attachmentListId = 0;
        if (value !== undefined)
            reflectionMergePartial<GetAttachmentListRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAttachmentListRequest): GetAttachmentListRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 attachmentListId */ 1:
                    message.attachmentListId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAttachmentListRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 attachmentListId = 1; */
        if (message.attachmentListId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.attachmentListId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetAttachmentListRequest
 */
export const GetAttachmentListRequest = new GetAttachmentListRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAttachmentListResponse$Type extends MessageType<GetAttachmentListResponse> {
    constructor() {
        super("GetAttachmentListResponse", [
            { no: 1, name: "attachmentList", kind: "message", T: () => AttachmentList }
        ]);
    }
    create(value?: PartialMessage<GetAttachmentListResponse>): GetAttachmentListResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetAttachmentListResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAttachmentListResponse): GetAttachmentListResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* AttachmentList attachmentList */ 1:
                    message.attachmentList = AttachmentList.internalBinaryRead(reader, reader.uint32(), options, message.attachmentList);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAttachmentListResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* AttachmentList attachmentList = 1; */
        if (message.attachmentList)
            AttachmentList.internalBinaryWrite(message.attachmentList, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetAttachmentListResponse
 */
export const GetAttachmentListResponse = new GetAttachmentListResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListAttachmentsRequest$Type extends MessageType<ListAttachmentsRequest> {
    constructor() {
        super("ListAttachmentsRequest", [
            { no: 1, name: "attachmentIds", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "attachmentListId", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<ListAttachmentsRequest>): ListAttachmentsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.attachmentIds = [];
        if (value !== undefined)
            reflectionMergePartial<ListAttachmentsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListAttachmentsRequest): ListAttachmentsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint64 attachmentIds */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.attachmentIds.push(reader.uint64().toNumber());
                    else
                        message.attachmentIds.push(reader.uint64().toNumber());
                    break;
                case /* optional uint64 attachmentListId */ 2:
                    message.attachmentListId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListAttachmentsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint64 attachmentIds = 1; */
        if (message.attachmentIds.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.attachmentIds.length; i++)
                writer.uint64(message.attachmentIds[i]);
            writer.join();
        }
        /* optional uint64 attachmentListId = 2; */
        if (message.attachmentListId !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.attachmentListId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListAttachmentsRequest
 */
export const ListAttachmentsRequest = new ListAttachmentsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListAttachmentsResponse$Type extends MessageType<ListAttachmentsResponse> {
    constructor() {
        super("ListAttachmentsResponse", [
            { no: 1, name: "attachments", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Attachment }
        ]);
    }
    create(value?: PartialMessage<ListAttachmentsResponse>): ListAttachmentsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.attachments = [];
        if (value !== undefined)
            reflectionMergePartial<ListAttachmentsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListAttachmentsResponse): ListAttachmentsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Attachment attachments */ 1:
                    message.attachments.push(Attachment.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListAttachmentsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Attachment attachments = 1; */
        for (let i = 0; i < message.attachments.length; i++)
            Attachment.internalBinaryWrite(message.attachments[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListAttachmentsResponse
 */
export const ListAttachmentsResponse = new ListAttachmentsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateAttachmentListFileUploadSessionRequest$Type extends MessageType<CreateAttachmentListFileUploadSessionRequest> {
    constructor() {
        super("CreateAttachmentListFileUploadSessionRequest", [
            { no: 1, name: "attachmentListId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<CreateAttachmentListFileUploadSessionRequest>): CreateAttachmentListFileUploadSessionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.attachmentListId = 0;
        if (value !== undefined)
            reflectionMergePartial<CreateAttachmentListFileUploadSessionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateAttachmentListFileUploadSessionRequest): CreateAttachmentListFileUploadSessionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 attachmentListId */ 1:
                    message.attachmentListId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateAttachmentListFileUploadSessionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 attachmentListId = 1; */
        if (message.attachmentListId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.attachmentListId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateAttachmentListFileUploadSessionRequest
 */
export const CreateAttachmentListFileUploadSessionRequest = new CreateAttachmentListFileUploadSessionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateAttachmentListFileUploadSessionResponse$Type extends MessageType<CreateAttachmentListFileUploadSessionResponse> {
    constructor() {
        super("CreateAttachmentListFileUploadSessionResponse", [
            { no: 1, name: "uploadSessionId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<CreateAttachmentListFileUploadSessionResponse>): CreateAttachmentListFileUploadSessionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uploadSessionId = 0;
        if (value !== undefined)
            reflectionMergePartial<CreateAttachmentListFileUploadSessionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateAttachmentListFileUploadSessionResponse): CreateAttachmentListFileUploadSessionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 uploadSessionId */ 1:
                    message.uploadSessionId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateAttachmentListFileUploadSessionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 uploadSessionId = 1; */
        if (message.uploadSessionId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.uploadSessionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateAttachmentListFileUploadSessionResponse
 */
export const CreateAttachmentListFileUploadSessionResponse = new CreateAttachmentListFileUploadSessionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FinishAttachmentListFileUploadSessionRequest$Type extends MessageType<FinishAttachmentListFileUploadSessionRequest> {
    constructor() {
        super("FinishAttachmentListFileUploadSessionRequest", [
            { no: 1, name: "attachmentListId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "uploadSessionId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<FinishAttachmentListFileUploadSessionRequest>): FinishAttachmentListFileUploadSessionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.attachmentListId = 0;
        message.uploadSessionId = 0;
        if (value !== undefined)
            reflectionMergePartial<FinishAttachmentListFileUploadSessionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FinishAttachmentListFileUploadSessionRequest): FinishAttachmentListFileUploadSessionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 attachmentListId */ 1:
                    message.attachmentListId = reader.uint64().toNumber();
                    break;
                case /* uint64 uploadSessionId */ 2:
                    message.uploadSessionId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FinishAttachmentListFileUploadSessionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 attachmentListId = 1; */
        if (message.attachmentListId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.attachmentListId);
        /* uint64 uploadSessionId = 2; */
        if (message.uploadSessionId !== 0)
            writer.tag(2, WireType.Varint).uint64(message.uploadSessionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FinishAttachmentListFileUploadSessionRequest
 */
export const FinishAttachmentListFileUploadSessionRequest = new FinishAttachmentListFileUploadSessionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FinishAttachmentListFileUploadSessionResponse$Type extends MessageType<FinishAttachmentListFileUploadSessionResponse> {
    constructor() {
        super("FinishAttachmentListFileUploadSessionResponse", [
            { no: 1, name: "attachmentList", kind: "message", T: () => AttachmentList }
        ]);
    }
    create(value?: PartialMessage<FinishAttachmentListFileUploadSessionResponse>): FinishAttachmentListFileUploadSessionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<FinishAttachmentListFileUploadSessionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FinishAttachmentListFileUploadSessionResponse): FinishAttachmentListFileUploadSessionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* AttachmentList attachmentList */ 1:
                    message.attachmentList = AttachmentList.internalBinaryRead(reader, reader.uint32(), options, message.attachmentList);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FinishAttachmentListFileUploadSessionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* AttachmentList attachmentList = 1; */
        if (message.attachmentList)
            AttachmentList.internalBinaryWrite(message.attachmentList, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FinishAttachmentListFileUploadSessionResponse
 */
export const FinishAttachmentListFileUploadSessionResponse = new FinishAttachmentListFileUploadSessionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteAttachmentListFileRequest$Type extends MessageType<DeleteAttachmentListFileRequest> {
    constructor() {
        super("DeleteAttachmentListFileRequest", [
            { no: 1, name: "attachmentId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteAttachmentListFileRequest>): DeleteAttachmentListFileRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.attachmentId = 0;
        if (value !== undefined)
            reflectionMergePartial<DeleteAttachmentListFileRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteAttachmentListFileRequest): DeleteAttachmentListFileRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 attachmentId */ 1:
                    message.attachmentId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteAttachmentListFileRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 attachmentId = 1; */
        if (message.attachmentId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.attachmentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteAttachmentListFileRequest
 */
export const DeleteAttachmentListFileRequest = new DeleteAttachmentListFileRequest$Type();
/**
 * @generated ServiceType for protobuf service AttachmentService
 */
export const AttachmentService = new ServiceType("AttachmentService", [
    { name: "GetAttachment", options: {}, I: GetAttachmentRequest, O: GetAttachmentResponse },
    { name: "GetAttachmentList", options: {}, I: GetAttachmentListRequest, O: GetAttachmentListResponse },
    { name: "ListAttachments", options: {}, I: ListAttachmentsRequest, O: ListAttachmentsResponse },
    { name: "CreateAttachmentListFileUploadSession", options: {}, I: CreateAttachmentListFileUploadSessionRequest, O: CreateAttachmentListFileUploadSessionResponse },
    { name: "FinishAttachmentListFileUploadSession", options: {}, I: FinishAttachmentListFileUploadSessionRequest, O: FinishAttachmentListFileUploadSessionResponse },
    { name: "DeleteAttachmentListFile", options: {}, I: DeleteAttachmentListFileRequest, O: Empty }
]);
