// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "teamy/task_service.proto" (syntax proto3)
// tslint:disable
import { Empty } from "../google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Priority } from "./message/priority";
import { Duration } from "../google/protobuf/duration";
import { Timestamp } from "../google/protobuf/timestamp";
import { TaskStatus } from "./message/task";
import { Task } from "./message/task";
/**
 * @generated from protobuf message GetTaskRequest
 */
export interface GetTaskRequest {
    /**
     * @generated from protobuf field: uint64 taskId = 1;
     */
    taskId: number;
}
/**
 * @generated from protobuf message GetTaskResponse
 */
export interface GetTaskResponse {
    /**
     * @generated from protobuf field: Task task = 1;
     */
    task?: Task;
}
/**
 * @generated from protobuf message GetAwaitForTasksRequest
 */
export interface GetAwaitForTasksRequest {
    /**
     * @generated from protobuf field: uint64 AwaitingTaskId = 1 [json_name = "AwaitingTaskId"];
     */
    awaitingTaskId: number;
}
/**
 * @generated from protobuf message GetAwaitForTasksResponse
 */
export interface GetAwaitForTasksResponse {
    /**
     * @generated from protobuf field: repeated Task tasks = 1;
     */
    tasks: Task[];
}
/**
 * @generated from protobuf message ListTasksRequest
 */
export interface ListTasksRequest {
    /**
     * @generated from protobuf field: repeated uint64 taskIds = 1;
     */
    taskIds: number[];
    /**
     * @generated from protobuf field: optional uint64 ownerId = 3;
     */
    ownerId?: number;
    /**
     * @generated from protobuf field: optional string goalContains = 4;
     */
    goalContains?: string;
    /**
     * @generated from protobuf field: optional TaskStatus status = 5;
     */
    status?: TaskStatus;
    /**
     * @generated from protobuf field: optional uint64 isScheduled = 6;
     */
    isScheduled?: number;
    /**
     * @generated from protobuf field: optional uint64 isPlanned = 7;
     */
    isPlanned?: number;
}
/**
 * @generated from protobuf message ListTasksResponse
 */
export interface ListTasksResponse {
    /**
     * @generated from protobuf field: repeated Task tasks = 1;
     */
    tasks: Task[];
}
/**
 * @generated from protobuf message CreateTaskRequest
 */
export interface CreateTaskRequest {
    /**
     * @generated from protobuf field: uint64 teamId = 1;
     */
    teamId: number;
    /**
     * @generated from protobuf field: string goal = 2;
     */
    goal: string;
    /**
     * @generated from protobuf field: optional string context = 3;
     */
    context?: string;
    /**
     * @generated from protobuf field: optional uint64 ownerUserId = 4;
     */
    ownerUserId?: number;
    /**
     * @generated from protobuf field: optional google.protobuf.Timestamp dueAt = 5;
     */
    dueAt?: Timestamp;
}
/**
 * @generated from protobuf message CreateTaskResponse
 */
export interface CreateTaskResponse {
    /**
     * @generated from protobuf field: uint64 taskId = 1;
     */
    taskId: number;
}
/**
 * @generated from protobuf message UpdateTaskRequest
 */
export interface UpdateTaskRequest {
    /**
     * @generated from protobuf field: uint64 taskId = 1;
     */
    taskId: number;
    /**
     * @generated from protobuf field: optional string goal = 2;
     */
    goal?: string;
    /**
     * @generated from protobuf field: optional string context = 3;
     */
    context?: string;
    /**
     * @generated from protobuf field: optional uint64 ownerUserId = 4;
     */
    ownerUserId?: number;
    /**
     * @generated from protobuf field: optional uint64 owningTeamId = 5;
     */
    owningTeamId?: number;
    /**
     * @generated from protobuf field: optional google.protobuf.Duration effort = 6;
     */
    effort?: Duration;
    /**
     * @generated from protobuf field: optional google.protobuf.Timestamp dueAt = 7;
     */
    dueAt?: Timestamp;
    /**
     * @generated from protobuf field: optional Priority priority = 8;
     */
    priority?: Priority;
}
/**
 * @generated from protobuf message UpdateTaskResponse
 */
export interface UpdateTaskResponse {
    /**
     * @generated from protobuf field: Task task = 1;
     */
    task?: Task;
}
/**
 * @generated from protobuf message DeleteTaskRequest
 */
export interface DeleteTaskRequest {
    /**
     * @generated from protobuf field: uint64 taskId = 1;
     */
    taskId: number;
}
/**
 * @generated from protobuf message MoveTaskToUpcomingRequest
 */
export interface MoveTaskToUpcomingRequest {
    /**
     * @generated from protobuf field: uint64 taskId = 1;
     */
    taskId: number;
}
/**
 * @generated from protobuf message MoveTaskToInProgressRequest
 */
export interface MoveTaskToInProgressRequest {
    /**
     * @generated from protobuf field: uint64 taskId = 1;
     */
    taskId: number;
}
/**
 * @generated from protobuf message MoveTaskToDeliveredRequest
 */
export interface MoveTaskToDeliveredRequest {
    /**
     * @generated from protobuf field: uint64 taskId = 1;
     */
    taskId: number;
}
/**
 * @generated from protobuf message MoveTaskToBlockedRequest
 */
export interface MoveTaskToBlockedRequest {
    /**
     * @generated from protobuf field: uint64 taskId = 1;
     */
    taskId: number;
    /**
     * @generated from protobuf field: string reason = 2;
     */
    reason: string;
}
/**
 * @generated from protobuf message AddAwaitForTaskRequest
 */
export interface AddAwaitForTaskRequest {
    /**
     * @generated from protobuf field: uint64 awaitingTaskId = 1;
     */
    awaitingTaskId: number;
    /**
     * @generated from protobuf field: uint64 awaitForTaskId = 2;
     */
    awaitForTaskId: number;
}
/**
 * @generated from protobuf message RemoveAwaitForTaskRequest
 */
export interface RemoveAwaitForTaskRequest {
    /**
     * @generated from protobuf field: uint64 awaitingTaskId = 1;
     */
    awaitingTaskId: number;
    /**
     * @generated from protobuf field: uint64 awaitForTaskId = 2;
     */
    awaitForTaskId: number;
}
/**
 * @generated from protobuf message StartDraggingTaskRequest
 */
export interface StartDraggingTaskRequest {
    /**
     * @generated from protobuf field: uint64 taskId = 1;
     */
    taskId: number;
    /**
     * @generated from protobuf field: uint64 clientId = 2;
     */
    clientId: number;
}
/**
 * @generated from protobuf message StopDraggingTaskRequest
 */
export interface StopDraggingTaskRequest {
    /**
     * @generated from protobuf field: uint64 taskId = 1;
     */
    taskId: number;
    /**
     * @generated from protobuf field: uint64 clientId = 2;
     */
    clientId: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetTaskRequest$Type extends MessageType<GetTaskRequest> {
    constructor() {
        super("GetTaskRequest", [
            { no: 1, name: "taskId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<GetTaskRequest>): GetTaskRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.taskId = 0;
        if (value !== undefined)
            reflectionMergePartial<GetTaskRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTaskRequest): GetTaskRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 taskId */ 1:
                    message.taskId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTaskRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 taskId = 1; */
        if (message.taskId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.taskId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetTaskRequest
 */
export const GetTaskRequest = new GetTaskRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTaskResponse$Type extends MessageType<GetTaskResponse> {
    constructor() {
        super("GetTaskResponse", [
            { no: 1, name: "task", kind: "message", T: () => Task }
        ]);
    }
    create(value?: PartialMessage<GetTaskResponse>): GetTaskResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetTaskResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTaskResponse): GetTaskResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Task task */ 1:
                    message.task = Task.internalBinaryRead(reader, reader.uint32(), options, message.task);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTaskResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Task task = 1; */
        if (message.task)
            Task.internalBinaryWrite(message.task, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetTaskResponse
 */
export const GetTaskResponse = new GetTaskResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAwaitForTasksRequest$Type extends MessageType<GetAwaitForTasksRequest> {
    constructor() {
        super("GetAwaitForTasksRequest", [
            { no: 1, name: "AwaitingTaskId", kind: "scalar", jsonName: "AwaitingTaskId", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<GetAwaitForTasksRequest>): GetAwaitForTasksRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.awaitingTaskId = 0;
        if (value !== undefined)
            reflectionMergePartial<GetAwaitForTasksRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAwaitForTasksRequest): GetAwaitForTasksRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 AwaitingTaskId = 1 [json_name = "AwaitingTaskId"];*/ 1:
                    message.awaitingTaskId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAwaitForTasksRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 AwaitingTaskId = 1 [json_name = "AwaitingTaskId"]; */
        if (message.awaitingTaskId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.awaitingTaskId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetAwaitForTasksRequest
 */
export const GetAwaitForTasksRequest = new GetAwaitForTasksRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAwaitForTasksResponse$Type extends MessageType<GetAwaitForTasksResponse> {
    constructor() {
        super("GetAwaitForTasksResponse", [
            { no: 1, name: "tasks", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Task }
        ]);
    }
    create(value?: PartialMessage<GetAwaitForTasksResponse>): GetAwaitForTasksResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tasks = [];
        if (value !== undefined)
            reflectionMergePartial<GetAwaitForTasksResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAwaitForTasksResponse): GetAwaitForTasksResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Task tasks */ 1:
                    message.tasks.push(Task.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAwaitForTasksResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Task tasks = 1; */
        for (let i = 0; i < message.tasks.length; i++)
            Task.internalBinaryWrite(message.tasks[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetAwaitForTasksResponse
 */
export const GetAwaitForTasksResponse = new GetAwaitForTasksResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListTasksRequest$Type extends MessageType<ListTasksRequest> {
    constructor() {
        super("ListTasksRequest", [
            { no: 1, name: "taskIds", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "ownerId", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "goalContains", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "status", kind: "enum", opt: true, T: () => ["TaskStatus", TaskStatus] },
            { no: 6, name: "isScheduled", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 7, name: "isPlanned", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<ListTasksRequest>): ListTasksRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.taskIds = [];
        if (value !== undefined)
            reflectionMergePartial<ListTasksRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListTasksRequest): ListTasksRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint64 taskIds */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.taskIds.push(reader.uint64().toNumber());
                    else
                        message.taskIds.push(reader.uint64().toNumber());
                    break;
                case /* optional uint64 ownerId */ 3:
                    message.ownerId = reader.uint64().toNumber();
                    break;
                case /* optional string goalContains */ 4:
                    message.goalContains = reader.string();
                    break;
                case /* optional TaskStatus status */ 5:
                    message.status = reader.int32();
                    break;
                case /* optional uint64 isScheduled */ 6:
                    message.isScheduled = reader.uint64().toNumber();
                    break;
                case /* optional uint64 isPlanned */ 7:
                    message.isPlanned = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListTasksRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint64 taskIds = 1; */
        if (message.taskIds.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.taskIds.length; i++)
                writer.uint64(message.taskIds[i]);
            writer.join();
        }
        /* optional uint64 ownerId = 3; */
        if (message.ownerId !== undefined)
            writer.tag(3, WireType.Varint).uint64(message.ownerId);
        /* optional string goalContains = 4; */
        if (message.goalContains !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.goalContains);
        /* optional TaskStatus status = 5; */
        if (message.status !== undefined)
            writer.tag(5, WireType.Varint).int32(message.status);
        /* optional uint64 isScheduled = 6; */
        if (message.isScheduled !== undefined)
            writer.tag(6, WireType.Varint).uint64(message.isScheduled);
        /* optional uint64 isPlanned = 7; */
        if (message.isPlanned !== undefined)
            writer.tag(7, WireType.Varint).uint64(message.isPlanned);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListTasksRequest
 */
export const ListTasksRequest = new ListTasksRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListTasksResponse$Type extends MessageType<ListTasksResponse> {
    constructor() {
        super("ListTasksResponse", [
            { no: 1, name: "tasks", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Task }
        ]);
    }
    create(value?: PartialMessage<ListTasksResponse>): ListTasksResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tasks = [];
        if (value !== undefined)
            reflectionMergePartial<ListTasksResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListTasksResponse): ListTasksResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Task tasks */ 1:
                    message.tasks.push(Task.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListTasksResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Task tasks = 1; */
        for (let i = 0; i < message.tasks.length; i++)
            Task.internalBinaryWrite(message.tasks[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListTasksResponse
 */
export const ListTasksResponse = new ListTasksResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateTaskRequest$Type extends MessageType<CreateTaskRequest> {
    constructor() {
        super("CreateTaskRequest", [
            { no: 1, name: "teamId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "goal", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "context", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "ownerUserId", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "dueAt", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<CreateTaskRequest>): CreateTaskRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamId = 0;
        message.goal = "";
        if (value !== undefined)
            reflectionMergePartial<CreateTaskRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateTaskRequest): CreateTaskRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 teamId */ 1:
                    message.teamId = reader.uint64().toNumber();
                    break;
                case /* string goal */ 2:
                    message.goal = reader.string();
                    break;
                case /* optional string context */ 3:
                    message.context = reader.string();
                    break;
                case /* optional uint64 ownerUserId */ 4:
                    message.ownerUserId = reader.uint64().toNumber();
                    break;
                case /* optional google.protobuf.Timestamp dueAt */ 5:
                    message.dueAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.dueAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateTaskRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 teamId = 1; */
        if (message.teamId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.teamId);
        /* string goal = 2; */
        if (message.goal !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.goal);
        /* optional string context = 3; */
        if (message.context !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.context);
        /* optional uint64 ownerUserId = 4; */
        if (message.ownerUserId !== undefined)
            writer.tag(4, WireType.Varint).uint64(message.ownerUserId);
        /* optional google.protobuf.Timestamp dueAt = 5; */
        if (message.dueAt)
            Timestamp.internalBinaryWrite(message.dueAt, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateTaskRequest
 */
export const CreateTaskRequest = new CreateTaskRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateTaskResponse$Type extends MessageType<CreateTaskResponse> {
    constructor() {
        super("CreateTaskResponse", [
            { no: 1, name: "taskId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<CreateTaskResponse>): CreateTaskResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.taskId = 0;
        if (value !== undefined)
            reflectionMergePartial<CreateTaskResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateTaskResponse): CreateTaskResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 taskId */ 1:
                    message.taskId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateTaskResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 taskId = 1; */
        if (message.taskId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.taskId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateTaskResponse
 */
export const CreateTaskResponse = new CreateTaskResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateTaskRequest$Type extends MessageType<UpdateTaskRequest> {
    constructor() {
        super("UpdateTaskRequest", [
            { no: 1, name: "taskId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "goal", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "context", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "ownerUserId", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "owningTeamId", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 6, name: "effort", kind: "message", T: () => Duration },
            { no: 7, name: "dueAt", kind: "message", T: () => Timestamp },
            { no: 8, name: "priority", kind: "enum", opt: true, T: () => ["Priority", Priority] }
        ]);
    }
    create(value?: PartialMessage<UpdateTaskRequest>): UpdateTaskRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.taskId = 0;
        if (value !== undefined)
            reflectionMergePartial<UpdateTaskRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateTaskRequest): UpdateTaskRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 taskId */ 1:
                    message.taskId = reader.uint64().toNumber();
                    break;
                case /* optional string goal */ 2:
                    message.goal = reader.string();
                    break;
                case /* optional string context */ 3:
                    message.context = reader.string();
                    break;
                case /* optional uint64 ownerUserId */ 4:
                    message.ownerUserId = reader.uint64().toNumber();
                    break;
                case /* optional uint64 owningTeamId */ 5:
                    message.owningTeamId = reader.uint64().toNumber();
                    break;
                case /* optional google.protobuf.Duration effort */ 6:
                    message.effort = Duration.internalBinaryRead(reader, reader.uint32(), options, message.effort);
                    break;
                case /* optional google.protobuf.Timestamp dueAt */ 7:
                    message.dueAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.dueAt);
                    break;
                case /* optional Priority priority */ 8:
                    message.priority = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateTaskRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 taskId = 1; */
        if (message.taskId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.taskId);
        /* optional string goal = 2; */
        if (message.goal !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.goal);
        /* optional string context = 3; */
        if (message.context !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.context);
        /* optional uint64 ownerUserId = 4; */
        if (message.ownerUserId !== undefined)
            writer.tag(4, WireType.Varint).uint64(message.ownerUserId);
        /* optional uint64 owningTeamId = 5; */
        if (message.owningTeamId !== undefined)
            writer.tag(5, WireType.Varint).uint64(message.owningTeamId);
        /* optional google.protobuf.Duration effort = 6; */
        if (message.effort)
            Duration.internalBinaryWrite(message.effort, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* optional google.protobuf.Timestamp dueAt = 7; */
        if (message.dueAt)
            Timestamp.internalBinaryWrite(message.dueAt, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* optional Priority priority = 8; */
        if (message.priority !== undefined)
            writer.tag(8, WireType.Varint).int32(message.priority);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateTaskRequest
 */
export const UpdateTaskRequest = new UpdateTaskRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateTaskResponse$Type extends MessageType<UpdateTaskResponse> {
    constructor() {
        super("UpdateTaskResponse", [
            { no: 1, name: "task", kind: "message", T: () => Task }
        ]);
    }
    create(value?: PartialMessage<UpdateTaskResponse>): UpdateTaskResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateTaskResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateTaskResponse): UpdateTaskResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Task task */ 1:
                    message.task = Task.internalBinaryRead(reader, reader.uint32(), options, message.task);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateTaskResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Task task = 1; */
        if (message.task)
            Task.internalBinaryWrite(message.task, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateTaskResponse
 */
export const UpdateTaskResponse = new UpdateTaskResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteTaskRequest$Type extends MessageType<DeleteTaskRequest> {
    constructor() {
        super("DeleteTaskRequest", [
            { no: 1, name: "taskId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteTaskRequest>): DeleteTaskRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.taskId = 0;
        if (value !== undefined)
            reflectionMergePartial<DeleteTaskRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteTaskRequest): DeleteTaskRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 taskId */ 1:
                    message.taskId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteTaskRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 taskId = 1; */
        if (message.taskId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.taskId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteTaskRequest
 */
export const DeleteTaskRequest = new DeleteTaskRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MoveTaskToUpcomingRequest$Type extends MessageType<MoveTaskToUpcomingRequest> {
    constructor() {
        super("MoveTaskToUpcomingRequest", [
            { no: 1, name: "taskId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<MoveTaskToUpcomingRequest>): MoveTaskToUpcomingRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.taskId = 0;
        if (value !== undefined)
            reflectionMergePartial<MoveTaskToUpcomingRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MoveTaskToUpcomingRequest): MoveTaskToUpcomingRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 taskId */ 1:
                    message.taskId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MoveTaskToUpcomingRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 taskId = 1; */
        if (message.taskId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.taskId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MoveTaskToUpcomingRequest
 */
export const MoveTaskToUpcomingRequest = new MoveTaskToUpcomingRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MoveTaskToInProgressRequest$Type extends MessageType<MoveTaskToInProgressRequest> {
    constructor() {
        super("MoveTaskToInProgressRequest", [
            { no: 1, name: "taskId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<MoveTaskToInProgressRequest>): MoveTaskToInProgressRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.taskId = 0;
        if (value !== undefined)
            reflectionMergePartial<MoveTaskToInProgressRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MoveTaskToInProgressRequest): MoveTaskToInProgressRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 taskId */ 1:
                    message.taskId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MoveTaskToInProgressRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 taskId = 1; */
        if (message.taskId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.taskId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MoveTaskToInProgressRequest
 */
export const MoveTaskToInProgressRequest = new MoveTaskToInProgressRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MoveTaskToDeliveredRequest$Type extends MessageType<MoveTaskToDeliveredRequest> {
    constructor() {
        super("MoveTaskToDeliveredRequest", [
            { no: 1, name: "taskId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<MoveTaskToDeliveredRequest>): MoveTaskToDeliveredRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.taskId = 0;
        if (value !== undefined)
            reflectionMergePartial<MoveTaskToDeliveredRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MoveTaskToDeliveredRequest): MoveTaskToDeliveredRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 taskId */ 1:
                    message.taskId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MoveTaskToDeliveredRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 taskId = 1; */
        if (message.taskId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.taskId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MoveTaskToDeliveredRequest
 */
export const MoveTaskToDeliveredRequest = new MoveTaskToDeliveredRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MoveTaskToBlockedRequest$Type extends MessageType<MoveTaskToBlockedRequest> {
    constructor() {
        super("MoveTaskToBlockedRequest", [
            { no: 1, name: "taskId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "reason", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MoveTaskToBlockedRequest>): MoveTaskToBlockedRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.taskId = 0;
        message.reason = "";
        if (value !== undefined)
            reflectionMergePartial<MoveTaskToBlockedRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MoveTaskToBlockedRequest): MoveTaskToBlockedRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 taskId */ 1:
                    message.taskId = reader.uint64().toNumber();
                    break;
                case /* string reason */ 2:
                    message.reason = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MoveTaskToBlockedRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 taskId = 1; */
        if (message.taskId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.taskId);
        /* string reason = 2; */
        if (message.reason !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.reason);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MoveTaskToBlockedRequest
 */
export const MoveTaskToBlockedRequest = new MoveTaskToBlockedRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddAwaitForTaskRequest$Type extends MessageType<AddAwaitForTaskRequest> {
    constructor() {
        super("AddAwaitForTaskRequest", [
            { no: 1, name: "awaitingTaskId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "awaitForTaskId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<AddAwaitForTaskRequest>): AddAwaitForTaskRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.awaitingTaskId = 0;
        message.awaitForTaskId = 0;
        if (value !== undefined)
            reflectionMergePartial<AddAwaitForTaskRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddAwaitForTaskRequest): AddAwaitForTaskRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 awaitingTaskId */ 1:
                    message.awaitingTaskId = reader.uint64().toNumber();
                    break;
                case /* uint64 awaitForTaskId */ 2:
                    message.awaitForTaskId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddAwaitForTaskRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 awaitingTaskId = 1; */
        if (message.awaitingTaskId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.awaitingTaskId);
        /* uint64 awaitForTaskId = 2; */
        if (message.awaitForTaskId !== 0)
            writer.tag(2, WireType.Varint).uint64(message.awaitForTaskId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AddAwaitForTaskRequest
 */
export const AddAwaitForTaskRequest = new AddAwaitForTaskRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveAwaitForTaskRequest$Type extends MessageType<RemoveAwaitForTaskRequest> {
    constructor() {
        super("RemoveAwaitForTaskRequest", [
            { no: 1, name: "awaitingTaskId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "awaitForTaskId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveAwaitForTaskRequest>): RemoveAwaitForTaskRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.awaitingTaskId = 0;
        message.awaitForTaskId = 0;
        if (value !== undefined)
            reflectionMergePartial<RemoveAwaitForTaskRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveAwaitForTaskRequest): RemoveAwaitForTaskRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 awaitingTaskId */ 1:
                    message.awaitingTaskId = reader.uint64().toNumber();
                    break;
                case /* uint64 awaitForTaskId */ 2:
                    message.awaitForTaskId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveAwaitForTaskRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 awaitingTaskId = 1; */
        if (message.awaitingTaskId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.awaitingTaskId);
        /* uint64 awaitForTaskId = 2; */
        if (message.awaitForTaskId !== 0)
            writer.tag(2, WireType.Varint).uint64(message.awaitForTaskId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RemoveAwaitForTaskRequest
 */
export const RemoveAwaitForTaskRequest = new RemoveAwaitForTaskRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartDraggingTaskRequest$Type extends MessageType<StartDraggingTaskRequest> {
    constructor() {
        super("StartDraggingTaskRequest", [
            { no: 1, name: "taskId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "clientId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<StartDraggingTaskRequest>): StartDraggingTaskRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.taskId = 0;
        message.clientId = 0;
        if (value !== undefined)
            reflectionMergePartial<StartDraggingTaskRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartDraggingTaskRequest): StartDraggingTaskRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 taskId */ 1:
                    message.taskId = reader.uint64().toNumber();
                    break;
                case /* uint64 clientId */ 2:
                    message.clientId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartDraggingTaskRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 taskId = 1; */
        if (message.taskId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.taskId);
        /* uint64 clientId = 2; */
        if (message.clientId !== 0)
            writer.tag(2, WireType.Varint).uint64(message.clientId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StartDraggingTaskRequest
 */
export const StartDraggingTaskRequest = new StartDraggingTaskRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StopDraggingTaskRequest$Type extends MessageType<StopDraggingTaskRequest> {
    constructor() {
        super("StopDraggingTaskRequest", [
            { no: 1, name: "taskId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "clientId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<StopDraggingTaskRequest>): StopDraggingTaskRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.taskId = 0;
        message.clientId = 0;
        if (value !== undefined)
            reflectionMergePartial<StopDraggingTaskRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StopDraggingTaskRequest): StopDraggingTaskRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 taskId */ 1:
                    message.taskId = reader.uint64().toNumber();
                    break;
                case /* uint64 clientId */ 2:
                    message.clientId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StopDraggingTaskRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 taskId = 1; */
        if (message.taskId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.taskId);
        /* uint64 clientId = 2; */
        if (message.clientId !== 0)
            writer.tag(2, WireType.Varint).uint64(message.clientId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StopDraggingTaskRequest
 */
export const StopDraggingTaskRequest = new StopDraggingTaskRequest$Type();
/**
 * @generated ServiceType for protobuf service TaskService
 */
export const TaskService = new ServiceType("TaskService", [
    { name: "GetTask", options: {}, I: GetTaskRequest, O: GetTaskResponse },
    { name: "GetAwaitForTasks", options: {}, I: GetAwaitForTasksRequest, O: GetAwaitForTasksResponse },
    { name: "ListTasks", options: {}, I: ListTasksRequest, O: ListTasksResponse },
    { name: "CreateTask", options: {}, I: CreateTaskRequest, O: CreateTaskResponse },
    { name: "UpdateTask", options: {}, I: UpdateTaskRequest, O: UpdateTaskResponse },
    { name: "DeleteTask", options: {}, I: DeleteTaskRequest, O: Empty },
    { name: "MoveTaskToUpcoming", options: {}, I: MoveTaskToUpcomingRequest, O: Empty },
    { name: "MoveTaskToInProgress", options: {}, I: MoveTaskToInProgressRequest, O: Empty },
    { name: "MoveTaskToDelivered", options: {}, I: MoveTaskToDeliveredRequest, O: Empty },
    { name: "MoveTaskToBlocked", options: {}, I: MoveTaskToBlockedRequest, O: Empty },
    { name: "AddAwaitForTask", options: {}, I: AddAwaitForTaskRequest, O: Empty },
    { name: "RemoveAwaitForTask", options: {}, I: RemoveAwaitForTaskRequest, O: Empty },
    { name: "StartDraggingTask", options: {}, I: StartDraggingTaskRequest, O: Empty },
    { name: "StopDraggingTask", options: {}, I: StopDraggingTaskRequest, O: Empty }
]);
