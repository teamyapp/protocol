// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "teamy/user.proto" (syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { User } from "./user";
import type { UpdateUserRequest } from "./user";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Empty } from "../google/protobuf/empty";
import type { CreateUserRequest } from "./user";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service User
 */
export interface IUserClient {
    /**
     * @generated from protobuf rpc: CreateUser(CreateUserRequest) returns (google.protobuf.Empty);
     */
    createUser(input: CreateUserRequest, options?: RpcOptions): UnaryCall<CreateUserRequest, Empty>;
    /**
     * @generated from protobuf rpc: UpdateUser(UpdateUserRequest) returns (google.protobuf.Empty);
     */
    updateUser(input: UpdateUserRequest, options?: RpcOptions): UnaryCall<UpdateUserRequest, Empty>;
}
/**
 * @generated from protobuf service User
 */
export class UserClient implements IUserClient, ServiceInfo {
    typeName = User.typeName;
    methods = User.methods;
    options = User.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CreateUser(CreateUserRequest) returns (google.protobuf.Empty);
     */
    createUser(input: CreateUserRequest, options?: RpcOptions): UnaryCall<CreateUserRequest, Empty> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateUserRequest, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateUser(UpdateUserRequest) returns (google.protobuf.Empty);
     */
    updateUser(input: UpdateUserRequest, options?: RpcOptions): UnaryCall<UpdateUserRequest, Empty> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateUserRequest, Empty>("unary", this._transport, method, opt, input);
    }
}
