// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "teamy/app_secret_service.proto" (syntax proto3)
// tslint:disable
import { Empty } from "../google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { AppSecret } from "./message/app_secret";
/**
 * @generated from protobuf message CreateAppSecretRequest
 */
export interface CreateAppSecretRequest {
    /**
     * @generated from protobuf field: uint64 appId = 1;
     */
    appId: number;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
}
/**
 * @generated from protobuf message CreateAppSecretResponse
 */
export interface CreateAppSecretResponse {
    /**
     * @generated from protobuf field: AppSecret appSecret = 1;
     */
    appSecret?: AppSecret;
}
/**
 * @generated from protobuf message GetAppSecretRequest
 */
export interface GetAppSecretRequest {
    /**
     * @generated from protobuf field: uint64 secretId = 1;
     */
    secretId: number;
}
/**
 * @generated from protobuf message GetAppSecretResponse
 */
export interface GetAppSecretResponse {
    /**
     * @generated from protobuf field: AppSecret appSecret = 1;
     */
    appSecret?: AppSecret;
}
/**
 * @generated from protobuf message ListAppSecretRequest
 */
export interface ListAppSecretRequest {
    /**
     * @generated from protobuf field: repeated uint64 secretIds = 1;
     */
    secretIds: number[];
    /**
     * @generated from protobuf field: optional uint64 appId = 2;
     */
    appId?: number;
}
/**
 * @generated from protobuf message ListAppSecretResponse
 */
export interface ListAppSecretResponse {
    /**
     * @generated from protobuf field: repeated AppSecret appSecrets = 1;
     */
    appSecrets: AppSecret[];
}
/**
 * @generated from protobuf message DeleteAppSecretRequest
 */
export interface DeleteAppSecretRequest {
    /**
     * @generated from protobuf field: uint64 secretId = 1;
     */
    secretId: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class CreateAppSecretRequest$Type extends MessageType<CreateAppSecretRequest> {
    constructor() {
        super("CreateAppSecretRequest", [
            { no: 1, name: "appId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateAppSecretRequest>): CreateAppSecretRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.appId = 0;
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<CreateAppSecretRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateAppSecretRequest): CreateAppSecretRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 appId */ 1:
                    message.appId = reader.uint64().toNumber();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateAppSecretRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 appId = 1; */
        if (message.appId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.appId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateAppSecretRequest
 */
export const CreateAppSecretRequest = new CreateAppSecretRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateAppSecretResponse$Type extends MessageType<CreateAppSecretResponse> {
    constructor() {
        super("CreateAppSecretResponse", [
            { no: 1, name: "appSecret", kind: "message", T: () => AppSecret }
        ]);
    }
    create(value?: PartialMessage<CreateAppSecretResponse>): CreateAppSecretResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateAppSecretResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateAppSecretResponse): CreateAppSecretResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* AppSecret appSecret */ 1:
                    message.appSecret = AppSecret.internalBinaryRead(reader, reader.uint32(), options, message.appSecret);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateAppSecretResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* AppSecret appSecret = 1; */
        if (message.appSecret)
            AppSecret.internalBinaryWrite(message.appSecret, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateAppSecretResponse
 */
export const CreateAppSecretResponse = new CreateAppSecretResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAppSecretRequest$Type extends MessageType<GetAppSecretRequest> {
    constructor() {
        super("GetAppSecretRequest", [
            { no: 1, name: "secretId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<GetAppSecretRequest>): GetAppSecretRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.secretId = 0;
        if (value !== undefined)
            reflectionMergePartial<GetAppSecretRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAppSecretRequest): GetAppSecretRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 secretId */ 1:
                    message.secretId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAppSecretRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 secretId = 1; */
        if (message.secretId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.secretId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetAppSecretRequest
 */
export const GetAppSecretRequest = new GetAppSecretRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAppSecretResponse$Type extends MessageType<GetAppSecretResponse> {
    constructor() {
        super("GetAppSecretResponse", [
            { no: 1, name: "appSecret", kind: "message", T: () => AppSecret }
        ]);
    }
    create(value?: PartialMessage<GetAppSecretResponse>): GetAppSecretResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetAppSecretResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAppSecretResponse): GetAppSecretResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* AppSecret appSecret */ 1:
                    message.appSecret = AppSecret.internalBinaryRead(reader, reader.uint32(), options, message.appSecret);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAppSecretResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* AppSecret appSecret = 1; */
        if (message.appSecret)
            AppSecret.internalBinaryWrite(message.appSecret, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetAppSecretResponse
 */
export const GetAppSecretResponse = new GetAppSecretResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListAppSecretRequest$Type extends MessageType<ListAppSecretRequest> {
    constructor() {
        super("ListAppSecretRequest", [
            { no: 1, name: "secretIds", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "appId", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<ListAppSecretRequest>): ListAppSecretRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.secretIds = [];
        if (value !== undefined)
            reflectionMergePartial<ListAppSecretRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListAppSecretRequest): ListAppSecretRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint64 secretIds */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.secretIds.push(reader.uint64().toNumber());
                    else
                        message.secretIds.push(reader.uint64().toNumber());
                    break;
                case /* optional uint64 appId */ 2:
                    message.appId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListAppSecretRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint64 secretIds = 1; */
        if (message.secretIds.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.secretIds.length; i++)
                writer.uint64(message.secretIds[i]);
            writer.join();
        }
        /* optional uint64 appId = 2; */
        if (message.appId !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.appId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListAppSecretRequest
 */
export const ListAppSecretRequest = new ListAppSecretRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListAppSecretResponse$Type extends MessageType<ListAppSecretResponse> {
    constructor() {
        super("ListAppSecretResponse", [
            { no: 1, name: "appSecrets", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AppSecret }
        ]);
    }
    create(value?: PartialMessage<ListAppSecretResponse>): ListAppSecretResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.appSecrets = [];
        if (value !== undefined)
            reflectionMergePartial<ListAppSecretResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListAppSecretResponse): ListAppSecretResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated AppSecret appSecrets */ 1:
                    message.appSecrets.push(AppSecret.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListAppSecretResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated AppSecret appSecrets = 1; */
        for (let i = 0; i < message.appSecrets.length; i++)
            AppSecret.internalBinaryWrite(message.appSecrets[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListAppSecretResponse
 */
export const ListAppSecretResponse = new ListAppSecretResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteAppSecretRequest$Type extends MessageType<DeleteAppSecretRequest> {
    constructor() {
        super("DeleteAppSecretRequest", [
            { no: 1, name: "secretId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteAppSecretRequest>): DeleteAppSecretRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.secretId = 0;
        if (value !== undefined)
            reflectionMergePartial<DeleteAppSecretRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteAppSecretRequest): DeleteAppSecretRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 secretId */ 1:
                    message.secretId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteAppSecretRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 secretId = 1; */
        if (message.secretId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.secretId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteAppSecretRequest
 */
export const DeleteAppSecretRequest = new DeleteAppSecretRequest$Type();
/**
 * @generated ServiceType for protobuf service AppSecretService
 */
export const AppSecretService = new ServiceType("AppSecretService", [
    { name: "CreateAppSecret", options: {}, I: CreateAppSecretRequest, O: CreateAppSecretResponse },
    { name: "GetAppSecret", options: {}, I: GetAppSecretRequest, O: GetAppSecretResponse },
    { name: "ListAppSecret", options: {}, I: ListAppSecretRequest, O: ListAppSecretResponse },
    { name: "DeleteAppSecret", options: {}, I: DeleteAppSecretRequest, O: Empty }
]);
