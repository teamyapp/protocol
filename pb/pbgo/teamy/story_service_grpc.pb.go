// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.1
// source: teamy/story_service.proto

package pbteamy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StoryService_GetStory_FullMethodName             = "/StoryService/GetStory"
	StoryService_ListStories_FullMethodName          = "/StoryService/ListStories"
	StoryService_CreateStory_FullMethodName          = "/StoryService/CreateStory"
	StoryService_UpdateStory_FullMethodName          = "/StoryService/UpdateStory"
	StoryService_DeleteStory_FullMethodName          = "/StoryService/DeleteStory"
	StoryService_AddTaskToStory_FullMethodName       = "/StoryService/AddTaskToStory"
	StoryService_RemoveTaskFromStory_FullMethodName  = "/StoryService/RemoveTaskFromStory"
	StoryService_AddTasksToStory_FullMethodName      = "/StoryService/AddTasksToStory"
	StoryService_RemoveTasksFromStory_FullMethodName = "/StoryService/RemoveTasksFromStory"
)

// StoryServiceClient is the client API for StoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoryServiceClient interface {
	GetStory(ctx context.Context, in *GetStoryRequest, opts ...grpc.CallOption) (*GetStoryResponse, error)
	ListStories(ctx context.Context, in *ListStoriesRequest, opts ...grpc.CallOption) (*ListStoriesResponse, error)
	CreateStory(ctx context.Context, in *CreateStoryRequest, opts ...grpc.CallOption) (*CreateStoryResponse, error)
	UpdateStory(ctx context.Context, in *UpdateStoryRequest, opts ...grpc.CallOption) (*UpdateStoryResponse, error)
	DeleteStory(ctx context.Context, in *DeleteStoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddTaskToStory(ctx context.Context, in *AddTaskToStoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveTaskFromStory(ctx context.Context, in *RemoveTaskFromStoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddTasksToStory(ctx context.Context, in *AddTasksToStoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveTasksFromStory(ctx context.Context, in *RemoveTasksFromStoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type storyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStoryServiceClient(cc grpc.ClientConnInterface) StoryServiceClient {
	return &storyServiceClient{cc}
}

func (c *storyServiceClient) GetStory(ctx context.Context, in *GetStoryRequest, opts ...grpc.CallOption) (*GetStoryResponse, error) {
	out := new(GetStoryResponse)
	err := c.cc.Invoke(ctx, StoryService_GetStory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storyServiceClient) ListStories(ctx context.Context, in *ListStoriesRequest, opts ...grpc.CallOption) (*ListStoriesResponse, error) {
	out := new(ListStoriesResponse)
	err := c.cc.Invoke(ctx, StoryService_ListStories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storyServiceClient) CreateStory(ctx context.Context, in *CreateStoryRequest, opts ...grpc.CallOption) (*CreateStoryResponse, error) {
	out := new(CreateStoryResponse)
	err := c.cc.Invoke(ctx, StoryService_CreateStory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storyServiceClient) UpdateStory(ctx context.Context, in *UpdateStoryRequest, opts ...grpc.CallOption) (*UpdateStoryResponse, error) {
	out := new(UpdateStoryResponse)
	err := c.cc.Invoke(ctx, StoryService_UpdateStory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storyServiceClient) DeleteStory(ctx context.Context, in *DeleteStoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StoryService_DeleteStory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storyServiceClient) AddTaskToStory(ctx context.Context, in *AddTaskToStoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StoryService_AddTaskToStory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storyServiceClient) RemoveTaskFromStory(ctx context.Context, in *RemoveTaskFromStoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StoryService_RemoveTaskFromStory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storyServiceClient) AddTasksToStory(ctx context.Context, in *AddTasksToStoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StoryService_AddTasksToStory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storyServiceClient) RemoveTasksFromStory(ctx context.Context, in *RemoveTasksFromStoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StoryService_RemoveTasksFromStory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoryServiceServer is the server API for StoryService service.
// All implementations must embed UnimplementedStoryServiceServer
// for forward compatibility
type StoryServiceServer interface {
	GetStory(context.Context, *GetStoryRequest) (*GetStoryResponse, error)
	ListStories(context.Context, *ListStoriesRequest) (*ListStoriesResponse, error)
	CreateStory(context.Context, *CreateStoryRequest) (*CreateStoryResponse, error)
	UpdateStory(context.Context, *UpdateStoryRequest) (*UpdateStoryResponse, error)
	DeleteStory(context.Context, *DeleteStoryRequest) (*emptypb.Empty, error)
	AddTaskToStory(context.Context, *AddTaskToStoryRequest) (*emptypb.Empty, error)
	RemoveTaskFromStory(context.Context, *RemoveTaskFromStoryRequest) (*emptypb.Empty, error)
	AddTasksToStory(context.Context, *AddTasksToStoryRequest) (*emptypb.Empty, error)
	RemoveTasksFromStory(context.Context, *RemoveTasksFromStoryRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedStoryServiceServer()
}

// UnimplementedStoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStoryServiceServer struct {
}

func (UnimplementedStoryServiceServer) GetStory(context.Context, *GetStoryRequest) (*GetStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStory not implemented")
}
func (UnimplementedStoryServiceServer) ListStories(context.Context, *ListStoriesRequest) (*ListStoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStories not implemented")
}
func (UnimplementedStoryServiceServer) CreateStory(context.Context, *CreateStoryRequest) (*CreateStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStory not implemented")
}
func (UnimplementedStoryServiceServer) UpdateStory(context.Context, *UpdateStoryRequest) (*UpdateStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStory not implemented")
}
func (UnimplementedStoryServiceServer) DeleteStory(context.Context, *DeleteStoryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStory not implemented")
}
func (UnimplementedStoryServiceServer) AddTaskToStory(context.Context, *AddTaskToStoryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTaskToStory not implemented")
}
func (UnimplementedStoryServiceServer) RemoveTaskFromStory(context.Context, *RemoveTaskFromStoryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTaskFromStory not implemented")
}
func (UnimplementedStoryServiceServer) AddTasksToStory(context.Context, *AddTasksToStoryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTasksToStory not implemented")
}
func (UnimplementedStoryServiceServer) RemoveTasksFromStory(context.Context, *RemoveTasksFromStoryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTasksFromStory not implemented")
}
func (UnimplementedStoryServiceServer) mustEmbedUnimplementedStoryServiceServer() {}

// UnsafeStoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoryServiceServer will
// result in compilation errors.
type UnsafeStoryServiceServer interface {
	mustEmbedUnimplementedStoryServiceServer()
}

func RegisterStoryServiceServer(s grpc.ServiceRegistrar, srv StoryServiceServer) {
	s.RegisterService(&StoryService_ServiceDesc, srv)
}

func _StoryService_GetStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoryServiceServer).GetStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoryService_GetStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoryServiceServer).GetStory(ctx, req.(*GetStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoryService_ListStories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoryServiceServer).ListStories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoryService_ListStories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoryServiceServer).ListStories(ctx, req.(*ListStoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoryService_CreateStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoryServiceServer).CreateStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoryService_CreateStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoryServiceServer).CreateStory(ctx, req.(*CreateStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoryService_UpdateStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoryServiceServer).UpdateStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoryService_UpdateStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoryServiceServer).UpdateStory(ctx, req.(*UpdateStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoryService_DeleteStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoryServiceServer).DeleteStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoryService_DeleteStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoryServiceServer).DeleteStory(ctx, req.(*DeleteStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoryService_AddTaskToStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTaskToStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoryServiceServer).AddTaskToStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoryService_AddTaskToStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoryServiceServer).AddTaskToStory(ctx, req.(*AddTaskToStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoryService_RemoveTaskFromStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTaskFromStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoryServiceServer).RemoveTaskFromStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoryService_RemoveTaskFromStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoryServiceServer).RemoveTaskFromStory(ctx, req.(*RemoveTaskFromStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoryService_AddTasksToStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTasksToStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoryServiceServer).AddTasksToStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoryService_AddTasksToStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoryServiceServer).AddTasksToStory(ctx, req.(*AddTasksToStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoryService_RemoveTasksFromStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTasksFromStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoryServiceServer).RemoveTasksFromStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoryService_RemoveTasksFromStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoryServiceServer).RemoveTasksFromStory(ctx, req.(*RemoveTasksFromStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StoryService_ServiceDesc is the grpc.ServiceDesc for StoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StoryService",
	HandlerType: (*StoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStory",
			Handler:    _StoryService_GetStory_Handler,
		},
		{
			MethodName: "ListStories",
			Handler:    _StoryService_ListStories_Handler,
		},
		{
			MethodName: "CreateStory",
			Handler:    _StoryService_CreateStory_Handler,
		},
		{
			MethodName: "UpdateStory",
			Handler:    _StoryService_UpdateStory_Handler,
		},
		{
			MethodName: "DeleteStory",
			Handler:    _StoryService_DeleteStory_Handler,
		},
		{
			MethodName: "AddTaskToStory",
			Handler:    _StoryService_AddTaskToStory_Handler,
		},
		{
			MethodName: "RemoveTaskFromStory",
			Handler:    _StoryService_RemoveTaskFromStory_Handler,
		},
		{
			MethodName: "AddTasksToStory",
			Handler:    _StoryService_AddTasksToStory_Handler,
		},
		{
			MethodName: "RemoveTasksFromStory",
			Handler:    _StoryService_RemoveTasksFromStory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teamy/story_service.proto",
}
