// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.1
// source: teamy/phase_service.proto

package pbteamy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PhaseService_GetPhase_FullMethodName               = "/PhaseService/GetPhase"
	PhaseService_ListPhases_FullMethodName             = "/PhaseService/ListPhases"
	PhaseService_CreatePhase_FullMethodName            = "/PhaseService/CreatePhase"
	PhaseService_UpdatePhase_FullMethodName            = "/PhaseService/UpdatePhase"
	PhaseService_DeletePhase_FullMethodName            = "/PhaseService/DeletePhase"
	PhaseService_AddStoryToPhase_FullMethodName        = "/PhaseService/AddStoryToPhase"
	PhaseService_RemoveStoryFromPhase_FullMethodName   = "/PhaseService/RemoveStoryFromPhase"
	PhaseService_AddStoriesToPhase_FullMethodName      = "/PhaseService/AddStoriesToPhase"
	PhaseService_RemoveStoriesFromPhase_FullMethodName = "/PhaseService/RemoveStoriesFromPhase"
)

// PhaseServiceClient is the client API for PhaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PhaseServiceClient interface {
	GetPhase(ctx context.Context, in *GetPhaseRequest, opts ...grpc.CallOption) (*GetPhaseResponse, error)
	ListPhases(ctx context.Context, in *ListPhasesRequest, opts ...grpc.CallOption) (*ListPhasesResponse, error)
	CreatePhase(ctx context.Context, in *CreatePhaseRequest, opts ...grpc.CallOption) (*CreatePhaseResponse, error)
	UpdatePhase(ctx context.Context, in *UpdatePhaseRequest, opts ...grpc.CallOption) (*UpdatePhaseResponse, error)
	DeletePhase(ctx context.Context, in *DeletePhaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddStoryToPhase(ctx context.Context, in *AddStoryToPhaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveStoryFromPhase(ctx context.Context, in *RemoveStoryFromPhaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddStoriesToPhase(ctx context.Context, in *AddStoriesToPhaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveStoriesFromPhase(ctx context.Context, in *RemoveStoriesFromPhaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type phaseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPhaseServiceClient(cc grpc.ClientConnInterface) PhaseServiceClient {
	return &phaseServiceClient{cc}
}

func (c *phaseServiceClient) GetPhase(ctx context.Context, in *GetPhaseRequest, opts ...grpc.CallOption) (*GetPhaseResponse, error) {
	out := new(GetPhaseResponse)
	err := c.cc.Invoke(ctx, PhaseService_GetPhase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phaseServiceClient) ListPhases(ctx context.Context, in *ListPhasesRequest, opts ...grpc.CallOption) (*ListPhasesResponse, error) {
	out := new(ListPhasesResponse)
	err := c.cc.Invoke(ctx, PhaseService_ListPhases_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phaseServiceClient) CreatePhase(ctx context.Context, in *CreatePhaseRequest, opts ...grpc.CallOption) (*CreatePhaseResponse, error) {
	out := new(CreatePhaseResponse)
	err := c.cc.Invoke(ctx, PhaseService_CreatePhase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phaseServiceClient) UpdatePhase(ctx context.Context, in *UpdatePhaseRequest, opts ...grpc.CallOption) (*UpdatePhaseResponse, error) {
	out := new(UpdatePhaseResponse)
	err := c.cc.Invoke(ctx, PhaseService_UpdatePhase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phaseServiceClient) DeletePhase(ctx context.Context, in *DeletePhaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PhaseService_DeletePhase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phaseServiceClient) AddStoryToPhase(ctx context.Context, in *AddStoryToPhaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PhaseService_AddStoryToPhase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phaseServiceClient) RemoveStoryFromPhase(ctx context.Context, in *RemoveStoryFromPhaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PhaseService_RemoveStoryFromPhase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phaseServiceClient) AddStoriesToPhase(ctx context.Context, in *AddStoriesToPhaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PhaseService_AddStoriesToPhase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phaseServiceClient) RemoveStoriesFromPhase(ctx context.Context, in *RemoveStoriesFromPhaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PhaseService_RemoveStoriesFromPhase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PhaseServiceServer is the server API for PhaseService service.
// All implementations must embed UnimplementedPhaseServiceServer
// for forward compatibility
type PhaseServiceServer interface {
	GetPhase(context.Context, *GetPhaseRequest) (*GetPhaseResponse, error)
	ListPhases(context.Context, *ListPhasesRequest) (*ListPhasesResponse, error)
	CreatePhase(context.Context, *CreatePhaseRequest) (*CreatePhaseResponse, error)
	UpdatePhase(context.Context, *UpdatePhaseRequest) (*UpdatePhaseResponse, error)
	DeletePhase(context.Context, *DeletePhaseRequest) (*emptypb.Empty, error)
	AddStoryToPhase(context.Context, *AddStoryToPhaseRequest) (*emptypb.Empty, error)
	RemoveStoryFromPhase(context.Context, *RemoveStoryFromPhaseRequest) (*emptypb.Empty, error)
	AddStoriesToPhase(context.Context, *AddStoriesToPhaseRequest) (*emptypb.Empty, error)
	RemoveStoriesFromPhase(context.Context, *RemoveStoriesFromPhaseRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedPhaseServiceServer()
}

// UnimplementedPhaseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPhaseServiceServer struct {
}

func (UnimplementedPhaseServiceServer) GetPhase(context.Context, *GetPhaseRequest) (*GetPhaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPhase not implemented")
}
func (UnimplementedPhaseServiceServer) ListPhases(context.Context, *ListPhasesRequest) (*ListPhasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPhases not implemented")
}
func (UnimplementedPhaseServiceServer) CreatePhase(context.Context, *CreatePhaseRequest) (*CreatePhaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePhase not implemented")
}
func (UnimplementedPhaseServiceServer) UpdatePhase(context.Context, *UpdatePhaseRequest) (*UpdatePhaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePhase not implemented")
}
func (UnimplementedPhaseServiceServer) DeletePhase(context.Context, *DeletePhaseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePhase not implemented")
}
func (UnimplementedPhaseServiceServer) AddStoryToPhase(context.Context, *AddStoryToPhaseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStoryToPhase not implemented")
}
func (UnimplementedPhaseServiceServer) RemoveStoryFromPhase(context.Context, *RemoveStoryFromPhaseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStoryFromPhase not implemented")
}
func (UnimplementedPhaseServiceServer) AddStoriesToPhase(context.Context, *AddStoriesToPhaseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStoriesToPhase not implemented")
}
func (UnimplementedPhaseServiceServer) RemoveStoriesFromPhase(context.Context, *RemoveStoriesFromPhaseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStoriesFromPhase not implemented")
}
func (UnimplementedPhaseServiceServer) mustEmbedUnimplementedPhaseServiceServer() {}

// UnsafePhaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PhaseServiceServer will
// result in compilation errors.
type UnsafePhaseServiceServer interface {
	mustEmbedUnimplementedPhaseServiceServer()
}

func RegisterPhaseServiceServer(s grpc.ServiceRegistrar, srv PhaseServiceServer) {
	s.RegisterService(&PhaseService_ServiceDesc, srv)
}

func _PhaseService_GetPhase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPhaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhaseServiceServer).GetPhase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhaseService_GetPhase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhaseServiceServer).GetPhase(ctx, req.(*GetPhaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhaseService_ListPhases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPhasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhaseServiceServer).ListPhases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhaseService_ListPhases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhaseServiceServer).ListPhases(ctx, req.(*ListPhasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhaseService_CreatePhase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePhaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhaseServiceServer).CreatePhase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhaseService_CreatePhase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhaseServiceServer).CreatePhase(ctx, req.(*CreatePhaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhaseService_UpdatePhase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePhaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhaseServiceServer).UpdatePhase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhaseService_UpdatePhase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhaseServiceServer).UpdatePhase(ctx, req.(*UpdatePhaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhaseService_DeletePhase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePhaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhaseServiceServer).DeletePhase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhaseService_DeletePhase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhaseServiceServer).DeletePhase(ctx, req.(*DeletePhaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhaseService_AddStoryToPhase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStoryToPhaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhaseServiceServer).AddStoryToPhase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhaseService_AddStoryToPhase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhaseServiceServer).AddStoryToPhase(ctx, req.(*AddStoryToPhaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhaseService_RemoveStoryFromPhase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveStoryFromPhaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhaseServiceServer).RemoveStoryFromPhase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhaseService_RemoveStoryFromPhase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhaseServiceServer).RemoveStoryFromPhase(ctx, req.(*RemoveStoryFromPhaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhaseService_AddStoriesToPhase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStoriesToPhaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhaseServiceServer).AddStoriesToPhase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhaseService_AddStoriesToPhase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhaseServiceServer).AddStoriesToPhase(ctx, req.(*AddStoriesToPhaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhaseService_RemoveStoriesFromPhase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveStoriesFromPhaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhaseServiceServer).RemoveStoriesFromPhase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhaseService_RemoveStoriesFromPhase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhaseServiceServer).RemoveStoriesFromPhase(ctx, req.(*RemoveStoriesFromPhaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PhaseService_ServiceDesc is the grpc.ServiceDesc for PhaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PhaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PhaseService",
	HandlerType: (*PhaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPhase",
			Handler:    _PhaseService_GetPhase_Handler,
		},
		{
			MethodName: "ListPhases",
			Handler:    _PhaseService_ListPhases_Handler,
		},
		{
			MethodName: "CreatePhase",
			Handler:    _PhaseService_CreatePhase_Handler,
		},
		{
			MethodName: "UpdatePhase",
			Handler:    _PhaseService_UpdatePhase_Handler,
		},
		{
			MethodName: "DeletePhase",
			Handler:    _PhaseService_DeletePhase_Handler,
		},
		{
			MethodName: "AddStoryToPhase",
			Handler:    _PhaseService_AddStoryToPhase_Handler,
		},
		{
			MethodName: "RemoveStoryFromPhase",
			Handler:    _PhaseService_RemoveStoryFromPhase_Handler,
		},
		{
			MethodName: "AddStoriesToPhase",
			Handler:    _PhaseService_AddStoriesToPhase_Handler,
		},
		{
			MethodName: "RemoveStoriesFromPhase",
			Handler:    _PhaseService_RemoveStoriesFromPhase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teamy/phase_service.proto",
}
