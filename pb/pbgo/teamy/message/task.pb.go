// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: teamy/message/task.proto

package message

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TaskStatus int32

const (
	TaskStatus_TODO        TaskStatus = 0
	TaskStatus_IN_PROGRESS TaskStatus = 1
	TaskStatus_PAUSED      TaskStatus = 2
	TaskStatus_AWAITING    TaskStatus = 3
	TaskStatus_BLOCKED     TaskStatus = 4
	TaskStatus_DELIVERED   TaskStatus = 5
)

// Enum value maps for TaskStatus.
var (
	TaskStatus_name = map[int32]string{
		0: "TODO",
		1: "IN_PROGRESS",
		2: "PAUSED",
		3: "AWAITING",
		4: "BLOCKED",
		5: "DELIVERED",
	}
	TaskStatus_value = map[string]int32{
		"TODO":        0,
		"IN_PROGRESS": 1,
		"PAUSED":      2,
		"AWAITING":    3,
		"BLOCKED":     4,
		"DELIVERED":   5,
	}
)

func (x TaskStatus) Enum() *TaskStatus {
	p := new(TaskStatus)
	*p = x
	return p
}

func (x TaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_teamy_message_task_proto_enumTypes[0].Descriptor()
}

func (TaskStatus) Type() protoreflect.EnumType {
	return &file_teamy_message_task_proto_enumTypes[0]
}

func (x TaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStatus.Descriptor instead.
func (TaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_teamy_message_task_proto_rawDescGZIP(), []int{0}
}

type TaskAction int32

const (
	TaskAction_START          TaskAction = 0
	TaskAction_DELETE         TaskAction = 1
	TaskAction_ASSIGN_OWNER   TaskAction = 2
	TaskAction_REPORT_BLOCKED TaskAction = 3
	TaskAction_MARK_COMPLETE  TaskAction = 4
)

// Enum value maps for TaskAction.
var (
	TaskAction_name = map[int32]string{
		0: "START",
		1: "DELETE",
		2: "ASSIGN_OWNER",
		3: "REPORT_BLOCKED",
		4: "MARK_COMPLETE",
	}
	TaskAction_value = map[string]int32{
		"START":          0,
		"DELETE":         1,
		"ASSIGN_OWNER":   2,
		"REPORT_BLOCKED": 3,
		"MARK_COMPLETE":  4,
	}
)

func (x TaskAction) Enum() *TaskAction {
	p := new(TaskAction)
	*p = x
	return p
}

func (x TaskAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskAction) Descriptor() protoreflect.EnumDescriptor {
	return file_teamy_message_task_proto_enumTypes[1].Descriptor()
}

func (TaskAction) Type() protoreflect.EnumType {
	return &file_teamy_message_task_proto_enumTypes[1]
}

func (x TaskAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskAction.Descriptor instead.
func (TaskAction) EnumDescriptor() ([]byte, []int) {
	return file_teamy_message_task_proto_rawDescGZIP(), []int{1}
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Goal             string                 `protobuf:"bytes,2,opt,name=goal,proto3" json:"goal,omitempty"`
	Context          *string                `protobuf:"bytes,3,opt,name=context,proto3,oneof" json:"context,omitempty"`
	OwningTeamId     uint64                 `protobuf:"varint,4,opt,name=owningTeamId,proto3" json:"owningTeamId,omitempty"`
	CreatorUserId    uint64                 `protobuf:"varint,5,opt,name=creatorUserId,proto3" json:"creatorUserId,omitempty"`
	OwnerUserId      *uint64                `protobuf:"varint,6,opt,name=ownerUserId,proto3,oneof" json:"ownerUserId,omitempty"`
	Status           TaskStatus             `protobuf:"varint,7,opt,name=status,proto3,enum=TaskStatus" json:"status,omitempty"`
	IsScheduled      bool                   `protobuf:"varint,8,opt,name=isScheduled,proto3" json:"isScheduled,omitempty"`
	IsPlanned        bool                   `protobuf:"varint,9,opt,name=isPlanned,proto3" json:"isPlanned,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt        *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updatedAt,proto3,oneof" json:"updatedAt,omitempty"`
	DeliveredAt      *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=deliveredAt,proto3,oneof" json:"deliveredAt,omitempty"`
	DueAt            *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=dueAt,proto3,oneof" json:"dueAt,omitempty"`
	Effort           *durationpb.Duration   `protobuf:"bytes,14,opt,name=effort,proto3,oneof" json:"effort,omitempty"`
	Priority         *Priority              `protobuf:"varint,15,opt,name=priority,proto3,enum=Priority,oneof" json:"priority,omitempty"`
	AvailableActions []TaskAction           `protobuf:"varint,16,rep,packed,name=availableActions,proto3,enum=TaskAction" json:"availableActions,omitempty"`
	CommentsThreadId uint64                 `protobuf:"varint,17,opt,name=commentsThreadId,proto3" json:"commentsThreadId,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teamy_message_task_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_teamy_message_task_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_teamy_message_task_proto_rawDescGZIP(), []int{0}
}

func (x *Task) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Task) GetGoal() string {
	if x != nil {
		return x.Goal
	}
	return ""
}

func (x *Task) GetContext() string {
	if x != nil && x.Context != nil {
		return *x.Context
	}
	return ""
}

func (x *Task) GetOwningTeamId() uint64 {
	if x != nil {
		return x.OwningTeamId
	}
	return 0
}

func (x *Task) GetCreatorUserId() uint64 {
	if x != nil {
		return x.CreatorUserId
	}
	return 0
}

func (x *Task) GetOwnerUserId() uint64 {
	if x != nil && x.OwnerUserId != nil {
		return *x.OwnerUserId
	}
	return 0
}

func (x *Task) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_TODO
}

func (x *Task) GetIsScheduled() bool {
	if x != nil {
		return x.IsScheduled
	}
	return false
}

func (x *Task) GetIsPlanned() bool {
	if x != nil {
		return x.IsPlanned
	}
	return false
}

func (x *Task) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Task) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Task) GetDeliveredAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeliveredAt
	}
	return nil
}

func (x *Task) GetDueAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DueAt
	}
	return nil
}

func (x *Task) GetEffort() *durationpb.Duration {
	if x != nil {
		return x.Effort
	}
	return nil
}

func (x *Task) GetPriority() Priority {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return Priority_URGENT
}

func (x *Task) GetAvailableActions() []TaskAction {
	if x != nil {
		return x.AvailableActions
	}
	return nil
}

func (x *Task) GetCommentsThreadId() uint64 {
	if x != nil {
		return x.CommentsThreadId
	}
	return 0
}

var File_teamy_message_task_proto protoreflect.FileDescriptor

var file_teamy_message_task_proto_rawDesc = []byte{
	0x0a, 0x18, 0x74, 0x65, 0x61, 0x6d, 0x79, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x74, 0x65, 0x61,
	0x6d, 0x79, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb7, 0x06, 0x0a, 0x04, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x77, 0x6e, 0x69, 0x6e, 0x67, 0x54,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6f, 0x77, 0x6e,
	0x69, 0x6e, 0x67, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69,
	0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x05, 0x64, 0x75, 0x65, 0x41, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x48, 0x04, 0x52, 0x05, 0x64, 0x75, 0x65, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x36,
	0x0a, 0x06, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x05, 0x52, 0x06, 0x65, 0x66, 0x66,
	0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x48, 0x06, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x37, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x41,
	0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x64, 0x75, 0x65, 0x41, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x65, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x2a, 0x5d, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x4f, 0x44, 0x4f, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x49,
	0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x57, 0x41, 0x49,
	0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45,
	0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x45, 0x44,
	0x10, 0x05, 0x2a, 0x5c, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x53, 0x53, 0x49, 0x47,
	0x4e, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x11, 0x0a,
	0x0d, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x04,
	0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74,
	0x65, 0x61, 0x6d, 0x79, 0x61, 0x70, 0x70, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2f, 0x70, 0x62, 0x2f, 0x70, 0x62, 0x67, 0x6f, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x79, 0x2f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_teamy_message_task_proto_rawDescOnce sync.Once
	file_teamy_message_task_proto_rawDescData = file_teamy_message_task_proto_rawDesc
)

func file_teamy_message_task_proto_rawDescGZIP() []byte {
	file_teamy_message_task_proto_rawDescOnce.Do(func() {
		file_teamy_message_task_proto_rawDescData = protoimpl.X.CompressGZIP(file_teamy_message_task_proto_rawDescData)
	})
	return file_teamy_message_task_proto_rawDescData
}

var file_teamy_message_task_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_teamy_message_task_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_teamy_message_task_proto_goTypes = []any{
	(TaskStatus)(0),               // 0: TaskStatus
	(TaskAction)(0),               // 1: TaskAction
	(*Task)(nil),                  // 2: Task
	(*timestamppb.Timestamp)(nil), // 3: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),   // 4: google.protobuf.Duration
	(Priority)(0),                 // 5: Priority
}
var file_teamy_message_task_proto_depIdxs = []int32{
	0, // 0: Task.status:type_name -> TaskStatus
	3, // 1: Task.createdAt:type_name -> google.protobuf.Timestamp
	3, // 2: Task.updatedAt:type_name -> google.protobuf.Timestamp
	3, // 3: Task.deliveredAt:type_name -> google.protobuf.Timestamp
	3, // 4: Task.dueAt:type_name -> google.protobuf.Timestamp
	4, // 5: Task.effort:type_name -> google.protobuf.Duration
	5, // 6: Task.priority:type_name -> Priority
	1, // 7: Task.availableActions:type_name -> TaskAction
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_teamy_message_task_proto_init() }
func file_teamy_message_task_proto_init() {
	if File_teamy_message_task_proto != nil {
		return
	}
	file_teamy_message_priority_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_teamy_message_task_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_teamy_message_task_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_teamy_message_task_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_teamy_message_task_proto_goTypes,
		DependencyIndexes: file_teamy_message_task_proto_depIdxs,
		EnumInfos:         file_teamy_message_task_proto_enumTypes,
		MessageInfos:      file_teamy_message_task_proto_msgTypes,
	}.Build()
	File_teamy_message_task_proto = out.File
	file_teamy_message_task_proto_rawDesc = nil
	file_teamy_message_task_proto_goTypes = nil
	file_teamy_message_task_proto_depIdxs = nil
}
