// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: teamy/task_link.proto

package teamy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	TaskLinkService_GetTaskLink_FullMethodName    = "/TaskLinkService/GetTaskLink"
	TaskLinkService_ListTaskLinks_FullMethodName  = "/TaskLinkService/ListTaskLinks"
	TaskLinkService_CreateTaskLink_FullMethodName = "/TaskLinkService/CreateTaskLink"
	TaskLinkService_DeleteTaskLink_FullMethodName = "/TaskLinkService/DeleteTaskLink"
)

// TaskLinkServiceClient is the client API for TaskLinkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskLinkServiceClient interface {
	GetTaskLink(ctx context.Context, in *GetTaskLinkRequest, opts ...grpc.CallOption) (*GetTaskLinkResponse, error)
	ListTaskLinks(ctx context.Context, in *ListTaskLinksRequest, opts ...grpc.CallOption) (*ListTaskLinksResponse, error)
	CreateTaskLink(ctx context.Context, in *CreateTaskLinkRequest, opts ...grpc.CallOption) (*CreateTaskLinkResponse, error)
	DeleteTaskLink(ctx context.Context, in *DeleteTaskLinkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type taskLinkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskLinkServiceClient(cc grpc.ClientConnInterface) TaskLinkServiceClient {
	return &taskLinkServiceClient{cc}
}

func (c *taskLinkServiceClient) GetTaskLink(ctx context.Context, in *GetTaskLinkRequest, opts ...grpc.CallOption) (*GetTaskLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTaskLinkResponse)
	err := c.cc.Invoke(ctx, TaskLinkService_GetTaskLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskLinkServiceClient) ListTaskLinks(ctx context.Context, in *ListTaskLinksRequest, opts ...grpc.CallOption) (*ListTaskLinksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTaskLinksResponse)
	err := c.cc.Invoke(ctx, TaskLinkService_ListTaskLinks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskLinkServiceClient) CreateTaskLink(ctx context.Context, in *CreateTaskLinkRequest, opts ...grpc.CallOption) (*CreateTaskLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTaskLinkResponse)
	err := c.cc.Invoke(ctx, TaskLinkService_CreateTaskLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskLinkServiceClient) DeleteTaskLink(ctx context.Context, in *DeleteTaskLinkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TaskLinkService_DeleteTaskLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskLinkServiceServer is the server API for TaskLinkService service.
// All implementations must embed UnimplementedTaskLinkServiceServer
// for forward compatibility
type TaskLinkServiceServer interface {
	GetTaskLink(context.Context, *GetTaskLinkRequest) (*GetTaskLinkResponse, error)
	ListTaskLinks(context.Context, *ListTaskLinksRequest) (*ListTaskLinksResponse, error)
	CreateTaskLink(context.Context, *CreateTaskLinkRequest) (*CreateTaskLinkResponse, error)
	DeleteTaskLink(context.Context, *DeleteTaskLinkRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedTaskLinkServiceServer()
}

// UnimplementedTaskLinkServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTaskLinkServiceServer struct {
}

func (UnimplementedTaskLinkServiceServer) GetTaskLink(context.Context, *GetTaskLinkRequest) (*GetTaskLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskLink not implemented")
}
func (UnimplementedTaskLinkServiceServer) ListTaskLinks(context.Context, *ListTaskLinksRequest) (*ListTaskLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTaskLinks not implemented")
}
func (UnimplementedTaskLinkServiceServer) CreateTaskLink(context.Context, *CreateTaskLinkRequest) (*CreateTaskLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaskLink not implemented")
}
func (UnimplementedTaskLinkServiceServer) DeleteTaskLink(context.Context, *DeleteTaskLinkRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTaskLink not implemented")
}
func (UnimplementedTaskLinkServiceServer) mustEmbedUnimplementedTaskLinkServiceServer() {}

// UnsafeTaskLinkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskLinkServiceServer will
// result in compilation errors.
type UnsafeTaskLinkServiceServer interface {
	mustEmbedUnimplementedTaskLinkServiceServer()
}

func RegisterTaskLinkServiceServer(s grpc.ServiceRegistrar, srv TaskLinkServiceServer) {
	s.RegisterService(&TaskLinkService_ServiceDesc, srv)
}

func _TaskLinkService_GetTaskLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskLinkServiceServer).GetTaskLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskLinkService_GetTaskLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskLinkServiceServer).GetTaskLink(ctx, req.(*GetTaskLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskLinkService_ListTaskLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaskLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskLinkServiceServer).ListTaskLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskLinkService_ListTaskLinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskLinkServiceServer).ListTaskLinks(ctx, req.(*ListTaskLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskLinkService_CreateTaskLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskLinkServiceServer).CreateTaskLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskLinkService_CreateTaskLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskLinkServiceServer).CreateTaskLink(ctx, req.(*CreateTaskLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskLinkService_DeleteTaskLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskLinkServiceServer).DeleteTaskLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskLinkService_DeleteTaskLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskLinkServiceServer).DeleteTaskLink(ctx, req.(*DeleteTaskLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskLinkService_ServiceDesc is the grpc.ServiceDesc for TaskLinkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskLinkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TaskLinkService",
	HandlerType: (*TaskLinkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTaskLink",
			Handler:    _TaskLinkService_GetTaskLink_Handler,
		},
		{
			MethodName: "ListTaskLinks",
			Handler:    _TaskLinkService_ListTaskLinks_Handler,
		},
		{
			MethodName: "CreateTaskLink",
			Handler:    _TaskLinkService_CreateTaskLink_Handler,
		},
		{
			MethodName: "DeleteTaskLink",
			Handler:    _TaskLinkService_DeleteTaskLink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teamy/task_link.proto",
}
