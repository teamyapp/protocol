// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: teamy/task_link.proto

package pbteamy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TaskLink_CreateTaskLink_FullMethodName = "/TaskLink/CreateTaskLink"
	TaskLink_DeleteTaskLink_FullMethodName = "/TaskLink/DeleteTaskLink"
)

// TaskLinkClient is the client API for TaskLink service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskLinkClient interface {
	CreateTaskLink(ctx context.Context, in *CreateTaskLinkRequest, opts ...grpc.CallOption) (*CreateTaskLinkResponse, error)
	DeleteTaskLink(ctx context.Context, in *DeleteTaskLinkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type taskLinkClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskLinkClient(cc grpc.ClientConnInterface) TaskLinkClient {
	return &taskLinkClient{cc}
}

func (c *taskLinkClient) CreateTaskLink(ctx context.Context, in *CreateTaskLinkRequest, opts ...grpc.CallOption) (*CreateTaskLinkResponse, error) {
	out := new(CreateTaskLinkResponse)
	err := c.cc.Invoke(ctx, TaskLink_CreateTaskLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskLinkClient) DeleteTaskLink(ctx context.Context, in *DeleteTaskLinkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TaskLink_DeleteTaskLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskLinkServer is the server API for TaskLink service.
// All implementations must embed UnimplementedTaskLinkServer
// for forward compatibility
type TaskLinkServer interface {
	CreateTaskLink(context.Context, *CreateTaskLinkRequest) (*CreateTaskLinkResponse, error)
	DeleteTaskLink(context.Context, *DeleteTaskLinkRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedTaskLinkServer()
}

// UnimplementedTaskLinkServer must be embedded to have forward compatible implementations.
type UnimplementedTaskLinkServer struct {
}

func (UnimplementedTaskLinkServer) CreateTaskLink(context.Context, *CreateTaskLinkRequest) (*CreateTaskLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaskLink not implemented")
}
func (UnimplementedTaskLinkServer) DeleteTaskLink(context.Context, *DeleteTaskLinkRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTaskLink not implemented")
}
func (UnimplementedTaskLinkServer) mustEmbedUnimplementedTaskLinkServer() {}

// UnsafeTaskLinkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskLinkServer will
// result in compilation errors.
type UnsafeTaskLinkServer interface {
	mustEmbedUnimplementedTaskLinkServer()
}

func RegisterTaskLinkServer(s grpc.ServiceRegistrar, srv TaskLinkServer) {
	s.RegisterService(&TaskLink_ServiceDesc, srv)
}

func _TaskLink_CreateTaskLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskLinkServer).CreateTaskLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskLink_CreateTaskLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskLinkServer).CreateTaskLink(ctx, req.(*CreateTaskLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskLink_DeleteTaskLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskLinkServer).DeleteTaskLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskLink_DeleteTaskLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskLinkServer).DeleteTaskLink(ctx, req.(*DeleteTaskLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskLink_ServiceDesc is the grpc.ServiceDesc for TaskLink service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskLink_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TaskLink",
	HandlerType: (*TaskLinkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTaskLink",
			Handler:    _TaskLink_CreateTaskLink_Handler,
		},
		{
			MethodName: "DeleteTaskLink",
			Handler:    _TaskLink_DeleteTaskLink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teamy/task_link.proto",
}
