// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.1
// source: teamy/version_selector_service.proto

package teamy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	VersionSelectorService_GetVersionSelector_FullMethodName              = "/VersionSelectorService/GetVersionSelector"
	VersionSelectorService_ListVersionSelectors_FullMethodName            = "/VersionSelectorService/ListVersionSelectors"
	VersionSelectorService_CreateStaticVersionSelector_FullMethodName     = "/VersionSelectorService/CreateStaticVersionSelector"
	VersionSelectorService_CreateExperimentVersionSelector_FullMethodName = "/VersionSelectorService/CreateExperimentVersionSelector"
	VersionSelectorService_UpdateVersionSelector_FullMethodName           = "/VersionSelectorService/UpdateVersionSelector"
	VersionSelectorService_DeleteVersionSelector_FullMethodName           = "/VersionSelectorService/DeleteVersionSelector"
)

// VersionSelectorServiceClient is the client API for VersionSelectorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VersionSelectorServiceClient interface {
	GetVersionSelector(ctx context.Context, in *GetVersionSelectorRequest, opts ...grpc.CallOption) (*GetVersionSelectorResponse, error)
	ListVersionSelectors(ctx context.Context, in *ListVersionSelectorsRequest, opts ...grpc.CallOption) (*ListVersionSelectorsResponse, error)
	CreateStaticVersionSelector(ctx context.Context, in *CreateStaticVersionSelectorRequest, opts ...grpc.CallOption) (*CreateStaticVersionSelectorResponse, error)
	CreateExperimentVersionSelector(ctx context.Context, in *CreateExperimentVersionSelectorRequest, opts ...grpc.CallOption) (*CreateExperimentVersionSelectorResponse, error)
	UpdateVersionSelector(ctx context.Context, in *UpdateVersionSelectorRequest, opts ...grpc.CallOption) (*UpdateVersionSelectorResponse, error)
	DeleteVersionSelector(ctx context.Context, in *DeleteVersionSelectorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type versionSelectorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVersionSelectorServiceClient(cc grpc.ClientConnInterface) VersionSelectorServiceClient {
	return &versionSelectorServiceClient{cc}
}

func (c *versionSelectorServiceClient) GetVersionSelector(ctx context.Context, in *GetVersionSelectorRequest, opts ...grpc.CallOption) (*GetVersionSelectorResponse, error) {
	out := new(GetVersionSelectorResponse)
	err := c.cc.Invoke(ctx, VersionSelectorService_GetVersionSelector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versionSelectorServiceClient) ListVersionSelectors(ctx context.Context, in *ListVersionSelectorsRequest, opts ...grpc.CallOption) (*ListVersionSelectorsResponse, error) {
	out := new(ListVersionSelectorsResponse)
	err := c.cc.Invoke(ctx, VersionSelectorService_ListVersionSelectors_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versionSelectorServiceClient) CreateStaticVersionSelector(ctx context.Context, in *CreateStaticVersionSelectorRequest, opts ...grpc.CallOption) (*CreateStaticVersionSelectorResponse, error) {
	out := new(CreateStaticVersionSelectorResponse)
	err := c.cc.Invoke(ctx, VersionSelectorService_CreateStaticVersionSelector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versionSelectorServiceClient) CreateExperimentVersionSelector(ctx context.Context, in *CreateExperimentVersionSelectorRequest, opts ...grpc.CallOption) (*CreateExperimentVersionSelectorResponse, error) {
	out := new(CreateExperimentVersionSelectorResponse)
	err := c.cc.Invoke(ctx, VersionSelectorService_CreateExperimentVersionSelector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versionSelectorServiceClient) UpdateVersionSelector(ctx context.Context, in *UpdateVersionSelectorRequest, opts ...grpc.CallOption) (*UpdateVersionSelectorResponse, error) {
	out := new(UpdateVersionSelectorResponse)
	err := c.cc.Invoke(ctx, VersionSelectorService_UpdateVersionSelector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versionSelectorServiceClient) DeleteVersionSelector(ctx context.Context, in *DeleteVersionSelectorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VersionSelectorService_DeleteVersionSelector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VersionSelectorServiceServer is the server API for VersionSelectorService service.
// All implementations must embed UnimplementedVersionSelectorServiceServer
// for forward compatibility
type VersionSelectorServiceServer interface {
	GetVersionSelector(context.Context, *GetVersionSelectorRequest) (*GetVersionSelectorResponse, error)
	ListVersionSelectors(context.Context, *ListVersionSelectorsRequest) (*ListVersionSelectorsResponse, error)
	CreateStaticVersionSelector(context.Context, *CreateStaticVersionSelectorRequest) (*CreateStaticVersionSelectorResponse, error)
	CreateExperimentVersionSelector(context.Context, *CreateExperimentVersionSelectorRequest) (*CreateExperimentVersionSelectorResponse, error)
	UpdateVersionSelector(context.Context, *UpdateVersionSelectorRequest) (*UpdateVersionSelectorResponse, error)
	DeleteVersionSelector(context.Context, *DeleteVersionSelectorRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedVersionSelectorServiceServer()
}

// UnimplementedVersionSelectorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVersionSelectorServiceServer struct {
}

func (UnimplementedVersionSelectorServiceServer) GetVersionSelector(context.Context, *GetVersionSelectorRequest) (*GetVersionSelectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersionSelector not implemented")
}
func (UnimplementedVersionSelectorServiceServer) ListVersionSelectors(context.Context, *ListVersionSelectorsRequest) (*ListVersionSelectorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVersionSelectors not implemented")
}
func (UnimplementedVersionSelectorServiceServer) CreateStaticVersionSelector(context.Context, *CreateStaticVersionSelectorRequest) (*CreateStaticVersionSelectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStaticVersionSelector not implemented")
}
func (UnimplementedVersionSelectorServiceServer) CreateExperimentVersionSelector(context.Context, *CreateExperimentVersionSelectorRequest) (*CreateExperimentVersionSelectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExperimentVersionSelector not implemented")
}
func (UnimplementedVersionSelectorServiceServer) UpdateVersionSelector(context.Context, *UpdateVersionSelectorRequest) (*UpdateVersionSelectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVersionSelector not implemented")
}
func (UnimplementedVersionSelectorServiceServer) DeleteVersionSelector(context.Context, *DeleteVersionSelectorRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVersionSelector not implemented")
}
func (UnimplementedVersionSelectorServiceServer) mustEmbedUnimplementedVersionSelectorServiceServer() {
}

// UnsafeVersionSelectorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VersionSelectorServiceServer will
// result in compilation errors.
type UnsafeVersionSelectorServiceServer interface {
	mustEmbedUnimplementedVersionSelectorServiceServer()
}

func RegisterVersionSelectorServiceServer(s grpc.ServiceRegistrar, srv VersionSelectorServiceServer) {
	s.RegisterService(&VersionSelectorService_ServiceDesc, srv)
}

func _VersionSelectorService_GetVersionSelector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionSelectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionSelectorServiceServer).GetVersionSelector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VersionSelectorService_GetVersionSelector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionSelectorServiceServer).GetVersionSelector(ctx, req.(*GetVersionSelectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersionSelectorService_ListVersionSelectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVersionSelectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionSelectorServiceServer).ListVersionSelectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VersionSelectorService_ListVersionSelectors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionSelectorServiceServer).ListVersionSelectors(ctx, req.(*ListVersionSelectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersionSelectorService_CreateStaticVersionSelector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStaticVersionSelectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionSelectorServiceServer).CreateStaticVersionSelector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VersionSelectorService_CreateStaticVersionSelector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionSelectorServiceServer).CreateStaticVersionSelector(ctx, req.(*CreateStaticVersionSelectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersionSelectorService_CreateExperimentVersionSelector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExperimentVersionSelectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionSelectorServiceServer).CreateExperimentVersionSelector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VersionSelectorService_CreateExperimentVersionSelector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionSelectorServiceServer).CreateExperimentVersionSelector(ctx, req.(*CreateExperimentVersionSelectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersionSelectorService_UpdateVersionSelector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVersionSelectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionSelectorServiceServer).UpdateVersionSelector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VersionSelectorService_UpdateVersionSelector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionSelectorServiceServer).UpdateVersionSelector(ctx, req.(*UpdateVersionSelectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersionSelectorService_DeleteVersionSelector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVersionSelectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionSelectorServiceServer).DeleteVersionSelector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VersionSelectorService_DeleteVersionSelector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionSelectorServiceServer).DeleteVersionSelector(ctx, req.(*DeleteVersionSelectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VersionSelectorService_ServiceDesc is the grpc.ServiceDesc for VersionSelectorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VersionSelectorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "VersionSelectorService",
	HandlerType: (*VersionSelectorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersionSelector",
			Handler:    _VersionSelectorService_GetVersionSelector_Handler,
		},
		{
			MethodName: "ListVersionSelectors",
			Handler:    _VersionSelectorService_ListVersionSelectors_Handler,
		},
		{
			MethodName: "CreateStaticVersionSelector",
			Handler:    _VersionSelectorService_CreateStaticVersionSelector_Handler,
		},
		{
			MethodName: "CreateExperimentVersionSelector",
			Handler:    _VersionSelectorService_CreateExperimentVersionSelector_Handler,
		},
		{
			MethodName: "UpdateVersionSelector",
			Handler:    _VersionSelectorService_UpdateVersionSelector_Handler,
		},
		{
			MethodName: "DeleteVersionSelector",
			Handler:    _VersionSelectorService_DeleteVersionSelector_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teamy/version_selector_service.proto",
}
