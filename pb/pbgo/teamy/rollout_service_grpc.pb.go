// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: teamy/rollout_service.proto

package pbteamy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RolloutService_GetRollout_FullMethodName       = "/RolloutService/GetRollout"
	RolloutService_ListRollouts_FullMethodName     = "/RolloutService/ListRollouts"
	RolloutService_CreateAppRollout_FullMethodName = "/RolloutService/CreateAppRollout"
	RolloutService_UpdateRollout_FullMethodName    = "/RolloutService/UpdateRollout"
	RolloutService_DeleteRollout_FullMethodName    = "/RolloutService/DeleteRollout"
)

// RolloutServiceClient is the client API for RolloutService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RolloutServiceClient interface {
	GetRollout(ctx context.Context, in *GetRolloutRequest, opts ...grpc.CallOption) (*GetRolloutResponse, error)
	ListRollouts(ctx context.Context, in *ListRolloutsRequest, opts ...grpc.CallOption) (*ListRolloutsResponse, error)
	CreateAppRollout(ctx context.Context, in *CreateAppRolloutRequest, opts ...grpc.CallOption) (*CreateAppRolloutResponse, error)
	UpdateRollout(ctx context.Context, in *UpdateRolloutRequest, opts ...grpc.CallOption) (*UpdateRolloutResponse, error)
	DeleteRollout(ctx context.Context, in *DeleteRolloutRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type rolloutServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRolloutServiceClient(cc grpc.ClientConnInterface) RolloutServiceClient {
	return &rolloutServiceClient{cc}
}

func (c *rolloutServiceClient) GetRollout(ctx context.Context, in *GetRolloutRequest, opts ...grpc.CallOption) (*GetRolloutResponse, error) {
	out := new(GetRolloutResponse)
	err := c.cc.Invoke(ctx, RolloutService_GetRollout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolloutServiceClient) ListRollouts(ctx context.Context, in *ListRolloutsRequest, opts ...grpc.CallOption) (*ListRolloutsResponse, error) {
	out := new(ListRolloutsResponse)
	err := c.cc.Invoke(ctx, RolloutService_ListRollouts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolloutServiceClient) CreateAppRollout(ctx context.Context, in *CreateAppRolloutRequest, opts ...grpc.CallOption) (*CreateAppRolloutResponse, error) {
	out := new(CreateAppRolloutResponse)
	err := c.cc.Invoke(ctx, RolloutService_CreateAppRollout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolloutServiceClient) UpdateRollout(ctx context.Context, in *UpdateRolloutRequest, opts ...grpc.CallOption) (*UpdateRolloutResponse, error) {
	out := new(UpdateRolloutResponse)
	err := c.cc.Invoke(ctx, RolloutService_UpdateRollout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolloutServiceClient) DeleteRollout(ctx context.Context, in *DeleteRolloutRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RolloutService_DeleteRollout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RolloutServiceServer is the server API for RolloutService service.
// All implementations must embed UnimplementedRolloutServiceServer
// for forward compatibility
type RolloutServiceServer interface {
	GetRollout(context.Context, *GetRolloutRequest) (*GetRolloutResponse, error)
	ListRollouts(context.Context, *ListRolloutsRequest) (*ListRolloutsResponse, error)
	CreateAppRollout(context.Context, *CreateAppRolloutRequest) (*CreateAppRolloutResponse, error)
	UpdateRollout(context.Context, *UpdateRolloutRequest) (*UpdateRolloutResponse, error)
	DeleteRollout(context.Context, *DeleteRolloutRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedRolloutServiceServer()
}

// UnimplementedRolloutServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRolloutServiceServer struct {
}

func (UnimplementedRolloutServiceServer) GetRollout(context.Context, *GetRolloutRequest) (*GetRolloutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRollout not implemented")
}
func (UnimplementedRolloutServiceServer) ListRollouts(context.Context, *ListRolloutsRequest) (*ListRolloutsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRollouts not implemented")
}
func (UnimplementedRolloutServiceServer) CreateAppRollout(context.Context, *CreateAppRolloutRequest) (*CreateAppRolloutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppRollout not implemented")
}
func (UnimplementedRolloutServiceServer) UpdateRollout(context.Context, *UpdateRolloutRequest) (*UpdateRolloutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRollout not implemented")
}
func (UnimplementedRolloutServiceServer) DeleteRollout(context.Context, *DeleteRolloutRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRollout not implemented")
}
func (UnimplementedRolloutServiceServer) mustEmbedUnimplementedRolloutServiceServer() {}

// UnsafeRolloutServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RolloutServiceServer will
// result in compilation errors.
type UnsafeRolloutServiceServer interface {
	mustEmbedUnimplementedRolloutServiceServer()
}

func RegisterRolloutServiceServer(s grpc.ServiceRegistrar, srv RolloutServiceServer) {
	s.RegisterService(&RolloutService_ServiceDesc, srv)
}

func _RolloutService_GetRollout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRolloutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolloutServiceServer).GetRollout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolloutService_GetRollout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolloutServiceServer).GetRollout(ctx, req.(*GetRolloutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolloutService_ListRollouts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolloutsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolloutServiceServer).ListRollouts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolloutService_ListRollouts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolloutServiceServer).ListRollouts(ctx, req.(*ListRolloutsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolloutService_CreateAppRollout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppRolloutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolloutServiceServer).CreateAppRollout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolloutService_CreateAppRollout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolloutServiceServer).CreateAppRollout(ctx, req.(*CreateAppRolloutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolloutService_UpdateRollout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRolloutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolloutServiceServer).UpdateRollout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolloutService_UpdateRollout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolloutServiceServer).UpdateRollout(ctx, req.(*UpdateRolloutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolloutService_DeleteRollout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRolloutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolloutServiceServer).DeleteRollout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolloutService_DeleteRollout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolloutServiceServer).DeleteRollout(ctx, req.(*DeleteRolloutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RolloutService_ServiceDesc is the grpc.ServiceDesc for RolloutService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RolloutService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RolloutService",
	HandlerType: (*RolloutServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRollout",
			Handler:    _RolloutService_GetRollout_Handler,
		},
		{
			MethodName: "ListRollouts",
			Handler:    _RolloutService_ListRollouts_Handler,
		},
		{
			MethodName: "CreateAppRollout",
			Handler:    _RolloutService_CreateAppRollout_Handler,
		},
		{
			MethodName: "UpdateRollout",
			Handler:    _RolloutService_UpdateRollout_Handler,
		},
		{
			MethodName: "DeleteRollout",
			Handler:    _RolloutService_DeleteRollout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teamy/rollout_service.proto",
}
