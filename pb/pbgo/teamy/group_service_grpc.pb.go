// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.1
// source: teamy/group_service.proto

package teamy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GroupSerivce_GetGroup_FullMethodName              = "/GroupSerivce/GetGroup"
	GroupSerivce_ListGroups_FullMethodName            = "/GroupSerivce/ListGroups"
	GroupSerivce_CreateStaticUserGroup_FullMethodName = "/GroupSerivce/CreateStaticUserGroup"
	GroupSerivce_CreateStaticTeamGroup_FullMethodName = "/GroupSerivce/CreateStaticTeamGroup"
	GroupSerivce_CreateFilterGroup_FullMethodName     = "/GroupSerivce/CreateFilterGroup"
	GroupSerivce_UpdateGroup_FullMethodName           = "/GroupSerivce/UpdateGroup"
	GroupSerivce_DeleteGroup_FullMethodName           = "/GroupSerivce/DeleteGroup"
)

// GroupSerivceClient is the client API for GroupSerivce service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupSerivceClient interface {
	GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error)
	ListGroups(ctx context.Context, in *ListGroupsRequest, opts ...grpc.CallOption) (*ListGroupsResponse, error)
	CreateStaticUserGroup(ctx context.Context, in *CreateStaticUserGroupRequest, opts ...grpc.CallOption) (*CreateStaticUserGroupResponse, error)
	CreateStaticTeamGroup(ctx context.Context, in *CreateStaticTeamGroupRequest, opts ...grpc.CallOption) (*CreateStaticTeamGroupResponse, error)
	CreateFilterGroup(ctx context.Context, in *CreateFilterGroupRequest, opts ...grpc.CallOption) (*CreateFilterGroupResponse, error)
	UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*UpdateGroupResponse, error)
	DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type groupSerivceClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupSerivceClient(cc grpc.ClientConnInterface) GroupSerivceClient {
	return &groupSerivceClient{cc}
}

func (c *groupSerivceClient) GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error) {
	out := new(GetGroupResponse)
	err := c.cc.Invoke(ctx, GroupSerivce_GetGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSerivceClient) ListGroups(ctx context.Context, in *ListGroupsRequest, opts ...grpc.CallOption) (*ListGroupsResponse, error) {
	out := new(ListGroupsResponse)
	err := c.cc.Invoke(ctx, GroupSerivce_ListGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSerivceClient) CreateStaticUserGroup(ctx context.Context, in *CreateStaticUserGroupRequest, opts ...grpc.CallOption) (*CreateStaticUserGroupResponse, error) {
	out := new(CreateStaticUserGroupResponse)
	err := c.cc.Invoke(ctx, GroupSerivce_CreateStaticUserGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSerivceClient) CreateStaticTeamGroup(ctx context.Context, in *CreateStaticTeamGroupRequest, opts ...grpc.CallOption) (*CreateStaticTeamGroupResponse, error) {
	out := new(CreateStaticTeamGroupResponse)
	err := c.cc.Invoke(ctx, GroupSerivce_CreateStaticTeamGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSerivceClient) CreateFilterGroup(ctx context.Context, in *CreateFilterGroupRequest, opts ...grpc.CallOption) (*CreateFilterGroupResponse, error) {
	out := new(CreateFilterGroupResponse)
	err := c.cc.Invoke(ctx, GroupSerivce_CreateFilterGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSerivceClient) UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*UpdateGroupResponse, error) {
	out := new(UpdateGroupResponse)
	err := c.cc.Invoke(ctx, GroupSerivce_UpdateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSerivceClient) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GroupSerivce_DeleteGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupSerivceServer is the server API for GroupSerivce service.
// All implementations must embed UnimplementedGroupSerivceServer
// for forward compatibility
type GroupSerivceServer interface {
	GetGroup(context.Context, *GetGroupRequest) (*GetGroupResponse, error)
	ListGroups(context.Context, *ListGroupsRequest) (*ListGroupsResponse, error)
	CreateStaticUserGroup(context.Context, *CreateStaticUserGroupRequest) (*CreateStaticUserGroupResponse, error)
	CreateStaticTeamGroup(context.Context, *CreateStaticTeamGroupRequest) (*CreateStaticTeamGroupResponse, error)
	CreateFilterGroup(context.Context, *CreateFilterGroupRequest) (*CreateFilterGroupResponse, error)
	UpdateGroup(context.Context, *UpdateGroupRequest) (*UpdateGroupResponse, error)
	DeleteGroup(context.Context, *DeleteGroupRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedGroupSerivceServer()
}

// UnimplementedGroupSerivceServer must be embedded to have forward compatible implementations.
type UnimplementedGroupSerivceServer struct {
}

func (UnimplementedGroupSerivceServer) GetGroup(context.Context, *GetGroupRequest) (*GetGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedGroupSerivceServer) ListGroups(context.Context, *ListGroupsRequest) (*ListGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroups not implemented")
}
func (UnimplementedGroupSerivceServer) CreateStaticUserGroup(context.Context, *CreateStaticUserGroupRequest) (*CreateStaticUserGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStaticUserGroup not implemented")
}
func (UnimplementedGroupSerivceServer) CreateStaticTeamGroup(context.Context, *CreateStaticTeamGroupRequest) (*CreateStaticTeamGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStaticTeamGroup not implemented")
}
func (UnimplementedGroupSerivceServer) CreateFilterGroup(context.Context, *CreateFilterGroupRequest) (*CreateFilterGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFilterGroup not implemented")
}
func (UnimplementedGroupSerivceServer) UpdateGroup(context.Context, *UpdateGroupRequest) (*UpdateGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedGroupSerivceServer) DeleteGroup(context.Context, *DeleteGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedGroupSerivceServer) mustEmbedUnimplementedGroupSerivceServer() {}

// UnsafeGroupSerivceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupSerivceServer will
// result in compilation errors.
type UnsafeGroupSerivceServer interface {
	mustEmbedUnimplementedGroupSerivceServer()
}

func RegisterGroupSerivceServer(s grpc.ServiceRegistrar, srv GroupSerivceServer) {
	s.RegisterService(&GroupSerivce_ServiceDesc, srv)
}

func _GroupSerivce_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSerivceServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSerivce_GetGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSerivceServer).GetGroup(ctx, req.(*GetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSerivce_ListGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSerivceServer).ListGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSerivce_ListGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSerivceServer).ListGroups(ctx, req.(*ListGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSerivce_CreateStaticUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStaticUserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSerivceServer).CreateStaticUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSerivce_CreateStaticUserGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSerivceServer).CreateStaticUserGroup(ctx, req.(*CreateStaticUserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSerivce_CreateStaticTeamGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStaticTeamGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSerivceServer).CreateStaticTeamGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSerivce_CreateStaticTeamGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSerivceServer).CreateStaticTeamGroup(ctx, req.(*CreateStaticTeamGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSerivce_CreateFilterGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFilterGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSerivceServer).CreateFilterGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSerivce_CreateFilterGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSerivceServer).CreateFilterGroup(ctx, req.(*CreateFilterGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSerivce_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSerivceServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSerivce_UpdateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSerivceServer).UpdateGroup(ctx, req.(*UpdateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSerivce_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSerivceServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSerivce_DeleteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSerivceServer).DeleteGroup(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupSerivce_ServiceDesc is the grpc.ServiceDesc for GroupSerivce service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupSerivce_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GroupSerivce",
	HandlerType: (*GroupSerivceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGroup",
			Handler:    _GroupSerivce_GetGroup_Handler,
		},
		{
			MethodName: "ListGroups",
			Handler:    _GroupSerivce_ListGroups_Handler,
		},
		{
			MethodName: "CreateStaticUserGroup",
			Handler:    _GroupSerivce_CreateStaticUserGroup_Handler,
		},
		{
			MethodName: "CreateStaticTeamGroup",
			Handler:    _GroupSerivce_CreateStaticTeamGroup_Handler,
		},
		{
			MethodName: "CreateFilterGroup",
			Handler:    _GroupSerivce_CreateFilterGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _GroupSerivce_UpdateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _GroupSerivce_DeleteGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teamy/group_service.proto",
}
