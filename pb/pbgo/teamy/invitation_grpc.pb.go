// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: teamy/invitation.proto

package pbteamy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Invitation_CreateInvitation_FullMethodName  = "/Invitation/CreateInvitation"
	Invitation_UpdateInvitation_FullMethodName  = "/Invitation/UpdateInvitation"
	Invitation_AcceptInvitation_FullMethodName  = "/Invitation/AcceptInvitation"
	Invitation_DeclineInvitation_FullMethodName = "/Invitation/DeclineInvitation"
	Invitation_DeleteInvitation_FullMethodName  = "/Invitation/DeleteInvitation"
)

// InvitationClient is the client API for Invitation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InvitationClient interface {
	CreateInvitation(ctx context.Context, in *CreateInvitationRequest, opts ...grpc.CallOption) (*CreateInvitationResponse, error)
	UpdateInvitation(ctx context.Context, in *UpdateInvitationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AcceptInvitation(ctx context.Context, in *AcceptInvitationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeclineInvitation(ctx context.Context, in *DeclineInvitationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteInvitation(ctx context.Context, in *DeleteInvitationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type invitationClient struct {
	cc grpc.ClientConnInterface
}

func NewInvitationClient(cc grpc.ClientConnInterface) InvitationClient {
	return &invitationClient{cc}
}

func (c *invitationClient) CreateInvitation(ctx context.Context, in *CreateInvitationRequest, opts ...grpc.CallOption) (*CreateInvitationResponse, error) {
	out := new(CreateInvitationResponse)
	err := c.cc.Invoke(ctx, Invitation_CreateInvitation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitationClient) UpdateInvitation(ctx context.Context, in *UpdateInvitationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Invitation_UpdateInvitation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitationClient) AcceptInvitation(ctx context.Context, in *AcceptInvitationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Invitation_AcceptInvitation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitationClient) DeclineInvitation(ctx context.Context, in *DeclineInvitationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Invitation_DeclineInvitation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitationClient) DeleteInvitation(ctx context.Context, in *DeleteInvitationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Invitation_DeleteInvitation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvitationServer is the server API for Invitation service.
// All implementations must embed UnimplementedInvitationServer
// for forward compatibility
type InvitationServer interface {
	CreateInvitation(context.Context, *CreateInvitationRequest) (*CreateInvitationResponse, error)
	UpdateInvitation(context.Context, *UpdateInvitationRequest) (*emptypb.Empty, error)
	AcceptInvitation(context.Context, *AcceptInvitationRequest) (*emptypb.Empty, error)
	DeclineInvitation(context.Context, *DeclineInvitationRequest) (*emptypb.Empty, error)
	DeleteInvitation(context.Context, *DeleteInvitationRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedInvitationServer()
}

// UnimplementedInvitationServer must be embedded to have forward compatible implementations.
type UnimplementedInvitationServer struct {
}

func (UnimplementedInvitationServer) CreateInvitation(context.Context, *CreateInvitationRequest) (*CreateInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvitation not implemented")
}
func (UnimplementedInvitationServer) UpdateInvitation(context.Context, *UpdateInvitationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInvitation not implemented")
}
func (UnimplementedInvitationServer) AcceptInvitation(context.Context, *AcceptInvitationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptInvitation not implemented")
}
func (UnimplementedInvitationServer) DeclineInvitation(context.Context, *DeclineInvitationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeclineInvitation not implemented")
}
func (UnimplementedInvitationServer) DeleteInvitation(context.Context, *DeleteInvitationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInvitation not implemented")
}
func (UnimplementedInvitationServer) mustEmbedUnimplementedInvitationServer() {}

// UnsafeInvitationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InvitationServer will
// result in compilation errors.
type UnsafeInvitationServer interface {
	mustEmbedUnimplementedInvitationServer()
}

func RegisterInvitationServer(s grpc.ServiceRegistrar, srv InvitationServer) {
	s.RegisterService(&Invitation_ServiceDesc, srv)
}

func _Invitation_CreateInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationServer).CreateInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Invitation_CreateInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationServer).CreateInvitation(ctx, req.(*CreateInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Invitation_UpdateInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationServer).UpdateInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Invitation_UpdateInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationServer).UpdateInvitation(ctx, req.(*UpdateInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Invitation_AcceptInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationServer).AcceptInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Invitation_AcceptInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationServer).AcceptInvitation(ctx, req.(*AcceptInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Invitation_DeclineInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeclineInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationServer).DeclineInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Invitation_DeclineInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationServer).DeclineInvitation(ctx, req.(*DeclineInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Invitation_DeleteInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationServer).DeleteInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Invitation_DeleteInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationServer).DeleteInvitation(ctx, req.(*DeleteInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Invitation_ServiceDesc is the grpc.ServiceDesc for Invitation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Invitation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Invitation",
	HandlerType: (*InvitationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInvitation",
			Handler:    _Invitation_CreateInvitation_Handler,
		},
		{
			MethodName: "UpdateInvitation",
			Handler:    _Invitation_UpdateInvitation_Handler,
		},
		{
			MethodName: "AcceptInvitation",
			Handler:    _Invitation_AcceptInvitation_Handler,
		},
		{
			MethodName: "DeclineInvitation",
			Handler:    _Invitation_DeclineInvitation_Handler,
		},
		{
			MethodName: "DeleteInvitation",
			Handler:    _Invitation_DeleteInvitation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teamy/invitation.proto",
}
