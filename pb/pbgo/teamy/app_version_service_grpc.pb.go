// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: teamy/app_version_service.proto

package pbteamy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AppVersionService_GetAppVersion_FullMethodName                 = "/AppVersionService/GetAppVersion"
	AppVersionService_ListAppVersions_FullMethodName               = "/AppVersionService/ListAppVersions"
	AppVersionService_CreateAppVersion_FullMethodName              = "/AppVersionService/CreateAppVersion"
	AppVersionService_UpdateAppVersion_FullMethodName              = "/AppVersionService/UpdateAppVersion"
	AppVersionService_DeleteAppVersion_FullMethodName              = "/AppVersionService/DeleteAppVersion"
	AppVersionService_CreateAppPackageUploadSession_FullMethodName = "/AppVersionService/CreateAppPackageUploadSession"
	AppVersionService_FinishAppPackageUploadSession_FullMethodName = "/AppVersionService/FinishAppPackageUploadSession"
)

// AppVersionServiceClient is the client API for AppVersionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppVersionServiceClient interface {
	GetAppVersion(ctx context.Context, in *GetAppVersionRequest, opts ...grpc.CallOption) (*GetAppVersionResponse, error)
	ListAppVersions(ctx context.Context, in *ListAppVersionsRequest, opts ...grpc.CallOption) (*ListAppVersionsResponse, error)
	CreateAppVersion(ctx context.Context, in *CreateAppVersionRequest, opts ...grpc.CallOption) (*CreateAppVersionResponse, error)
	UpdateAppVersion(ctx context.Context, in *UpdateAppVersionRequest, opts ...grpc.CallOption) (*UpdateAppVersionResponse, error)
	DeleteAppVersion(ctx context.Context, in *DeleteAppVersionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateAppPackageUploadSession(ctx context.Context, in *CreateAppPackageUploadSessionRequest, opts ...grpc.CallOption) (*CreateAppPackageUploadSessionResponse, error)
	FinishAppPackageUploadSession(ctx context.Context, in *FinishAppPackageUploadSessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type appVersionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppVersionServiceClient(cc grpc.ClientConnInterface) AppVersionServiceClient {
	return &appVersionServiceClient{cc}
}

func (c *appVersionServiceClient) GetAppVersion(ctx context.Context, in *GetAppVersionRequest, opts ...grpc.CallOption) (*GetAppVersionResponse, error) {
	out := new(GetAppVersionResponse)
	err := c.cc.Invoke(ctx, AppVersionService_GetAppVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appVersionServiceClient) ListAppVersions(ctx context.Context, in *ListAppVersionsRequest, opts ...grpc.CallOption) (*ListAppVersionsResponse, error) {
	out := new(ListAppVersionsResponse)
	err := c.cc.Invoke(ctx, AppVersionService_ListAppVersions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appVersionServiceClient) CreateAppVersion(ctx context.Context, in *CreateAppVersionRequest, opts ...grpc.CallOption) (*CreateAppVersionResponse, error) {
	out := new(CreateAppVersionResponse)
	err := c.cc.Invoke(ctx, AppVersionService_CreateAppVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appVersionServiceClient) UpdateAppVersion(ctx context.Context, in *UpdateAppVersionRequest, opts ...grpc.CallOption) (*UpdateAppVersionResponse, error) {
	out := new(UpdateAppVersionResponse)
	err := c.cc.Invoke(ctx, AppVersionService_UpdateAppVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appVersionServiceClient) DeleteAppVersion(ctx context.Context, in *DeleteAppVersionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AppVersionService_DeleteAppVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appVersionServiceClient) CreateAppPackageUploadSession(ctx context.Context, in *CreateAppPackageUploadSessionRequest, opts ...grpc.CallOption) (*CreateAppPackageUploadSessionResponse, error) {
	out := new(CreateAppPackageUploadSessionResponse)
	err := c.cc.Invoke(ctx, AppVersionService_CreateAppPackageUploadSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appVersionServiceClient) FinishAppPackageUploadSession(ctx context.Context, in *FinishAppPackageUploadSessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AppVersionService_FinishAppPackageUploadSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppVersionServiceServer is the server API for AppVersionService service.
// All implementations must embed UnimplementedAppVersionServiceServer
// for forward compatibility
type AppVersionServiceServer interface {
	GetAppVersion(context.Context, *GetAppVersionRequest) (*GetAppVersionResponse, error)
	ListAppVersions(context.Context, *ListAppVersionsRequest) (*ListAppVersionsResponse, error)
	CreateAppVersion(context.Context, *CreateAppVersionRequest) (*CreateAppVersionResponse, error)
	UpdateAppVersion(context.Context, *UpdateAppVersionRequest) (*UpdateAppVersionResponse, error)
	DeleteAppVersion(context.Context, *DeleteAppVersionRequest) (*emptypb.Empty, error)
	CreateAppPackageUploadSession(context.Context, *CreateAppPackageUploadSessionRequest) (*CreateAppPackageUploadSessionResponse, error)
	FinishAppPackageUploadSession(context.Context, *FinishAppPackageUploadSessionRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAppVersionServiceServer()
}

// UnimplementedAppVersionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAppVersionServiceServer struct {
}

func (UnimplementedAppVersionServiceServer) GetAppVersion(context.Context, *GetAppVersionRequest) (*GetAppVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppVersion not implemented")
}
func (UnimplementedAppVersionServiceServer) ListAppVersions(context.Context, *ListAppVersionsRequest) (*ListAppVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppVersions not implemented")
}
func (UnimplementedAppVersionServiceServer) CreateAppVersion(context.Context, *CreateAppVersionRequest) (*CreateAppVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppVersion not implemented")
}
func (UnimplementedAppVersionServiceServer) UpdateAppVersion(context.Context, *UpdateAppVersionRequest) (*UpdateAppVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppVersion not implemented")
}
func (UnimplementedAppVersionServiceServer) DeleteAppVersion(context.Context, *DeleteAppVersionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppVersion not implemented")
}
func (UnimplementedAppVersionServiceServer) CreateAppPackageUploadSession(context.Context, *CreateAppPackageUploadSessionRequest) (*CreateAppPackageUploadSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppPackageUploadSession not implemented")
}
func (UnimplementedAppVersionServiceServer) FinishAppPackageUploadSession(context.Context, *FinishAppPackageUploadSessionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishAppPackageUploadSession not implemented")
}
func (UnimplementedAppVersionServiceServer) mustEmbedUnimplementedAppVersionServiceServer() {}

// UnsafeAppVersionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppVersionServiceServer will
// result in compilation errors.
type UnsafeAppVersionServiceServer interface {
	mustEmbedUnimplementedAppVersionServiceServer()
}

func RegisterAppVersionServiceServer(s grpc.ServiceRegistrar, srv AppVersionServiceServer) {
	s.RegisterService(&AppVersionService_ServiceDesc, srv)
}

func _AppVersionService_GetAppVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppVersionServiceServer).GetAppVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppVersionService_GetAppVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppVersionServiceServer).GetAppVersion(ctx, req.(*GetAppVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppVersionService_ListAppVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppVersionServiceServer).ListAppVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppVersionService_ListAppVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppVersionServiceServer).ListAppVersions(ctx, req.(*ListAppVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppVersionService_CreateAppVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppVersionServiceServer).CreateAppVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppVersionService_CreateAppVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppVersionServiceServer).CreateAppVersion(ctx, req.(*CreateAppVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppVersionService_UpdateAppVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppVersionServiceServer).UpdateAppVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppVersionService_UpdateAppVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppVersionServiceServer).UpdateAppVersion(ctx, req.(*UpdateAppVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppVersionService_DeleteAppVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppVersionServiceServer).DeleteAppVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppVersionService_DeleteAppVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppVersionServiceServer).DeleteAppVersion(ctx, req.(*DeleteAppVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppVersionService_CreateAppPackageUploadSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppPackageUploadSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppVersionServiceServer).CreateAppPackageUploadSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppVersionService_CreateAppPackageUploadSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppVersionServiceServer).CreateAppPackageUploadSession(ctx, req.(*CreateAppPackageUploadSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppVersionService_FinishAppPackageUploadSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishAppPackageUploadSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppVersionServiceServer).FinishAppPackageUploadSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppVersionService_FinishAppPackageUploadSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppVersionServiceServer).FinishAppPackageUploadSession(ctx, req.(*FinishAppPackageUploadSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppVersionService_ServiceDesc is the grpc.ServiceDesc for AppVersionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppVersionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AppVersionService",
	HandlerType: (*AppVersionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAppVersion",
			Handler:    _AppVersionService_GetAppVersion_Handler,
		},
		{
			MethodName: "ListAppVersions",
			Handler:    _AppVersionService_ListAppVersions_Handler,
		},
		{
			MethodName: "CreateAppVersion",
			Handler:    _AppVersionService_CreateAppVersion_Handler,
		},
		{
			MethodName: "UpdateAppVersion",
			Handler:    _AppVersionService_UpdateAppVersion_Handler,
		},
		{
			MethodName: "DeleteAppVersion",
			Handler:    _AppVersionService_DeleteAppVersion_Handler,
		},
		{
			MethodName: "CreateAppPackageUploadSession",
			Handler:    _AppVersionService_CreateAppPackageUploadSession_Handler,
		},
		{
			MethodName: "FinishAppPackageUploadSession",
			Handler:    _AppVersionService_FinishAppPackageUploadSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teamy/app_version_service.proto",
}
