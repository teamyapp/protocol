// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: teamy/app_secret_service.proto

package pbteamy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AppSecretService_CreateAppSecret_FullMethodName = "/AppSecretService/CreateAppSecret"
	AppSecretService_GetAppSecret_FullMethodName    = "/AppSecretService/GetAppSecret"
	AppSecretService_ListAppSecret_FullMethodName   = "/AppSecretService/ListAppSecret"
	AppSecretService_DeleteAppSecret_FullMethodName = "/AppSecretService/DeleteAppSecret"
)

// AppSecretServiceClient is the client API for AppSecretService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppSecretServiceClient interface {
	CreateAppSecret(ctx context.Context, in *CreateAppSecretRequest, opts ...grpc.CallOption) (*CreateAppSecretResponse, error)
	GetAppSecret(ctx context.Context, in *GetAppSecretRequest, opts ...grpc.CallOption) (*GetAppSecretResponse, error)
	ListAppSecret(ctx context.Context, in *ListAppSecretRequest, opts ...grpc.CallOption) (*ListAppSecretResponse, error)
	DeleteAppSecret(ctx context.Context, in *DeleteAppSecretRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type appSecretServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppSecretServiceClient(cc grpc.ClientConnInterface) AppSecretServiceClient {
	return &appSecretServiceClient{cc}
}

func (c *appSecretServiceClient) CreateAppSecret(ctx context.Context, in *CreateAppSecretRequest, opts ...grpc.CallOption) (*CreateAppSecretResponse, error) {
	out := new(CreateAppSecretResponse)
	err := c.cc.Invoke(ctx, AppSecretService_CreateAppSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appSecretServiceClient) GetAppSecret(ctx context.Context, in *GetAppSecretRequest, opts ...grpc.CallOption) (*GetAppSecretResponse, error) {
	out := new(GetAppSecretResponse)
	err := c.cc.Invoke(ctx, AppSecretService_GetAppSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appSecretServiceClient) ListAppSecret(ctx context.Context, in *ListAppSecretRequest, opts ...grpc.CallOption) (*ListAppSecretResponse, error) {
	out := new(ListAppSecretResponse)
	err := c.cc.Invoke(ctx, AppSecretService_ListAppSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appSecretServiceClient) DeleteAppSecret(ctx context.Context, in *DeleteAppSecretRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AppSecretService_DeleteAppSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppSecretServiceServer is the server API for AppSecretService service.
// All implementations must embed UnimplementedAppSecretServiceServer
// for forward compatibility
type AppSecretServiceServer interface {
	CreateAppSecret(context.Context, *CreateAppSecretRequest) (*CreateAppSecretResponse, error)
	GetAppSecret(context.Context, *GetAppSecretRequest) (*GetAppSecretResponse, error)
	ListAppSecret(context.Context, *ListAppSecretRequest) (*ListAppSecretResponse, error)
	DeleteAppSecret(context.Context, *DeleteAppSecretRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAppSecretServiceServer()
}

// UnimplementedAppSecretServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAppSecretServiceServer struct {
}

func (UnimplementedAppSecretServiceServer) CreateAppSecret(context.Context, *CreateAppSecretRequest) (*CreateAppSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppSecret not implemented")
}
func (UnimplementedAppSecretServiceServer) GetAppSecret(context.Context, *GetAppSecretRequest) (*GetAppSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppSecret not implemented")
}
func (UnimplementedAppSecretServiceServer) ListAppSecret(context.Context, *ListAppSecretRequest) (*ListAppSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppSecret not implemented")
}
func (UnimplementedAppSecretServiceServer) DeleteAppSecret(context.Context, *DeleteAppSecretRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppSecret not implemented")
}
func (UnimplementedAppSecretServiceServer) mustEmbedUnimplementedAppSecretServiceServer() {}

// UnsafeAppSecretServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppSecretServiceServer will
// result in compilation errors.
type UnsafeAppSecretServiceServer interface {
	mustEmbedUnimplementedAppSecretServiceServer()
}

func RegisterAppSecretServiceServer(s grpc.ServiceRegistrar, srv AppSecretServiceServer) {
	s.RegisterService(&AppSecretService_ServiceDesc, srv)
}

func _AppSecretService_CreateAppSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppSecretServiceServer).CreateAppSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppSecretService_CreateAppSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppSecretServiceServer).CreateAppSecret(ctx, req.(*CreateAppSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppSecretService_GetAppSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppSecretServiceServer).GetAppSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppSecretService_GetAppSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppSecretServiceServer).GetAppSecret(ctx, req.(*GetAppSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppSecretService_ListAppSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppSecretServiceServer).ListAppSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppSecretService_ListAppSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppSecretServiceServer).ListAppSecret(ctx, req.(*ListAppSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppSecretService_DeleteAppSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppSecretServiceServer).DeleteAppSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppSecretService_DeleteAppSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppSecretServiceServer).DeleteAppSecret(ctx, req.(*DeleteAppSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppSecretService_ServiceDesc is the grpc.ServiceDesc for AppSecretService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppSecretService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AppSecretService",
	HandlerType: (*AppSecretServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAppSecret",
			Handler:    _AppSecretService_CreateAppSecret_Handler,
		},
		{
			MethodName: "GetAppSecret",
			Handler:    _AppSecretService_GetAppSecret_Handler,
		},
		{
			MethodName: "ListAppSecret",
			Handler:    _AppSecretService_ListAppSecret_Handler,
		},
		{
			MethodName: "DeleteAppSecret",
			Handler:    _AppSecretService_DeleteAppSecret_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teamy/app_secret_service.proto",
}
