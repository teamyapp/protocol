// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.1
// source: teamy/team_member_group_service.proto

package teamy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TeamMemberGroupService_GetMemberGroup_FullMethodName          = "/TeamMemberGroupService/GetMemberGroup"
	TeamMemberGroupService_ListMemberGroups_FullMethodName        = "/TeamMemberGroupService/ListMemberGroups"
	TeamMemberGroupService_CreateMemberGroup_FullMethodName       = "/TeamMemberGroupService/CreateMemberGroup"
	TeamMemberGroupService_UpdateMemberGroup_FullMethodName       = "/TeamMemberGroupService/UpdateMemberGroup"
	TeamMemberGroupService_DeleteMemberGroup_FullMethodName       = "/TeamMemberGroupService/DeleteMemberGroup"
	TeamMemberGroupService_AddMemberToGroup_FullMethodName        = "/TeamMemberGroupService/AddMemberToGroup"
	TeamMemberGroupService_RemoveMemberFromGroup_FullMethodName   = "/TeamMemberGroupService/RemoveMemberFromGroup"
	TeamMemberGroupService_MoveUpTeamMemberGroup_FullMethodName   = "/TeamMemberGroupService/MoveUpTeamMemberGroup"
	TeamMemberGroupService_MoveDownTeamMemberGroup_FullMethodName = "/TeamMemberGroupService/MoveDownTeamMemberGroup"
)

// TeamMemberGroupServiceClient is the client API for TeamMemberGroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeamMemberGroupServiceClient interface {
	GetMemberGroup(ctx context.Context, in *GetMemberGroupRequest, opts ...grpc.CallOption) (*GetMemberGroupResponse, error)
	ListMemberGroups(ctx context.Context, in *ListMemberGroupsRequest, opts ...grpc.CallOption) (*ListTeamMemberGroupsResponse, error)
	CreateMemberGroup(ctx context.Context, in *CreateTeamMemberGroupRequest, opts ...grpc.CallOption) (*CreateTeamMemberGroupResponse, error)
	UpdateMemberGroup(ctx context.Context, in *UpdateTeamMemberGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteMemberGroup(ctx context.Context, in *DeleteTeamMemberGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddMemberToGroup(ctx context.Context, in *AddTeamMemberToGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveMemberFromGroup(ctx context.Context, in *RemoveTeamMemberFromGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MoveUpTeamMemberGroup(ctx context.Context, in *MoveUpTeamMemberGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MoveDownTeamMemberGroup(ctx context.Context, in *MoveDownTeamMemberGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type teamMemberGroupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTeamMemberGroupServiceClient(cc grpc.ClientConnInterface) TeamMemberGroupServiceClient {
	return &teamMemberGroupServiceClient{cc}
}

func (c *teamMemberGroupServiceClient) GetMemberGroup(ctx context.Context, in *GetMemberGroupRequest, opts ...grpc.CallOption) (*GetMemberGroupResponse, error) {
	out := new(GetMemberGroupResponse)
	err := c.cc.Invoke(ctx, TeamMemberGroupService_GetMemberGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamMemberGroupServiceClient) ListMemberGroups(ctx context.Context, in *ListMemberGroupsRequest, opts ...grpc.CallOption) (*ListTeamMemberGroupsResponse, error) {
	out := new(ListTeamMemberGroupsResponse)
	err := c.cc.Invoke(ctx, TeamMemberGroupService_ListMemberGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamMemberGroupServiceClient) CreateMemberGroup(ctx context.Context, in *CreateTeamMemberGroupRequest, opts ...grpc.CallOption) (*CreateTeamMemberGroupResponse, error) {
	out := new(CreateTeamMemberGroupResponse)
	err := c.cc.Invoke(ctx, TeamMemberGroupService_CreateMemberGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamMemberGroupServiceClient) UpdateMemberGroup(ctx context.Context, in *UpdateTeamMemberGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TeamMemberGroupService_UpdateMemberGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamMemberGroupServiceClient) DeleteMemberGroup(ctx context.Context, in *DeleteTeamMemberGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TeamMemberGroupService_DeleteMemberGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamMemberGroupServiceClient) AddMemberToGroup(ctx context.Context, in *AddTeamMemberToGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TeamMemberGroupService_AddMemberToGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamMemberGroupServiceClient) RemoveMemberFromGroup(ctx context.Context, in *RemoveTeamMemberFromGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TeamMemberGroupService_RemoveMemberFromGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamMemberGroupServiceClient) MoveUpTeamMemberGroup(ctx context.Context, in *MoveUpTeamMemberGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TeamMemberGroupService_MoveUpTeamMemberGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamMemberGroupServiceClient) MoveDownTeamMemberGroup(ctx context.Context, in *MoveDownTeamMemberGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TeamMemberGroupService_MoveDownTeamMemberGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeamMemberGroupServiceServer is the server API for TeamMemberGroupService service.
// All implementations must embed UnimplementedTeamMemberGroupServiceServer
// for forward compatibility
type TeamMemberGroupServiceServer interface {
	GetMemberGroup(context.Context, *GetMemberGroupRequest) (*GetMemberGroupResponse, error)
	ListMemberGroups(context.Context, *ListMemberGroupsRequest) (*ListTeamMemberGroupsResponse, error)
	CreateMemberGroup(context.Context, *CreateTeamMemberGroupRequest) (*CreateTeamMemberGroupResponse, error)
	UpdateMemberGroup(context.Context, *UpdateTeamMemberGroupRequest) (*emptypb.Empty, error)
	DeleteMemberGroup(context.Context, *DeleteTeamMemberGroupRequest) (*emptypb.Empty, error)
	AddMemberToGroup(context.Context, *AddTeamMemberToGroupRequest) (*emptypb.Empty, error)
	RemoveMemberFromGroup(context.Context, *RemoveTeamMemberFromGroupRequest) (*emptypb.Empty, error)
	MoveUpTeamMemberGroup(context.Context, *MoveUpTeamMemberGroupRequest) (*emptypb.Empty, error)
	MoveDownTeamMemberGroup(context.Context, *MoveDownTeamMemberGroupRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedTeamMemberGroupServiceServer()
}

// UnimplementedTeamMemberGroupServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTeamMemberGroupServiceServer struct {
}

func (UnimplementedTeamMemberGroupServiceServer) GetMemberGroup(context.Context, *GetMemberGroupRequest) (*GetMemberGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberGroup not implemented")
}
func (UnimplementedTeamMemberGroupServiceServer) ListMemberGroups(context.Context, *ListMemberGroupsRequest) (*ListTeamMemberGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMemberGroups not implemented")
}
func (UnimplementedTeamMemberGroupServiceServer) CreateMemberGroup(context.Context, *CreateTeamMemberGroupRequest) (*CreateTeamMemberGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMemberGroup not implemented")
}
func (UnimplementedTeamMemberGroupServiceServer) UpdateMemberGroup(context.Context, *UpdateTeamMemberGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberGroup not implemented")
}
func (UnimplementedTeamMemberGroupServiceServer) DeleteMemberGroup(context.Context, *DeleteTeamMemberGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMemberGroup not implemented")
}
func (UnimplementedTeamMemberGroupServiceServer) AddMemberToGroup(context.Context, *AddTeamMemberToGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemberToGroup not implemented")
}
func (UnimplementedTeamMemberGroupServiceServer) RemoveMemberFromGroup(context.Context, *RemoveTeamMemberFromGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMemberFromGroup not implemented")
}
func (UnimplementedTeamMemberGroupServiceServer) MoveUpTeamMemberGroup(context.Context, *MoveUpTeamMemberGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveUpTeamMemberGroup not implemented")
}
func (UnimplementedTeamMemberGroupServiceServer) MoveDownTeamMemberGroup(context.Context, *MoveDownTeamMemberGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveDownTeamMemberGroup not implemented")
}
func (UnimplementedTeamMemberGroupServiceServer) mustEmbedUnimplementedTeamMemberGroupServiceServer() {
}

// UnsafeTeamMemberGroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeamMemberGroupServiceServer will
// result in compilation errors.
type UnsafeTeamMemberGroupServiceServer interface {
	mustEmbedUnimplementedTeamMemberGroupServiceServer()
}

func RegisterTeamMemberGroupServiceServer(s grpc.ServiceRegistrar, srv TeamMemberGroupServiceServer) {
	s.RegisterService(&TeamMemberGroupService_ServiceDesc, srv)
}

func _TeamMemberGroupService_GetMemberGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamMemberGroupServiceServer).GetMemberGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamMemberGroupService_GetMemberGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamMemberGroupServiceServer).GetMemberGroup(ctx, req.(*GetMemberGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamMemberGroupService_ListMemberGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMemberGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamMemberGroupServiceServer).ListMemberGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamMemberGroupService_ListMemberGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamMemberGroupServiceServer).ListMemberGroups(ctx, req.(*ListMemberGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamMemberGroupService_CreateMemberGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeamMemberGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamMemberGroupServiceServer).CreateMemberGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamMemberGroupService_CreateMemberGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamMemberGroupServiceServer).CreateMemberGroup(ctx, req.(*CreateTeamMemberGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamMemberGroupService_UpdateMemberGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTeamMemberGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamMemberGroupServiceServer).UpdateMemberGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamMemberGroupService_UpdateMemberGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamMemberGroupServiceServer).UpdateMemberGroup(ctx, req.(*UpdateTeamMemberGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamMemberGroupService_DeleteMemberGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTeamMemberGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamMemberGroupServiceServer).DeleteMemberGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamMemberGroupService_DeleteMemberGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamMemberGroupServiceServer).DeleteMemberGroup(ctx, req.(*DeleteTeamMemberGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamMemberGroupService_AddMemberToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTeamMemberToGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamMemberGroupServiceServer).AddMemberToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamMemberGroupService_AddMemberToGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamMemberGroupServiceServer).AddMemberToGroup(ctx, req.(*AddTeamMemberToGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamMemberGroupService_RemoveMemberFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTeamMemberFromGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamMemberGroupServiceServer).RemoveMemberFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamMemberGroupService_RemoveMemberFromGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamMemberGroupServiceServer).RemoveMemberFromGroup(ctx, req.(*RemoveTeamMemberFromGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamMemberGroupService_MoveUpTeamMemberGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveUpTeamMemberGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamMemberGroupServiceServer).MoveUpTeamMemberGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamMemberGroupService_MoveUpTeamMemberGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamMemberGroupServiceServer).MoveUpTeamMemberGroup(ctx, req.(*MoveUpTeamMemberGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamMemberGroupService_MoveDownTeamMemberGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveDownTeamMemberGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamMemberGroupServiceServer).MoveDownTeamMemberGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamMemberGroupService_MoveDownTeamMemberGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamMemberGroupServiceServer).MoveDownTeamMemberGroup(ctx, req.(*MoveDownTeamMemberGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TeamMemberGroupService_ServiceDesc is the grpc.ServiceDesc for TeamMemberGroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TeamMemberGroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TeamMemberGroupService",
	HandlerType: (*TeamMemberGroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMemberGroup",
			Handler:    _TeamMemberGroupService_GetMemberGroup_Handler,
		},
		{
			MethodName: "ListMemberGroups",
			Handler:    _TeamMemberGroupService_ListMemberGroups_Handler,
		},
		{
			MethodName: "CreateMemberGroup",
			Handler:    _TeamMemberGroupService_CreateMemberGroup_Handler,
		},
		{
			MethodName: "UpdateMemberGroup",
			Handler:    _TeamMemberGroupService_UpdateMemberGroup_Handler,
		},
		{
			MethodName: "DeleteMemberGroup",
			Handler:    _TeamMemberGroupService_DeleteMemberGroup_Handler,
		},
		{
			MethodName: "AddMemberToGroup",
			Handler:    _TeamMemberGroupService_AddMemberToGroup_Handler,
		},
		{
			MethodName: "RemoveMemberFromGroup",
			Handler:    _TeamMemberGroupService_RemoveMemberFromGroup_Handler,
		},
		{
			MethodName: "MoveUpTeamMemberGroup",
			Handler:    _TeamMemberGroupService_MoveUpTeamMemberGroup_Handler,
		},
		{
			MethodName: "MoveDownTeamMemberGroup",
			Handler:    _TeamMemberGroupService_MoveDownTeamMemberGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teamy/team_member_group_service.proto",
}
