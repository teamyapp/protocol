// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.1
// source: teamy/activator_service.proto

package teamy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ActivatorService_GetActivator_FullMethodName              = "/ActivatorService/GetActivator"
	ActivatorService_ListActivators_FullMethodName            = "/ActivatorService/ListActivators"
	ActivatorService_CreateStaticActivator_FullMethodName     = "/ActivatorService/CreateStaticActivator"
	ActivatorService_CreateTimeRangeActivator_FullMethodName  = "/ActivatorService/CreateTimeRangeActivator"
	ActivatorService_CreateMaxViewersActivator_FullMethodName = "/ActivatorService/CreateMaxViewersActivator"
	ActivatorService_CreatePercentageActivator_FullMethodName = "/ActivatorService/CreatePercentageActivator"
	ActivatorService_UpdateActivator_FullMethodName           = "/ActivatorService/UpdateActivator"
	ActivatorService_DeleteActivator_FullMethodName           = "/ActivatorService/DeleteActivator"
)

// ActivatorServiceClient is the client API for ActivatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActivatorServiceClient interface {
	GetActivator(ctx context.Context, in *GetActivatorRequest, opts ...grpc.CallOption) (*GetActivatorResponse, error)
	ListActivators(ctx context.Context, in *ListActivatorsRequest, opts ...grpc.CallOption) (*ListActivatorsResponse, error)
	CreateStaticActivator(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CreateStaticActivatorResponse, error)
	CreateTimeRangeActivator(ctx context.Context, in *CreateTimeRangeActivatorRequest, opts ...grpc.CallOption) (*CreateTimeRangeActivatorResponse, error)
	CreateMaxViewersActivator(ctx context.Context, in *CreateMaxViewersActivatorRequest, opts ...grpc.CallOption) (*CreateMaxViewersActivatorResponse, error)
	CreatePercentageActivator(ctx context.Context, in *CreatePercentageActivatorRequest, opts ...grpc.CallOption) (*CreatePercentageActivatorResponse, error)
	UpdateActivator(ctx context.Context, in *UpdateActivatorRequest, opts ...grpc.CallOption) (*UpdateActivatorResponse, error)
	DeleteActivator(ctx context.Context, in *DeleteActivatorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type activatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewActivatorServiceClient(cc grpc.ClientConnInterface) ActivatorServiceClient {
	return &activatorServiceClient{cc}
}

func (c *activatorServiceClient) GetActivator(ctx context.Context, in *GetActivatorRequest, opts ...grpc.CallOption) (*GetActivatorResponse, error) {
	out := new(GetActivatorResponse)
	err := c.cc.Invoke(ctx, ActivatorService_GetActivator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activatorServiceClient) ListActivators(ctx context.Context, in *ListActivatorsRequest, opts ...grpc.CallOption) (*ListActivatorsResponse, error) {
	out := new(ListActivatorsResponse)
	err := c.cc.Invoke(ctx, ActivatorService_ListActivators_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activatorServiceClient) CreateStaticActivator(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CreateStaticActivatorResponse, error) {
	out := new(CreateStaticActivatorResponse)
	err := c.cc.Invoke(ctx, ActivatorService_CreateStaticActivator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activatorServiceClient) CreateTimeRangeActivator(ctx context.Context, in *CreateTimeRangeActivatorRequest, opts ...grpc.CallOption) (*CreateTimeRangeActivatorResponse, error) {
	out := new(CreateTimeRangeActivatorResponse)
	err := c.cc.Invoke(ctx, ActivatorService_CreateTimeRangeActivator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activatorServiceClient) CreateMaxViewersActivator(ctx context.Context, in *CreateMaxViewersActivatorRequest, opts ...grpc.CallOption) (*CreateMaxViewersActivatorResponse, error) {
	out := new(CreateMaxViewersActivatorResponse)
	err := c.cc.Invoke(ctx, ActivatorService_CreateMaxViewersActivator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activatorServiceClient) CreatePercentageActivator(ctx context.Context, in *CreatePercentageActivatorRequest, opts ...grpc.CallOption) (*CreatePercentageActivatorResponse, error) {
	out := new(CreatePercentageActivatorResponse)
	err := c.cc.Invoke(ctx, ActivatorService_CreatePercentageActivator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activatorServiceClient) UpdateActivator(ctx context.Context, in *UpdateActivatorRequest, opts ...grpc.CallOption) (*UpdateActivatorResponse, error) {
	out := new(UpdateActivatorResponse)
	err := c.cc.Invoke(ctx, ActivatorService_UpdateActivator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activatorServiceClient) DeleteActivator(ctx context.Context, in *DeleteActivatorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ActivatorService_DeleteActivator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActivatorServiceServer is the server API for ActivatorService service.
// All implementations must embed UnimplementedActivatorServiceServer
// for forward compatibility
type ActivatorServiceServer interface {
	GetActivator(context.Context, *GetActivatorRequest) (*GetActivatorResponse, error)
	ListActivators(context.Context, *ListActivatorsRequest) (*ListActivatorsResponse, error)
	CreateStaticActivator(context.Context, *emptypb.Empty) (*CreateStaticActivatorResponse, error)
	CreateTimeRangeActivator(context.Context, *CreateTimeRangeActivatorRequest) (*CreateTimeRangeActivatorResponse, error)
	CreateMaxViewersActivator(context.Context, *CreateMaxViewersActivatorRequest) (*CreateMaxViewersActivatorResponse, error)
	CreatePercentageActivator(context.Context, *CreatePercentageActivatorRequest) (*CreatePercentageActivatorResponse, error)
	UpdateActivator(context.Context, *UpdateActivatorRequest) (*UpdateActivatorResponse, error)
	DeleteActivator(context.Context, *DeleteActivatorRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedActivatorServiceServer()
}

// UnimplementedActivatorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedActivatorServiceServer struct {
}

func (UnimplementedActivatorServiceServer) GetActivator(context.Context, *GetActivatorRequest) (*GetActivatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivator not implemented")
}
func (UnimplementedActivatorServiceServer) ListActivators(context.Context, *ListActivatorsRequest) (*ListActivatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListActivators not implemented")
}
func (UnimplementedActivatorServiceServer) CreateStaticActivator(context.Context, *emptypb.Empty) (*CreateStaticActivatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStaticActivator not implemented")
}
func (UnimplementedActivatorServiceServer) CreateTimeRangeActivator(context.Context, *CreateTimeRangeActivatorRequest) (*CreateTimeRangeActivatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTimeRangeActivator not implemented")
}
func (UnimplementedActivatorServiceServer) CreateMaxViewersActivator(context.Context, *CreateMaxViewersActivatorRequest) (*CreateMaxViewersActivatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMaxViewersActivator not implemented")
}
func (UnimplementedActivatorServiceServer) CreatePercentageActivator(context.Context, *CreatePercentageActivatorRequest) (*CreatePercentageActivatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePercentageActivator not implemented")
}
func (UnimplementedActivatorServiceServer) UpdateActivator(context.Context, *UpdateActivatorRequest) (*UpdateActivatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateActivator not implemented")
}
func (UnimplementedActivatorServiceServer) DeleteActivator(context.Context, *DeleteActivatorRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteActivator not implemented")
}
func (UnimplementedActivatorServiceServer) mustEmbedUnimplementedActivatorServiceServer() {}

// UnsafeActivatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActivatorServiceServer will
// result in compilation errors.
type UnsafeActivatorServiceServer interface {
	mustEmbedUnimplementedActivatorServiceServer()
}

func RegisterActivatorServiceServer(s grpc.ServiceRegistrar, srv ActivatorServiceServer) {
	s.RegisterService(&ActivatorService_ServiceDesc, srv)
}

func _ActivatorService_GetActivator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActivatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivatorServiceServer).GetActivator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivatorService_GetActivator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivatorServiceServer).GetActivator(ctx, req.(*GetActivatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivatorService_ListActivators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListActivatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivatorServiceServer).ListActivators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivatorService_ListActivators_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivatorServiceServer).ListActivators(ctx, req.(*ListActivatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivatorService_CreateStaticActivator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivatorServiceServer).CreateStaticActivator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivatorService_CreateStaticActivator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivatorServiceServer).CreateStaticActivator(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivatorService_CreateTimeRangeActivator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTimeRangeActivatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivatorServiceServer).CreateTimeRangeActivator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivatorService_CreateTimeRangeActivator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivatorServiceServer).CreateTimeRangeActivator(ctx, req.(*CreateTimeRangeActivatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivatorService_CreateMaxViewersActivator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMaxViewersActivatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivatorServiceServer).CreateMaxViewersActivator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivatorService_CreateMaxViewersActivator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivatorServiceServer).CreateMaxViewersActivator(ctx, req.(*CreateMaxViewersActivatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivatorService_CreatePercentageActivator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePercentageActivatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivatorServiceServer).CreatePercentageActivator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivatorService_CreatePercentageActivator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivatorServiceServer).CreatePercentageActivator(ctx, req.(*CreatePercentageActivatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivatorService_UpdateActivator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateActivatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivatorServiceServer).UpdateActivator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivatorService_UpdateActivator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivatorServiceServer).UpdateActivator(ctx, req.(*UpdateActivatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivatorService_DeleteActivator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteActivatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivatorServiceServer).DeleteActivator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivatorService_DeleteActivator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivatorServiceServer).DeleteActivator(ctx, req.(*DeleteActivatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ActivatorService_ServiceDesc is the grpc.ServiceDesc for ActivatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActivatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ActivatorService",
	HandlerType: (*ActivatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetActivator",
			Handler:    _ActivatorService_GetActivator_Handler,
		},
		{
			MethodName: "ListActivators",
			Handler:    _ActivatorService_ListActivators_Handler,
		},
		{
			MethodName: "CreateStaticActivator",
			Handler:    _ActivatorService_CreateStaticActivator_Handler,
		},
		{
			MethodName: "CreateTimeRangeActivator",
			Handler:    _ActivatorService_CreateTimeRangeActivator_Handler,
		},
		{
			MethodName: "CreateMaxViewersActivator",
			Handler:    _ActivatorService_CreateMaxViewersActivator_Handler,
		},
		{
			MethodName: "CreatePercentageActivator",
			Handler:    _ActivatorService_CreatePercentageActivator_Handler,
		},
		{
			MethodName: "UpdateActivator",
			Handler:    _ActivatorService_UpdateActivator_Handler,
		},
		{
			MethodName: "DeleteActivator",
			Handler:    _ActivatorService_DeleteActivator_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teamy/activator_service.proto",
}
