// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: teamy/task.proto

package teamy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Task_GetTask_FullMethodName              = "/Task/GetTask"
	Task_GetAwaitForTasks_FullMethodName     = "/Task/GetAwaitForTasks"
	Task_CreateTask_FullMethodName           = "/Task/CreateTask"
	Task_UpdateTask_FullMethodName           = "/Task/UpdateTask"
	Task_DeleteTask_FullMethodName           = "/Task/DeleteTask"
	Task_MoveTaskToUpcoming_FullMethodName   = "/Task/MoveTaskToUpcoming"
	Task_MoveTaskToInProgress_FullMethodName = "/Task/MoveTaskToInProgress"
	Task_MoveTaskToDelivered_FullMethodName  = "/Task/MoveTaskToDelivered"
	Task_MoveTaskToBlocked_FullMethodName    = "/Task/MoveTaskToBlocked"
	Task_AddAwaitForTask_FullMethodName      = "/Task/AddAwaitForTask"
	Task_RemoveAwaitForTask_FullMethodName   = "/Task/RemoveAwaitForTask"
)

// TaskClient is the client API for Task service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskClient interface {
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*TaskMsg, error)
	GetAwaitForTasks(ctx context.Context, in *GetAwaitForTasksRequest, opts ...grpc.CallOption) (*GetAwaitForTasksResponse, error)
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error)
	UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MoveTaskToUpcoming(ctx context.Context, in *MoveTaskToUpcomingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MoveTaskToInProgress(ctx context.Context, in *MoveTaskToInProgressRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MoveTaskToDelivered(ctx context.Context, in *MoveTaskToDeliveredRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MoveTaskToBlocked(ctx context.Context, in *MoveTaskToBlockedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddAwaitForTask(ctx context.Context, in *AddAwaitForTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveAwaitForTask(ctx context.Context, in *RemoveAwaitForTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type taskClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskClient(cc grpc.ClientConnInterface) TaskClient {
	return &taskClient{cc}
}

func (c *taskClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*TaskMsg, error) {
	out := new(TaskMsg)
	err := c.cc.Invoke(ctx, Task_GetTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetAwaitForTasks(ctx context.Context, in *GetAwaitForTasksRequest, opts ...grpc.CallOption) (*GetAwaitForTasksResponse, error) {
	out := new(GetAwaitForTasksResponse)
	err := c.cc.Invoke(ctx, Task_GetAwaitForTasks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error) {
	out := new(CreateTaskResponse)
	err := c.cc.Invoke(ctx, Task_CreateTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Task_UpdateTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Task_DeleteTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) MoveTaskToUpcoming(ctx context.Context, in *MoveTaskToUpcomingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Task_MoveTaskToUpcoming_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) MoveTaskToInProgress(ctx context.Context, in *MoveTaskToInProgressRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Task_MoveTaskToInProgress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) MoveTaskToDelivered(ctx context.Context, in *MoveTaskToDeliveredRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Task_MoveTaskToDelivered_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) MoveTaskToBlocked(ctx context.Context, in *MoveTaskToBlockedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Task_MoveTaskToBlocked_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) AddAwaitForTask(ctx context.Context, in *AddAwaitForTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Task_AddAwaitForTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) RemoveAwaitForTask(ctx context.Context, in *RemoveAwaitForTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Task_RemoveAwaitForTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServer is the server API for Task service.
// All implementations must embed UnimplementedTaskServer
// for forward compatibility
type TaskServer interface {
	GetTask(context.Context, *GetTaskRequest) (*TaskMsg, error)
	GetAwaitForTasks(context.Context, *GetAwaitForTasksRequest) (*GetAwaitForTasksResponse, error)
	CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error)
	UpdateTask(context.Context, *UpdateTaskRequest) (*emptypb.Empty, error)
	DeleteTask(context.Context, *DeleteTaskRequest) (*emptypb.Empty, error)
	MoveTaskToUpcoming(context.Context, *MoveTaskToUpcomingRequest) (*emptypb.Empty, error)
	MoveTaskToInProgress(context.Context, *MoveTaskToInProgressRequest) (*emptypb.Empty, error)
	MoveTaskToDelivered(context.Context, *MoveTaskToDeliveredRequest) (*emptypb.Empty, error)
	MoveTaskToBlocked(context.Context, *MoveTaskToBlockedRequest) (*emptypb.Empty, error)
	AddAwaitForTask(context.Context, *AddAwaitForTaskRequest) (*emptypb.Empty, error)
	RemoveAwaitForTask(context.Context, *RemoveAwaitForTaskRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedTaskServer()
}

// UnimplementedTaskServer must be embedded to have forward compatible implementations.
type UnimplementedTaskServer struct {
}

func (UnimplementedTaskServer) GetTask(context.Context, *GetTaskRequest) (*TaskMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedTaskServer) GetAwaitForTasks(context.Context, *GetAwaitForTasksRequest) (*GetAwaitForTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAwaitForTasks not implemented")
}
func (UnimplementedTaskServer) CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedTaskServer) UpdateTask(context.Context, *UpdateTaskRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedTaskServer) DeleteTask(context.Context, *DeleteTaskRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedTaskServer) MoveTaskToUpcoming(context.Context, *MoveTaskToUpcomingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveTaskToUpcoming not implemented")
}
func (UnimplementedTaskServer) MoveTaskToInProgress(context.Context, *MoveTaskToInProgressRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveTaskToInProgress not implemented")
}
func (UnimplementedTaskServer) MoveTaskToDelivered(context.Context, *MoveTaskToDeliveredRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveTaskToDelivered not implemented")
}
func (UnimplementedTaskServer) MoveTaskToBlocked(context.Context, *MoveTaskToBlockedRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveTaskToBlocked not implemented")
}
func (UnimplementedTaskServer) AddAwaitForTask(context.Context, *AddAwaitForTaskRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAwaitForTask not implemented")
}
func (UnimplementedTaskServer) RemoveAwaitForTask(context.Context, *RemoveAwaitForTaskRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAwaitForTask not implemented")
}
func (UnimplementedTaskServer) mustEmbedUnimplementedTaskServer() {}

// UnsafeTaskServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskServer will
// result in compilation errors.
type UnsafeTaskServer interface {
	mustEmbedUnimplementedTaskServer()
}

func RegisterTaskServer(s grpc.ServiceRegistrar, srv TaskServer) {
	s.RegisterService(&Task_ServiceDesc, srv)
}

func _Task_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_GetTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetAwaitForTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAwaitForTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetAwaitForTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_GetAwaitForTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetAwaitForTasks(ctx, req.(*GetAwaitForTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_CreateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).CreateTask(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_UpdateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).UpdateTask(ctx, req.(*UpdateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_DeleteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).DeleteTask(ctx, req.(*DeleteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_MoveTaskToUpcoming_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveTaskToUpcomingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).MoveTaskToUpcoming(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_MoveTaskToUpcoming_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).MoveTaskToUpcoming(ctx, req.(*MoveTaskToUpcomingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_MoveTaskToInProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveTaskToInProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).MoveTaskToInProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_MoveTaskToInProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).MoveTaskToInProgress(ctx, req.(*MoveTaskToInProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_MoveTaskToDelivered_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveTaskToDeliveredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).MoveTaskToDelivered(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_MoveTaskToDelivered_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).MoveTaskToDelivered(ctx, req.(*MoveTaskToDeliveredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_MoveTaskToBlocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveTaskToBlockedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).MoveTaskToBlocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_MoveTaskToBlocked_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).MoveTaskToBlocked(ctx, req.(*MoveTaskToBlockedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_AddAwaitForTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAwaitForTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).AddAwaitForTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_AddAwaitForTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).AddAwaitForTask(ctx, req.(*AddAwaitForTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_RemoveAwaitForTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAwaitForTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).RemoveAwaitForTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_RemoveAwaitForTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).RemoveAwaitForTask(ctx, req.(*RemoveAwaitForTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Task_ServiceDesc is the grpc.ServiceDesc for Task service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Task_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Task",
	HandlerType: (*TaskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTask",
			Handler:    _Task_GetTask_Handler,
		},
		{
			MethodName: "GetAwaitForTasks",
			Handler:    _Task_GetAwaitForTasks_Handler,
		},
		{
			MethodName: "CreateTask",
			Handler:    _Task_CreateTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _Task_UpdateTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _Task_DeleteTask_Handler,
		},
		{
			MethodName: "MoveTaskToUpcoming",
			Handler:    _Task_MoveTaskToUpcoming_Handler,
		},
		{
			MethodName: "MoveTaskToInProgress",
			Handler:    _Task_MoveTaskToInProgress_Handler,
		},
		{
			MethodName: "MoveTaskToDelivered",
			Handler:    _Task_MoveTaskToDelivered_Handler,
		},
		{
			MethodName: "MoveTaskToBlocked",
			Handler:    _Task_MoveTaskToBlocked_Handler,
		},
		{
			MethodName: "AddAwaitForTask",
			Handler:    _Task_AddAwaitForTask_Handler,
		},
		{
			MethodName: "RemoveAwaitForTask",
			Handler:    _Task_RemoveAwaitForTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teamy/task.proto",
}
