// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.1
// source: teamy/invitation_service.proto

package pbteamy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InvitationService_GetInvitation_FullMethodName                       = "/InvitationService/GetInvitation"
	InvitationService_ListInvitations_FullMethodName                     = "/InvitationService/ListInvitations"
	InvitationService_CreateInvitation_FullMethodName                    = "/InvitationService/CreateInvitation"
	InvitationService_UpdateInvitation_FullMethodName                    = "/InvitationService/UpdateInvitation"
	InvitationService_AcceptInvitation_FullMethodName                    = "/InvitationService/AcceptInvitation"
	InvitationService_DeclineInvitation_FullMethodName                   = "/InvitationService/DeclineInvitation"
	InvitationService_DeleteInvitation_FullMethodName                    = "/InvitationService/DeleteInvitation"
	InvitationService_AddInvitationToTeamMemberGroup_FullMethodName      = "/InvitationService/AddInvitationToTeamMemberGroup"
	InvitationService_RemoveInvitationFromTeamMemberGroup_FullMethodName = "/InvitationService/RemoveInvitationFromTeamMemberGroup"
)

// InvitationServiceClient is the client API for InvitationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InvitationServiceClient interface {
	GetInvitation(ctx context.Context, in *GetInvitationRequest, opts ...grpc.CallOption) (*GetInvitationResponse, error)
	ListInvitations(ctx context.Context, in *ListInvitationsRequest, opts ...grpc.CallOption) (*ListInvitationsResponse, error)
	CreateInvitation(ctx context.Context, in *CreateInvitationRequest, opts ...grpc.CallOption) (*CreateInvitationResponse, error)
	UpdateInvitation(ctx context.Context, in *UpdateInvitationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AcceptInvitation(ctx context.Context, in *AcceptInvitationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeclineInvitation(ctx context.Context, in *DeclineInvitationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteInvitation(ctx context.Context, in *DeleteInvitationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddInvitationToTeamMemberGroup(ctx context.Context, in *AddInvitationToTeamMemberGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveInvitationFromTeamMemberGroup(ctx context.Context, in *RemoveInvitationFromTeamMemberGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type invitationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInvitationServiceClient(cc grpc.ClientConnInterface) InvitationServiceClient {
	return &invitationServiceClient{cc}
}

func (c *invitationServiceClient) GetInvitation(ctx context.Context, in *GetInvitationRequest, opts ...grpc.CallOption) (*GetInvitationResponse, error) {
	out := new(GetInvitationResponse)
	err := c.cc.Invoke(ctx, InvitationService_GetInvitation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitationServiceClient) ListInvitations(ctx context.Context, in *ListInvitationsRequest, opts ...grpc.CallOption) (*ListInvitationsResponse, error) {
	out := new(ListInvitationsResponse)
	err := c.cc.Invoke(ctx, InvitationService_ListInvitations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitationServiceClient) CreateInvitation(ctx context.Context, in *CreateInvitationRequest, opts ...grpc.CallOption) (*CreateInvitationResponse, error) {
	out := new(CreateInvitationResponse)
	err := c.cc.Invoke(ctx, InvitationService_CreateInvitation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitationServiceClient) UpdateInvitation(ctx context.Context, in *UpdateInvitationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, InvitationService_UpdateInvitation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitationServiceClient) AcceptInvitation(ctx context.Context, in *AcceptInvitationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, InvitationService_AcceptInvitation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitationServiceClient) DeclineInvitation(ctx context.Context, in *DeclineInvitationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, InvitationService_DeclineInvitation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitationServiceClient) DeleteInvitation(ctx context.Context, in *DeleteInvitationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, InvitationService_DeleteInvitation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitationServiceClient) AddInvitationToTeamMemberGroup(ctx context.Context, in *AddInvitationToTeamMemberGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, InvitationService_AddInvitationToTeamMemberGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitationServiceClient) RemoveInvitationFromTeamMemberGroup(ctx context.Context, in *RemoveInvitationFromTeamMemberGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, InvitationService_RemoveInvitationFromTeamMemberGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvitationServiceServer is the server API for InvitationService service.
// All implementations must embed UnimplementedInvitationServiceServer
// for forward compatibility
type InvitationServiceServer interface {
	GetInvitation(context.Context, *GetInvitationRequest) (*GetInvitationResponse, error)
	ListInvitations(context.Context, *ListInvitationsRequest) (*ListInvitationsResponse, error)
	CreateInvitation(context.Context, *CreateInvitationRequest) (*CreateInvitationResponse, error)
	UpdateInvitation(context.Context, *UpdateInvitationRequest) (*emptypb.Empty, error)
	AcceptInvitation(context.Context, *AcceptInvitationRequest) (*emptypb.Empty, error)
	DeclineInvitation(context.Context, *DeclineInvitationRequest) (*emptypb.Empty, error)
	DeleteInvitation(context.Context, *DeleteInvitationRequest) (*emptypb.Empty, error)
	AddInvitationToTeamMemberGroup(context.Context, *AddInvitationToTeamMemberGroupRequest) (*emptypb.Empty, error)
	RemoveInvitationFromTeamMemberGroup(context.Context, *RemoveInvitationFromTeamMemberGroupRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedInvitationServiceServer()
}

// UnimplementedInvitationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInvitationServiceServer struct {
}

func (UnimplementedInvitationServiceServer) GetInvitation(context.Context, *GetInvitationRequest) (*GetInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvitation not implemented")
}
func (UnimplementedInvitationServiceServer) ListInvitations(context.Context, *ListInvitationsRequest) (*ListInvitationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInvitations not implemented")
}
func (UnimplementedInvitationServiceServer) CreateInvitation(context.Context, *CreateInvitationRequest) (*CreateInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvitation not implemented")
}
func (UnimplementedInvitationServiceServer) UpdateInvitation(context.Context, *UpdateInvitationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInvitation not implemented")
}
func (UnimplementedInvitationServiceServer) AcceptInvitation(context.Context, *AcceptInvitationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptInvitation not implemented")
}
func (UnimplementedInvitationServiceServer) DeclineInvitation(context.Context, *DeclineInvitationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeclineInvitation not implemented")
}
func (UnimplementedInvitationServiceServer) DeleteInvitation(context.Context, *DeleteInvitationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInvitation not implemented")
}
func (UnimplementedInvitationServiceServer) AddInvitationToTeamMemberGroup(context.Context, *AddInvitationToTeamMemberGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInvitationToTeamMemberGroup not implemented")
}
func (UnimplementedInvitationServiceServer) RemoveInvitationFromTeamMemberGroup(context.Context, *RemoveInvitationFromTeamMemberGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveInvitationFromTeamMemberGroup not implemented")
}
func (UnimplementedInvitationServiceServer) mustEmbedUnimplementedInvitationServiceServer() {}

// UnsafeInvitationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InvitationServiceServer will
// result in compilation errors.
type UnsafeInvitationServiceServer interface {
	mustEmbedUnimplementedInvitationServiceServer()
}

func RegisterInvitationServiceServer(s grpc.ServiceRegistrar, srv InvitationServiceServer) {
	s.RegisterService(&InvitationService_ServiceDesc, srv)
}

func _InvitationService_GetInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationServiceServer).GetInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvitationService_GetInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationServiceServer).GetInvitation(ctx, req.(*GetInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitationService_ListInvitations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInvitationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationServiceServer).ListInvitations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvitationService_ListInvitations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationServiceServer).ListInvitations(ctx, req.(*ListInvitationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitationService_CreateInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationServiceServer).CreateInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvitationService_CreateInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationServiceServer).CreateInvitation(ctx, req.(*CreateInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitationService_UpdateInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationServiceServer).UpdateInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvitationService_UpdateInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationServiceServer).UpdateInvitation(ctx, req.(*UpdateInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitationService_AcceptInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationServiceServer).AcceptInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvitationService_AcceptInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationServiceServer).AcceptInvitation(ctx, req.(*AcceptInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitationService_DeclineInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeclineInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationServiceServer).DeclineInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvitationService_DeclineInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationServiceServer).DeclineInvitation(ctx, req.(*DeclineInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitationService_DeleteInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationServiceServer).DeleteInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvitationService_DeleteInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationServiceServer).DeleteInvitation(ctx, req.(*DeleteInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitationService_AddInvitationToTeamMemberGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInvitationToTeamMemberGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationServiceServer).AddInvitationToTeamMemberGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvitationService_AddInvitationToTeamMemberGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationServiceServer).AddInvitationToTeamMemberGroup(ctx, req.(*AddInvitationToTeamMemberGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitationService_RemoveInvitationFromTeamMemberGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveInvitationFromTeamMemberGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationServiceServer).RemoveInvitationFromTeamMemberGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvitationService_RemoveInvitationFromTeamMemberGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationServiceServer).RemoveInvitationFromTeamMemberGroup(ctx, req.(*RemoveInvitationFromTeamMemberGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InvitationService_ServiceDesc is the grpc.ServiceDesc for InvitationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InvitationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "InvitationService",
	HandlerType: (*InvitationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInvitation",
			Handler:    _InvitationService_GetInvitation_Handler,
		},
		{
			MethodName: "ListInvitations",
			Handler:    _InvitationService_ListInvitations_Handler,
		},
		{
			MethodName: "CreateInvitation",
			Handler:    _InvitationService_CreateInvitation_Handler,
		},
		{
			MethodName: "UpdateInvitation",
			Handler:    _InvitationService_UpdateInvitation_Handler,
		},
		{
			MethodName: "AcceptInvitation",
			Handler:    _InvitationService_AcceptInvitation_Handler,
		},
		{
			MethodName: "DeclineInvitation",
			Handler:    _InvitationService_DeclineInvitation_Handler,
		},
		{
			MethodName: "DeleteInvitation",
			Handler:    _InvitationService_DeleteInvitation_Handler,
		},
		{
			MethodName: "AddInvitationToTeamMemberGroup",
			Handler:    _InvitationService_AddInvitationToTeamMemberGroup_Handler,
		},
		{
			MethodName: "RemoveInvitationFromTeamMemberGroup",
			Handler:    _InvitationService_RemoveInvitationFromTeamMemberGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teamy/invitation_service.proto",
}
