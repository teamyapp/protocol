// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: teamy/team.proto

package teamy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Team_CreateTeam_FullMethodName            = "/Team/CreateTeam"
	Team_UpdateTeam_FullMethodName            = "/Team/UpdateTeam"
	Team_ListTeamMembers_FullMethodName       = "/Team/ListTeamMembers"
	Team_AddMemberToTeam_FullMethodName       = "/Team/AddMemberToTeam"
	Team_RemoveMemberFromTeam_FullMethodName  = "/Team/RemoveMemberFromTeam"
	Team_ListMemberGroups_FullMethodName      = "/Team/ListMemberGroups"
	Team_CreateMemberGroup_FullMethodName     = "/Team/CreateMemberGroup"
	Team_UpdateMemberGroup_FullMethodName     = "/Team/UpdateMemberGroup"
	Team_DeleteMemberGroup_FullMethodName     = "/Team/DeleteMemberGroup"
	Team_AddMemberToGroup_FullMethodName      = "/Team/AddMemberToGroup"
	Team_RemoveMemberFromGroup_FullMethodName = "/Team/RemoveMemberFromGroup"
)

// TeamClient is the client API for Team service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeamClient interface {
	CreateTeam(ctx context.Context, in *CreateTeamRequest, opts ...grpc.CallOption) (*CreateTeamResponse, error)
	UpdateTeam(ctx context.Context, in *UpdateTeamRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListTeamMembers(ctx context.Context, in *ListTeamMembersRequest, opts ...grpc.CallOption) (*ListTeamMembersResponse, error)
	AddMemberToTeam(ctx context.Context, in *AddMemberToTeamRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveMemberFromTeam(ctx context.Context, in *RemoveMemberFromRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListMemberGroups(ctx context.Context, in *ListMemberGroupsRequest, opts ...grpc.CallOption) (*ListTeamMemberGroupsResponse, error)
	CreateMemberGroup(ctx context.Context, in *CreateTeamMemberGroupRequest, opts ...grpc.CallOption) (*CreateTeamMemberGroupResponse, error)
	UpdateMemberGroup(ctx context.Context, in *UpdateTeamMemberGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteMemberGroup(ctx context.Context, in *DeleteTeamMemberGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddMemberToGroup(ctx context.Context, in *AddTeamMemberToGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveMemberFromGroup(ctx context.Context, in *RemoveTeamMemberFromGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type teamClient struct {
	cc grpc.ClientConnInterface
}

func NewTeamClient(cc grpc.ClientConnInterface) TeamClient {
	return &teamClient{cc}
}

func (c *teamClient) CreateTeam(ctx context.Context, in *CreateTeamRequest, opts ...grpc.CallOption) (*CreateTeamResponse, error) {
	out := new(CreateTeamResponse)
	err := c.cc.Invoke(ctx, Team_CreateTeam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) UpdateTeam(ctx context.Context, in *UpdateTeamRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Team_UpdateTeam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) ListTeamMembers(ctx context.Context, in *ListTeamMembersRequest, opts ...grpc.CallOption) (*ListTeamMembersResponse, error) {
	out := new(ListTeamMembersResponse)
	err := c.cc.Invoke(ctx, Team_ListTeamMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) AddMemberToTeam(ctx context.Context, in *AddMemberToTeamRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Team_AddMemberToTeam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) RemoveMemberFromTeam(ctx context.Context, in *RemoveMemberFromRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Team_RemoveMemberFromTeam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) ListMemberGroups(ctx context.Context, in *ListMemberGroupsRequest, opts ...grpc.CallOption) (*ListTeamMemberGroupsResponse, error) {
	out := new(ListTeamMemberGroupsResponse)
	err := c.cc.Invoke(ctx, Team_ListMemberGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) CreateMemberGroup(ctx context.Context, in *CreateTeamMemberGroupRequest, opts ...grpc.CallOption) (*CreateTeamMemberGroupResponse, error) {
	out := new(CreateTeamMemberGroupResponse)
	err := c.cc.Invoke(ctx, Team_CreateMemberGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) UpdateMemberGroup(ctx context.Context, in *UpdateTeamMemberGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Team_UpdateMemberGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) DeleteMemberGroup(ctx context.Context, in *DeleteTeamMemberGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Team_DeleteMemberGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) AddMemberToGroup(ctx context.Context, in *AddTeamMemberToGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Team_AddMemberToGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) RemoveMemberFromGroup(ctx context.Context, in *RemoveTeamMemberFromGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Team_RemoveMemberFromGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeamServer is the server API for Team service.
// All implementations must embed UnimplementedTeamServer
// for forward compatibility
type TeamServer interface {
	CreateTeam(context.Context, *CreateTeamRequest) (*CreateTeamResponse, error)
	UpdateTeam(context.Context, *UpdateTeamRequest) (*emptypb.Empty, error)
	ListTeamMembers(context.Context, *ListTeamMembersRequest) (*ListTeamMembersResponse, error)
	AddMemberToTeam(context.Context, *AddMemberToTeamRequest) (*emptypb.Empty, error)
	RemoveMemberFromTeam(context.Context, *RemoveMemberFromRequest) (*emptypb.Empty, error)
	ListMemberGroups(context.Context, *ListMemberGroupsRequest) (*ListTeamMemberGroupsResponse, error)
	CreateMemberGroup(context.Context, *CreateTeamMemberGroupRequest) (*CreateTeamMemberGroupResponse, error)
	UpdateMemberGroup(context.Context, *UpdateTeamMemberGroupRequest) (*emptypb.Empty, error)
	DeleteMemberGroup(context.Context, *DeleteTeamMemberGroupRequest) (*emptypb.Empty, error)
	AddMemberToGroup(context.Context, *AddTeamMemberToGroupRequest) (*emptypb.Empty, error)
	RemoveMemberFromGroup(context.Context, *RemoveTeamMemberFromGroupRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedTeamServer()
}

// UnimplementedTeamServer must be embedded to have forward compatible implementations.
type UnimplementedTeamServer struct {
}

func (UnimplementedTeamServer) CreateTeam(context.Context, *CreateTeamRequest) (*CreateTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeam not implemented")
}
func (UnimplementedTeamServer) UpdateTeam(context.Context, *UpdateTeamRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeam not implemented")
}
func (UnimplementedTeamServer) ListTeamMembers(context.Context, *ListTeamMembersRequest) (*ListTeamMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTeamMembers not implemented")
}
func (UnimplementedTeamServer) AddMemberToTeam(context.Context, *AddMemberToTeamRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemberToTeam not implemented")
}
func (UnimplementedTeamServer) RemoveMemberFromTeam(context.Context, *RemoveMemberFromRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMemberFromTeam not implemented")
}
func (UnimplementedTeamServer) ListMemberGroups(context.Context, *ListMemberGroupsRequest) (*ListTeamMemberGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMemberGroups not implemented")
}
func (UnimplementedTeamServer) CreateMemberGroup(context.Context, *CreateTeamMemberGroupRequest) (*CreateTeamMemberGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMemberGroup not implemented")
}
func (UnimplementedTeamServer) UpdateMemberGroup(context.Context, *UpdateTeamMemberGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberGroup not implemented")
}
func (UnimplementedTeamServer) DeleteMemberGroup(context.Context, *DeleteTeamMemberGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMemberGroup not implemented")
}
func (UnimplementedTeamServer) AddMemberToGroup(context.Context, *AddTeamMemberToGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemberToGroup not implemented")
}
func (UnimplementedTeamServer) RemoveMemberFromGroup(context.Context, *RemoveTeamMemberFromGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMemberFromGroup not implemented")
}
func (UnimplementedTeamServer) mustEmbedUnimplementedTeamServer() {}

// UnsafeTeamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeamServer will
// result in compilation errors.
type UnsafeTeamServer interface {
	mustEmbedUnimplementedTeamServer()
}

func RegisterTeamServer(s grpc.ServiceRegistrar, srv TeamServer) {
	s.RegisterService(&Team_ServiceDesc, srv)
}

func _Team_CreateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).CreateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Team_CreateTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).CreateTeam(ctx, req.(*CreateTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_UpdateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).UpdateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Team_UpdateTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).UpdateTeam(ctx, req.(*UpdateTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_ListTeamMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTeamMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).ListTeamMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Team_ListTeamMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).ListTeamMembers(ctx, req.(*ListTeamMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_AddMemberToTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberToTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).AddMemberToTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Team_AddMemberToTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).AddMemberToTeam(ctx, req.(*AddMemberToTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_RemoveMemberFromTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMemberFromRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).RemoveMemberFromTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Team_RemoveMemberFromTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).RemoveMemberFromTeam(ctx, req.(*RemoveMemberFromRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_ListMemberGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMemberGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).ListMemberGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Team_ListMemberGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).ListMemberGroups(ctx, req.(*ListMemberGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_CreateMemberGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeamMemberGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).CreateMemberGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Team_CreateMemberGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).CreateMemberGroup(ctx, req.(*CreateTeamMemberGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_UpdateMemberGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTeamMemberGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).UpdateMemberGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Team_UpdateMemberGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).UpdateMemberGroup(ctx, req.(*UpdateTeamMemberGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_DeleteMemberGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTeamMemberGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).DeleteMemberGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Team_DeleteMemberGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).DeleteMemberGroup(ctx, req.(*DeleteTeamMemberGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_AddMemberToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTeamMemberToGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).AddMemberToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Team_AddMemberToGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).AddMemberToGroup(ctx, req.(*AddTeamMemberToGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_RemoveMemberFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTeamMemberFromGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).RemoveMemberFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Team_RemoveMemberFromGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).RemoveMemberFromGroup(ctx, req.(*RemoveTeamMemberFromGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Team_ServiceDesc is the grpc.ServiceDesc for Team service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Team_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Team",
	HandlerType: (*TeamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTeam",
			Handler:    _Team_CreateTeam_Handler,
		},
		{
			MethodName: "UpdateTeam",
			Handler:    _Team_UpdateTeam_Handler,
		},
		{
			MethodName: "ListTeamMembers",
			Handler:    _Team_ListTeamMembers_Handler,
		},
		{
			MethodName: "AddMemberToTeam",
			Handler:    _Team_AddMemberToTeam_Handler,
		},
		{
			MethodName: "RemoveMemberFromTeam",
			Handler:    _Team_RemoveMemberFromTeam_Handler,
		},
		{
			MethodName: "ListMemberGroups",
			Handler:    _Team_ListMemberGroups_Handler,
		},
		{
			MethodName: "CreateMemberGroup",
			Handler:    _Team_CreateMemberGroup_Handler,
		},
		{
			MethodName: "UpdateMemberGroup",
			Handler:    _Team_UpdateMemberGroup_Handler,
		},
		{
			MethodName: "DeleteMemberGroup",
			Handler:    _Team_DeleteMemberGroup_Handler,
		},
		{
			MethodName: "AddMemberToGroup",
			Handler:    _Team_AddMemberToGroup_Handler,
		},
		{
			MethodName: "RemoveMemberFromGroup",
			Handler:    _Team_RemoveMemberFromGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teamy/team.proto",
}
