// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: cloud/authorization.proto

package pbcloud

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Authorization_HasPermission_FullMethodName            = "/Authorization/HasPermission"
	Authorization_ListResourceTypes_FullMethodName        = "/Authorization/ListResourceTypes"
	Authorization_RegisterResourceType_FullMethodName     = "/Authorization/RegisterResourceType"
	Authorization_UnregisterResourceType_FullMethodName   = "/Authorization/UnregisterResourceType"
	Authorization_ListResources_FullMethodName            = "/Authorization/ListResources"
	Authorization_RegisterResource_FullMethodName         = "/Authorization/RegisterResource"
	Authorization_UnregisterResource_FullMethodName       = "/Authorization/UnregisterResource"
	Authorization_ListResourceRelations_FullMethodName    = "/Authorization/ListResourceRelations"
	Authorization_AssignParentResource_FullMethodName     = "/Authorization/AssignParentResource"
	Authorization_UnassignParentResource_FullMethodName   = "/Authorization/UnassignParentResource"
	Authorization_ListOperations_FullMethodName           = "/Authorization/ListOperations"
	Authorization_RegisterOperation_FullMethodName        = "/Authorization/RegisterOperation"
	Authorization_UnregisterOperation_FullMethodName      = "/Authorization/UnregisterOperation"
	Authorization_ListOperationRelations_FullMethodName   = "/Authorization/ListOperationRelations"
	Authorization_AssignParentOperation_FullMethodName    = "/Authorization/AssignParentOperation"
	Authorization_UnassignParentOperation_FullMethodName  = "/Authorization/UnassignParentOperation"
	Authorization_ListUserGroups_FullMethodName           = "/Authorization/ListUserGroups"
	Authorization_CreateUserGroup_FullMethodName          = "/Authorization/CreateUserGroup"
	Authorization_UpdateUserGroup_FullMethodName          = "/Authorization/UpdateUserGroup"
	Authorization_DeleteUserGroup_FullMethodName          = "/Authorization/DeleteUserGroup"
	Authorization_ListUserGroupMembers_FullMethodName     = "/Authorization/ListUserGroupMembers"
	Authorization_AddUserGroupMember_FullMethodName       = "/Authorization/AddUserGroupMember"
	Authorization_RemoveUserGroupMember_FullMethodName    = "/Authorization/RemoveUserGroupMember"
	Authorization_ListPermissions_FullMethodName          = "/Authorization/ListPermissions"
	Authorization_AddPermission_FullMethodName            = "/Authorization/AddPermission"
	Authorization_RemovePermission_FullMethodName         = "/Authorization/RemovePermission"
	Authorization_ApplyAuthorizationConfig_FullMethodName = "/Authorization/ApplyAuthorizationConfig"
)

// AuthorizationClient is the client API for Authorization service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorizationClient interface {
	HasPermission(ctx context.Context, in *HasPermissionRequest, opts ...grpc.CallOption) (*HasPermissionResponse, error)
	ListResourceTypes(ctx context.Context, in *ListResourceTypesQuery, opts ...grpc.CallOption) (*ListResourceTypesResponse, error)
	RegisterResourceType(ctx context.Context, in *RegisterResourceTypeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnregisterResourceType(ctx context.Context, in *UnregisterResourceTypeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListResources(ctx context.Context, in *ListResourcesQuery, opts ...grpc.CallOption) (*ListResourcesResponse, error)
	RegisterResource(ctx context.Context, in *RegisterResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnregisterResource(ctx context.Context, in *UnregisterResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListResourceRelations(ctx context.Context, in *ListResourceRelationsQuery, opts ...grpc.CallOption) (*ListResourceRelationsResponse, error)
	AssignParentResource(ctx context.Context, in *AssignParentResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnassignParentResource(ctx context.Context, in *UnassignParentResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListOperations(ctx context.Context, in *ListOperationsQuery, opts ...grpc.CallOption) (*ListOperationsResponse, error)
	RegisterOperation(ctx context.Context, in *RegisterOperationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnregisterOperation(ctx context.Context, in *UnregisterOperationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListOperationRelations(ctx context.Context, in *ListOperationRelationsQuery, opts ...grpc.CallOption) (*ListOperationRelationsResponse, error)
	AssignParentOperation(ctx context.Context, in *AssignParentOperationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnassignParentOperation(ctx context.Context, in *UnassignParentOperationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListUserGroups(ctx context.Context, in *ListUserGroupsQuery, opts ...grpc.CallOption) (*ListUserGroupsResponse, error)
	CreateUserGroup(ctx context.Context, in *CreateUserGroupRequest, opts ...grpc.CallOption) (*CreateUserGroupResponse, error)
	UpdateUserGroup(ctx context.Context, in *UpdateUserGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteUserGroup(ctx context.Context, in *DeleteUserGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListUserGroupMembers(ctx context.Context, in *ListUserGroupMembersQuery, opts ...grpc.CallOption) (*ListUserGroupMembersResponse, error)
	AddUserGroupMember(ctx context.Context, in *AddUserGroupMemberRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveUserGroupMember(ctx context.Context, in *RemoveUserGroupMemberRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListPermissions(ctx context.Context, in *ListPermissionsQuery, opts ...grpc.CallOption) (*ListPermissionsResponse, error)
	AddPermission(ctx context.Context, in *AddPermissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemovePermission(ctx context.Context, in *RemovePermissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ApplyAuthorizationConfig(ctx context.Context, in *ApplyAuthorizationConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type authorizationClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorizationClient(cc grpc.ClientConnInterface) AuthorizationClient {
	return &authorizationClient{cc}
}

func (c *authorizationClient) HasPermission(ctx context.Context, in *HasPermissionRequest, opts ...grpc.CallOption) (*HasPermissionResponse, error) {
	out := new(HasPermissionResponse)
	err := c.cc.Invoke(ctx, Authorization_HasPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) ListResourceTypes(ctx context.Context, in *ListResourceTypesQuery, opts ...grpc.CallOption) (*ListResourceTypesResponse, error) {
	out := new(ListResourceTypesResponse)
	err := c.cc.Invoke(ctx, Authorization_ListResourceTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) RegisterResourceType(ctx context.Context, in *RegisterResourceTypeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Authorization_RegisterResourceType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) UnregisterResourceType(ctx context.Context, in *UnregisterResourceTypeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Authorization_UnregisterResourceType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) ListResources(ctx context.Context, in *ListResourcesQuery, opts ...grpc.CallOption) (*ListResourcesResponse, error) {
	out := new(ListResourcesResponse)
	err := c.cc.Invoke(ctx, Authorization_ListResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) RegisterResource(ctx context.Context, in *RegisterResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Authorization_RegisterResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) UnregisterResource(ctx context.Context, in *UnregisterResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Authorization_UnregisterResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) ListResourceRelations(ctx context.Context, in *ListResourceRelationsQuery, opts ...grpc.CallOption) (*ListResourceRelationsResponse, error) {
	out := new(ListResourceRelationsResponse)
	err := c.cc.Invoke(ctx, Authorization_ListResourceRelations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) AssignParentResource(ctx context.Context, in *AssignParentResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Authorization_AssignParentResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) UnassignParentResource(ctx context.Context, in *UnassignParentResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Authorization_UnassignParentResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) ListOperations(ctx context.Context, in *ListOperationsQuery, opts ...grpc.CallOption) (*ListOperationsResponse, error) {
	out := new(ListOperationsResponse)
	err := c.cc.Invoke(ctx, Authorization_ListOperations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) RegisterOperation(ctx context.Context, in *RegisterOperationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Authorization_RegisterOperation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) UnregisterOperation(ctx context.Context, in *UnregisterOperationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Authorization_UnregisterOperation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) ListOperationRelations(ctx context.Context, in *ListOperationRelationsQuery, opts ...grpc.CallOption) (*ListOperationRelationsResponse, error) {
	out := new(ListOperationRelationsResponse)
	err := c.cc.Invoke(ctx, Authorization_ListOperationRelations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) AssignParentOperation(ctx context.Context, in *AssignParentOperationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Authorization_AssignParentOperation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) UnassignParentOperation(ctx context.Context, in *UnassignParentOperationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Authorization_UnassignParentOperation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) ListUserGroups(ctx context.Context, in *ListUserGroupsQuery, opts ...grpc.CallOption) (*ListUserGroupsResponse, error) {
	out := new(ListUserGroupsResponse)
	err := c.cc.Invoke(ctx, Authorization_ListUserGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) CreateUserGroup(ctx context.Context, in *CreateUserGroupRequest, opts ...grpc.CallOption) (*CreateUserGroupResponse, error) {
	out := new(CreateUserGroupResponse)
	err := c.cc.Invoke(ctx, Authorization_CreateUserGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) UpdateUserGroup(ctx context.Context, in *UpdateUserGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Authorization_UpdateUserGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) DeleteUserGroup(ctx context.Context, in *DeleteUserGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Authorization_DeleteUserGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) ListUserGroupMembers(ctx context.Context, in *ListUserGroupMembersQuery, opts ...grpc.CallOption) (*ListUserGroupMembersResponse, error) {
	out := new(ListUserGroupMembersResponse)
	err := c.cc.Invoke(ctx, Authorization_ListUserGroupMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) AddUserGroupMember(ctx context.Context, in *AddUserGroupMemberRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Authorization_AddUserGroupMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) RemoveUserGroupMember(ctx context.Context, in *RemoveUserGroupMemberRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Authorization_RemoveUserGroupMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) ListPermissions(ctx context.Context, in *ListPermissionsQuery, opts ...grpc.CallOption) (*ListPermissionsResponse, error) {
	out := new(ListPermissionsResponse)
	err := c.cc.Invoke(ctx, Authorization_ListPermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) AddPermission(ctx context.Context, in *AddPermissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Authorization_AddPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) RemovePermission(ctx context.Context, in *RemovePermissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Authorization_RemovePermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) ApplyAuthorizationConfig(ctx context.Context, in *ApplyAuthorizationConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Authorization_ApplyAuthorizationConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizationServer is the server API for Authorization service.
// All implementations must embed UnimplementedAuthorizationServer
// for forward compatibility
type AuthorizationServer interface {
	HasPermission(context.Context, *HasPermissionRequest) (*HasPermissionResponse, error)
	ListResourceTypes(context.Context, *ListResourceTypesQuery) (*ListResourceTypesResponse, error)
	RegisterResourceType(context.Context, *RegisterResourceTypeRequest) (*emptypb.Empty, error)
	UnregisterResourceType(context.Context, *UnregisterResourceTypeRequest) (*emptypb.Empty, error)
	ListResources(context.Context, *ListResourcesQuery) (*ListResourcesResponse, error)
	RegisterResource(context.Context, *RegisterResourceRequest) (*emptypb.Empty, error)
	UnregisterResource(context.Context, *UnregisterResourceRequest) (*emptypb.Empty, error)
	ListResourceRelations(context.Context, *ListResourceRelationsQuery) (*ListResourceRelationsResponse, error)
	AssignParentResource(context.Context, *AssignParentResourceRequest) (*emptypb.Empty, error)
	UnassignParentResource(context.Context, *UnassignParentResourceRequest) (*emptypb.Empty, error)
	ListOperations(context.Context, *ListOperationsQuery) (*ListOperationsResponse, error)
	RegisterOperation(context.Context, *RegisterOperationRequest) (*emptypb.Empty, error)
	UnregisterOperation(context.Context, *UnregisterOperationRequest) (*emptypb.Empty, error)
	ListOperationRelations(context.Context, *ListOperationRelationsQuery) (*ListOperationRelationsResponse, error)
	AssignParentOperation(context.Context, *AssignParentOperationRequest) (*emptypb.Empty, error)
	UnassignParentOperation(context.Context, *UnassignParentOperationRequest) (*emptypb.Empty, error)
	ListUserGroups(context.Context, *ListUserGroupsQuery) (*ListUserGroupsResponse, error)
	CreateUserGroup(context.Context, *CreateUserGroupRequest) (*CreateUserGroupResponse, error)
	UpdateUserGroup(context.Context, *UpdateUserGroupRequest) (*emptypb.Empty, error)
	DeleteUserGroup(context.Context, *DeleteUserGroupRequest) (*emptypb.Empty, error)
	ListUserGroupMembers(context.Context, *ListUserGroupMembersQuery) (*ListUserGroupMembersResponse, error)
	AddUserGroupMember(context.Context, *AddUserGroupMemberRequest) (*emptypb.Empty, error)
	RemoveUserGroupMember(context.Context, *RemoveUserGroupMemberRequest) (*emptypb.Empty, error)
	ListPermissions(context.Context, *ListPermissionsQuery) (*ListPermissionsResponse, error)
	AddPermission(context.Context, *AddPermissionRequest) (*emptypb.Empty, error)
	RemovePermission(context.Context, *RemovePermissionRequest) (*emptypb.Empty, error)
	ApplyAuthorizationConfig(context.Context, *ApplyAuthorizationConfigRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAuthorizationServer()
}

// UnimplementedAuthorizationServer must be embedded to have forward compatible implementations.
type UnimplementedAuthorizationServer struct {
}

func (UnimplementedAuthorizationServer) HasPermission(context.Context, *HasPermissionRequest) (*HasPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasPermission not implemented")
}
func (UnimplementedAuthorizationServer) ListResourceTypes(context.Context, *ListResourceTypesQuery) (*ListResourceTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResourceTypes not implemented")
}
func (UnimplementedAuthorizationServer) RegisterResourceType(context.Context, *RegisterResourceTypeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterResourceType not implemented")
}
func (UnimplementedAuthorizationServer) UnregisterResourceType(context.Context, *UnregisterResourceTypeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterResourceType not implemented")
}
func (UnimplementedAuthorizationServer) ListResources(context.Context, *ListResourcesQuery) (*ListResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResources not implemented")
}
func (UnimplementedAuthorizationServer) RegisterResource(context.Context, *RegisterResourceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterResource not implemented")
}
func (UnimplementedAuthorizationServer) UnregisterResource(context.Context, *UnregisterResourceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterResource not implemented")
}
func (UnimplementedAuthorizationServer) ListResourceRelations(context.Context, *ListResourceRelationsQuery) (*ListResourceRelationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResourceRelations not implemented")
}
func (UnimplementedAuthorizationServer) AssignParentResource(context.Context, *AssignParentResourceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignParentResource not implemented")
}
func (UnimplementedAuthorizationServer) UnassignParentResource(context.Context, *UnassignParentResourceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnassignParentResource not implemented")
}
func (UnimplementedAuthorizationServer) ListOperations(context.Context, *ListOperationsQuery) (*ListOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperations not implemented")
}
func (UnimplementedAuthorizationServer) RegisterOperation(context.Context, *RegisterOperationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterOperation not implemented")
}
func (UnimplementedAuthorizationServer) UnregisterOperation(context.Context, *UnregisterOperationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterOperation not implemented")
}
func (UnimplementedAuthorizationServer) ListOperationRelations(context.Context, *ListOperationRelationsQuery) (*ListOperationRelationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperationRelations not implemented")
}
func (UnimplementedAuthorizationServer) AssignParentOperation(context.Context, *AssignParentOperationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignParentOperation not implemented")
}
func (UnimplementedAuthorizationServer) UnassignParentOperation(context.Context, *UnassignParentOperationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnassignParentOperation not implemented")
}
func (UnimplementedAuthorizationServer) ListUserGroups(context.Context, *ListUserGroupsQuery) (*ListUserGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserGroups not implemented")
}
func (UnimplementedAuthorizationServer) CreateUserGroup(context.Context, *CreateUserGroupRequest) (*CreateUserGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserGroup not implemented")
}
func (UnimplementedAuthorizationServer) UpdateUserGroup(context.Context, *UpdateUserGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserGroup not implemented")
}
func (UnimplementedAuthorizationServer) DeleteUserGroup(context.Context, *DeleteUserGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserGroup not implemented")
}
func (UnimplementedAuthorizationServer) ListUserGroupMembers(context.Context, *ListUserGroupMembersQuery) (*ListUserGroupMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserGroupMembers not implemented")
}
func (UnimplementedAuthorizationServer) AddUserGroupMember(context.Context, *AddUserGroupMemberRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserGroupMember not implemented")
}
func (UnimplementedAuthorizationServer) RemoveUserGroupMember(context.Context, *RemoveUserGroupMemberRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserGroupMember not implemented")
}
func (UnimplementedAuthorizationServer) ListPermissions(context.Context, *ListPermissionsQuery) (*ListPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPermissions not implemented")
}
func (UnimplementedAuthorizationServer) AddPermission(context.Context, *AddPermissionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPermission not implemented")
}
func (UnimplementedAuthorizationServer) RemovePermission(context.Context, *RemovePermissionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePermission not implemented")
}
func (UnimplementedAuthorizationServer) ApplyAuthorizationConfig(context.Context, *ApplyAuthorizationConfigRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyAuthorizationConfig not implemented")
}
func (UnimplementedAuthorizationServer) mustEmbedUnimplementedAuthorizationServer() {}

// UnsafeAuthorizationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorizationServer will
// result in compilation errors.
type UnsafeAuthorizationServer interface {
	mustEmbedUnimplementedAuthorizationServer()
}

func RegisterAuthorizationServer(s grpc.ServiceRegistrar, srv AuthorizationServer) {
	s.RegisterService(&Authorization_ServiceDesc, srv)
}

func _Authorization_HasPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).HasPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_HasPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).HasPermission(ctx, req.(*HasPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_ListResourceTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourceTypesQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).ListResourceTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_ListResourceTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).ListResourceTypes(ctx, req.(*ListResourceTypesQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_RegisterResourceType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterResourceTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).RegisterResourceType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_RegisterResourceType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).RegisterResourceType(ctx, req.(*RegisterResourceTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_UnregisterResourceType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterResourceTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).UnregisterResourceType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_UnregisterResourceType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).UnregisterResourceType(ctx, req.(*UnregisterResourceTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_ListResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourcesQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).ListResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_ListResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).ListResources(ctx, req.(*ListResourcesQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_RegisterResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).RegisterResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_RegisterResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).RegisterResource(ctx, req.(*RegisterResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_UnregisterResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).UnregisterResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_UnregisterResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).UnregisterResource(ctx, req.(*UnregisterResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_ListResourceRelations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourceRelationsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).ListResourceRelations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_ListResourceRelations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).ListResourceRelations(ctx, req.(*ListResourceRelationsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_AssignParentResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignParentResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).AssignParentResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_AssignParentResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).AssignParentResource(ctx, req.(*AssignParentResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_UnassignParentResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnassignParentResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).UnassignParentResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_UnassignParentResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).UnassignParentResource(ctx, req.(*UnassignParentResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_ListOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOperationsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).ListOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_ListOperations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).ListOperations(ctx, req.(*ListOperationsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_RegisterOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).RegisterOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_RegisterOperation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).RegisterOperation(ctx, req.(*RegisterOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_UnregisterOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).UnregisterOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_UnregisterOperation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).UnregisterOperation(ctx, req.(*UnregisterOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_ListOperationRelations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOperationRelationsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).ListOperationRelations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_ListOperationRelations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).ListOperationRelations(ctx, req.(*ListOperationRelationsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_AssignParentOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignParentOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).AssignParentOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_AssignParentOperation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).AssignParentOperation(ctx, req.(*AssignParentOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_UnassignParentOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnassignParentOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).UnassignParentOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_UnassignParentOperation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).UnassignParentOperation(ctx, req.(*UnassignParentOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_ListUserGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserGroupsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).ListUserGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_ListUserGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).ListUserGroups(ctx, req.(*ListUserGroupsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_CreateUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).CreateUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_CreateUserGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).CreateUserGroup(ctx, req.(*CreateUserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_UpdateUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).UpdateUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_UpdateUserGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).UpdateUserGroup(ctx, req.(*UpdateUserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_DeleteUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).DeleteUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_DeleteUserGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).DeleteUserGroup(ctx, req.(*DeleteUserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_ListUserGroupMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserGroupMembersQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).ListUserGroupMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_ListUserGroupMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).ListUserGroupMembers(ctx, req.(*ListUserGroupMembersQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_AddUserGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserGroupMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).AddUserGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_AddUserGroupMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).AddUserGroupMember(ctx, req.(*AddUserGroupMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_RemoveUserGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserGroupMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).RemoveUserGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_RemoveUserGroupMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).RemoveUserGroupMember(ctx, req.(*RemoveUserGroupMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_ListPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPermissionsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).ListPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_ListPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).ListPermissions(ctx, req.(*ListPermissionsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_AddPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).AddPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_AddPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).AddPermission(ctx, req.(*AddPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_RemovePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).RemovePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_RemovePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).RemovePermission(ctx, req.(*RemovePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_ApplyAuthorizationConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyAuthorizationConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).ApplyAuthorizationConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_ApplyAuthorizationConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).ApplyAuthorizationConfig(ctx, req.(*ApplyAuthorizationConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Authorization_ServiceDesc is the grpc.ServiceDesc for Authorization service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Authorization_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Authorization",
	HandlerType: (*AuthorizationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HasPermission",
			Handler:    _Authorization_HasPermission_Handler,
		},
		{
			MethodName: "ListResourceTypes",
			Handler:    _Authorization_ListResourceTypes_Handler,
		},
		{
			MethodName: "RegisterResourceType",
			Handler:    _Authorization_RegisterResourceType_Handler,
		},
		{
			MethodName: "UnregisterResourceType",
			Handler:    _Authorization_UnregisterResourceType_Handler,
		},
		{
			MethodName: "ListResources",
			Handler:    _Authorization_ListResources_Handler,
		},
		{
			MethodName: "RegisterResource",
			Handler:    _Authorization_RegisterResource_Handler,
		},
		{
			MethodName: "UnregisterResource",
			Handler:    _Authorization_UnregisterResource_Handler,
		},
		{
			MethodName: "ListResourceRelations",
			Handler:    _Authorization_ListResourceRelations_Handler,
		},
		{
			MethodName: "AssignParentResource",
			Handler:    _Authorization_AssignParentResource_Handler,
		},
		{
			MethodName: "UnassignParentResource",
			Handler:    _Authorization_UnassignParentResource_Handler,
		},
		{
			MethodName: "ListOperations",
			Handler:    _Authorization_ListOperations_Handler,
		},
		{
			MethodName: "RegisterOperation",
			Handler:    _Authorization_RegisterOperation_Handler,
		},
		{
			MethodName: "UnregisterOperation",
			Handler:    _Authorization_UnregisterOperation_Handler,
		},
		{
			MethodName: "ListOperationRelations",
			Handler:    _Authorization_ListOperationRelations_Handler,
		},
		{
			MethodName: "AssignParentOperation",
			Handler:    _Authorization_AssignParentOperation_Handler,
		},
		{
			MethodName: "UnassignParentOperation",
			Handler:    _Authorization_UnassignParentOperation_Handler,
		},
		{
			MethodName: "ListUserGroups",
			Handler:    _Authorization_ListUserGroups_Handler,
		},
		{
			MethodName: "CreateUserGroup",
			Handler:    _Authorization_CreateUserGroup_Handler,
		},
		{
			MethodName: "UpdateUserGroup",
			Handler:    _Authorization_UpdateUserGroup_Handler,
		},
		{
			MethodName: "DeleteUserGroup",
			Handler:    _Authorization_DeleteUserGroup_Handler,
		},
		{
			MethodName: "ListUserGroupMembers",
			Handler:    _Authorization_ListUserGroupMembers_Handler,
		},
		{
			MethodName: "AddUserGroupMember",
			Handler:    _Authorization_AddUserGroupMember_Handler,
		},
		{
			MethodName: "RemoveUserGroupMember",
			Handler:    _Authorization_RemoveUserGroupMember_Handler,
		},
		{
			MethodName: "ListPermissions",
			Handler:    _Authorization_ListPermissions_Handler,
		},
		{
			MethodName: "AddPermission",
			Handler:    _Authorization_AddPermission_Handler,
		},
		{
			MethodName: "RemovePermission",
			Handler:    _Authorization_RemovePermission_Handler,
		},
		{
			MethodName: "ApplyAuthorizationConfig",
			Handler:    _Authorization_ApplyAuthorizationConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/authorization.proto",
}
