// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: cloud/file.proto

package pbcloud

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	File_FindUploadSession_FullMethodName   = "/File/FindUploadSession"
	File_CreateUploadSession_FullMethodName = "/File/CreateUploadSession"
)

// FileClient is the client API for File service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileClient interface {
	FindUploadSession(ctx context.Context, in *FindUploadSessionRequest, opts ...grpc.CallOption) (*UploadSession, error)
	CreateUploadSession(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CreateUploadSessionResponse, error)
}

type fileClient struct {
	cc grpc.ClientConnInterface
}

func NewFileClient(cc grpc.ClientConnInterface) FileClient {
	return &fileClient{cc}
}

func (c *fileClient) FindUploadSession(ctx context.Context, in *FindUploadSessionRequest, opts ...grpc.CallOption) (*UploadSession, error) {
	out := new(UploadSession)
	err := c.cc.Invoke(ctx, File_FindUploadSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) CreateUploadSession(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CreateUploadSessionResponse, error) {
	out := new(CreateUploadSessionResponse)
	err := c.cc.Invoke(ctx, File_CreateUploadSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServer is the server API for File service.
// All implementations must embed UnimplementedFileServer
// for forward compatibility
type FileServer interface {
	FindUploadSession(context.Context, *FindUploadSessionRequest) (*UploadSession, error)
	CreateUploadSession(context.Context, *emptypb.Empty) (*CreateUploadSessionResponse, error)
	mustEmbedUnimplementedFileServer()
}

// UnimplementedFileServer must be embedded to have forward compatible implementations.
type UnimplementedFileServer struct {
}

func (UnimplementedFileServer) FindUploadSession(context.Context, *FindUploadSessionRequest) (*UploadSession, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUploadSession not implemented")
}
func (UnimplementedFileServer) CreateUploadSession(context.Context, *emptypb.Empty) (*CreateUploadSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUploadSession not implemented")
}
func (UnimplementedFileServer) mustEmbedUnimplementedFileServer() {}

// UnsafeFileServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServer will
// result in compilation errors.
type UnsafeFileServer interface {
	mustEmbedUnimplementedFileServer()
}

func RegisterFileServer(s grpc.ServiceRegistrar, srv FileServer) {
	s.RegisterService(&File_ServiceDesc, srv)
}

func _File_FindUploadSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUploadSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).FindUploadSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: File_FindUploadSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).FindUploadSession(ctx, req.(*FindUploadSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_CreateUploadSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).CreateUploadSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: File_CreateUploadSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).CreateUploadSession(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// File_ServiceDesc is the grpc.ServiceDesc for File service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var File_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "File",
	HandlerType: (*FileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindUploadSession",
			Handler:    _File_FindUploadSession_Handler,
		},
		{
			MethodName: "CreateUploadSession",
			Handler:    _File_CreateUploadSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/file.proto",
}
