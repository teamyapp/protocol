// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: sprint.proto

package pbgo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Sprint_GetActiveSprint_FullMethodName = "/Sprint/GetActiveSprint"
	Sprint_AddTaskToSprint_FullMethodName = "/Sprint/AddTaskToSprint"
)

// SprintClient is the client API for Sprint service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SprintClient interface {
	GetActiveSprint(ctx context.Context, in *GetActiveSprintRequest, opts ...grpc.CallOption) (*SprintMsg, error)
	AddTaskToSprint(ctx context.Context, in *AddTaskToSprintRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type sprintClient struct {
	cc grpc.ClientConnInterface
}

func NewSprintClient(cc grpc.ClientConnInterface) SprintClient {
	return &sprintClient{cc}
}

func (c *sprintClient) GetActiveSprint(ctx context.Context, in *GetActiveSprintRequest, opts ...grpc.CallOption) (*SprintMsg, error) {
	out := new(SprintMsg)
	err := c.cc.Invoke(ctx, Sprint_GetActiveSprint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sprintClient) AddTaskToSprint(ctx context.Context, in *AddTaskToSprintRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Sprint_AddTaskToSprint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SprintServer is the server API for Sprint service.
// All implementations must embed UnimplementedSprintServer
// for forward compatibility
type SprintServer interface {
	GetActiveSprint(context.Context, *GetActiveSprintRequest) (*SprintMsg, error)
	AddTaskToSprint(context.Context, *AddTaskToSprintRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedSprintServer()
}

// UnimplementedSprintServer must be embedded to have forward compatible implementations.
type UnimplementedSprintServer struct {
}

func (UnimplementedSprintServer) GetActiveSprint(context.Context, *GetActiveSprintRequest) (*SprintMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveSprint not implemented")
}
func (UnimplementedSprintServer) AddTaskToSprint(context.Context, *AddTaskToSprintRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTaskToSprint not implemented")
}
func (UnimplementedSprintServer) mustEmbedUnimplementedSprintServer() {}

// UnsafeSprintServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SprintServer will
// result in compilation errors.
type UnsafeSprintServer interface {
	mustEmbedUnimplementedSprintServer()
}

func RegisterSprintServer(s grpc.ServiceRegistrar, srv SprintServer) {
	s.RegisterService(&Sprint_ServiceDesc, srv)
}

func _Sprint_GetActiveSprint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveSprintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SprintServer).GetActiveSprint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sprint_GetActiveSprint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SprintServer).GetActiveSprint(ctx, req.(*GetActiveSprintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sprint_AddTaskToSprint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTaskToSprintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SprintServer).AddTaskToSprint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sprint_AddTaskToSprint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SprintServer).AddTaskToSprint(ctx, req.(*AddTaskToSprintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Sprint_ServiceDesc is the grpc.ServiceDesc for Sprint service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sprint_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Sprint",
	HandlerType: (*SprintServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetActiveSprint",
			Handler:    _Sprint_GetActiveSprint_Handler,
		},
		{
			MethodName: "AddTaskToSprint",
			Handler:    _Sprint_AddTaskToSprint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sprint.proto",
}
