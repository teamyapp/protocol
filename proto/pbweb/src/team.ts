// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "team.proto" (syntax proto3)
// tslint:disable
import { Empty } from "./google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message TeamMember
 */
export interface TeamMember {
    /**
     * @generated from protobuf field: uint64 userId = 1;
     */
    userId: number;
    /**
     * @generated from protobuf field: string firstName = 2;
     */
    firstName: string;
    /**
     * @generated from protobuf field: string lastName = 3;
     */
    lastName: string;
    /**
     * @generated from protobuf field: optional string profileUrl = 4;
     */
    profileUrl?: string;
}
/**
 * @generated from protobuf message TeamMemberGroup
 */
export interface TeamMemberGroup {
    /**
     * @generated from protobuf field: uint64 groupId = 1;
     */
    groupId: number;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: repeated uint64 memberUserIds = 3;
     */
    memberUserIds: number[];
}
/**
 * @generated from protobuf message CreateTeamRequest
 */
export interface CreateTeamRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * @generated from protobuf message CreateTeamResponse
 */
export interface CreateTeamResponse {
    /**
     * @generated from protobuf field: uint64 teamId = 1;
     */
    teamId: number;
}
/**
 * @generated from protobuf message UpdateTeamRequest
 */
export interface UpdateTeamRequest {
    /**
     * @generated from protobuf field: uint64 teamId = 1;
     */
    teamId: number;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string iconUrl = 3;
     */
    iconUrl: string;
    /**
     * @generated from protobuf field: uint64 ownerUserId = 4;
     */
    ownerUserId: number;
}
/**
 * @generated from protobuf message ListTeamMembersRequest
 */
export interface ListTeamMembersRequest {
    /**
     * @generated from protobuf field: uint64 teamId = 1;
     */
    teamId: number;
}
/**
 * @generated from protobuf message ListTeamMembersResponse
 */
export interface ListTeamMembersResponse {
    /**
     * @generated from protobuf field: repeated TeamMember teamMembers = 1;
     */
    teamMembers: TeamMember[];
}
/**
 * @generated from protobuf message AddMemberToTeamRequest
 */
export interface AddMemberToTeamRequest {
    /**
     * @generated from protobuf field: uint64 teamId = 1;
     */
    teamId: number;
    /**
     * @generated from protobuf field: uint64 memberUserId = 2;
     */
    memberUserId: number;
}
/**
 * @generated from protobuf message RemoveMemberFromRequest
 */
export interface RemoveMemberFromRequest {
    /**
     * @generated from protobuf field: uint64 teamId = 1;
     */
    teamId: number;
    /**
     * @generated from protobuf field: uint64 memberUserId = 2;
     */
    memberUserId: number;
}
/**
 * @generated from protobuf message ListMemberGroupsRequest
 */
export interface ListMemberGroupsRequest {
    /**
     * @generated from protobuf field: uint64 teamId = 1;
     */
    teamId: number;
}
/**
 * @generated from protobuf message ListTeamMemberGroupsResponse
 */
export interface ListTeamMemberGroupsResponse {
    /**
     * @generated from protobuf field: repeated TeamMemberGroup groups = 1;
     */
    groups: TeamMemberGroup[];
}
/**
 * @generated from protobuf message CreateTeamMemberGroupRequest
 */
export interface CreateTeamMemberGroupRequest {
    /**
     * @generated from protobuf field: uint64 teamId = 1;
     */
    teamId: number;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
}
/**
 * @generated from protobuf message CreateTeamMemberGroupResponse
 */
export interface CreateTeamMemberGroupResponse {
    /**
     * @generated from protobuf field: uint64 groupId = 1;
     */
    groupId: number;
}
/**
 * @generated from protobuf message UpdateTeamMemberGroupRequest
 */
export interface UpdateTeamMemberGroupRequest {
    /**
     * @generated from protobuf field: uint64 groupId = 1;
     */
    groupId: number;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
}
/**
 * @generated from protobuf message DeleteTeamMemberGroupRequest
 */
export interface DeleteTeamMemberGroupRequest {
    /**
     * @generated from protobuf field: uint64 groupId = 1;
     */
    groupId: number;
}
/**
 * @generated from protobuf message AddTeamMemberToGroupRequest
 */
export interface AddTeamMemberToGroupRequest {
    /**
     * @generated from protobuf field: uint64 groupId = 1;
     */
    groupId: number;
    /**
     * @generated from protobuf field: uint64 memberUserId = 2;
     */
    memberUserId: number;
}
/**
 * @generated from protobuf message RemoveTeamMemberFromGroupRequest
 */
export interface RemoveTeamMemberFromGroupRequest {
    /**
     * @generated from protobuf field: uint64 groupId = 1;
     */
    groupId: number;
    /**
     * @generated from protobuf field: uint64 memberUserId = 2;
     */
    memberUserId: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class TeamMember$Type extends MessageType<TeamMember> {
    constructor() {
        super("TeamMember", [
            { no: 1, name: "userId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "firstName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "lastName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "profileUrl", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TeamMember>): TeamMember {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = 0;
        message.firstName = "";
        message.lastName = "";
        if (value !== undefined)
            reflectionMergePartial<TeamMember>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamMember): TeamMember {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 userId */ 1:
                    message.userId = reader.uint64().toNumber();
                    break;
                case /* string firstName */ 2:
                    message.firstName = reader.string();
                    break;
                case /* string lastName */ 3:
                    message.lastName = reader.string();
                    break;
                case /* optional string profileUrl */ 4:
                    message.profileUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamMember, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 userId = 1; */
        if (message.userId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.userId);
        /* string firstName = 2; */
        if (message.firstName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.firstName);
        /* string lastName = 3; */
        if (message.lastName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.lastName);
        /* optional string profileUrl = 4; */
        if (message.profileUrl !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.profileUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TeamMember
 */
export const TeamMember = new TeamMember$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamMemberGroup$Type extends MessageType<TeamMemberGroup> {
    constructor() {
        super("TeamMemberGroup", [
            { no: 1, name: "groupId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "memberUserIds", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<TeamMemberGroup>): TeamMemberGroup {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupId = 0;
        message.name = "";
        message.memberUserIds = [];
        if (value !== undefined)
            reflectionMergePartial<TeamMemberGroup>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamMemberGroup): TeamMemberGroup {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 groupId */ 1:
                    message.groupId = reader.uint64().toNumber();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* repeated uint64 memberUserIds */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.memberUserIds.push(reader.uint64().toNumber());
                    else
                        message.memberUserIds.push(reader.uint64().toNumber());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamMemberGroup, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 groupId = 1; */
        if (message.groupId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.groupId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* repeated uint64 memberUserIds = 3; */
        if (message.memberUserIds.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.memberUserIds.length; i++)
                writer.uint64(message.memberUserIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TeamMemberGroup
 */
export const TeamMemberGroup = new TeamMemberGroup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateTeamRequest$Type extends MessageType<CreateTeamRequest> {
    constructor() {
        super("CreateTeamRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateTeamRequest>): CreateTeamRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<CreateTeamRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateTeamRequest): CreateTeamRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateTeamRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateTeamRequest
 */
export const CreateTeamRequest = new CreateTeamRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateTeamResponse$Type extends MessageType<CreateTeamResponse> {
    constructor() {
        super("CreateTeamResponse", [
            { no: 1, name: "teamId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<CreateTeamResponse>): CreateTeamResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamId = 0;
        if (value !== undefined)
            reflectionMergePartial<CreateTeamResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateTeamResponse): CreateTeamResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 teamId */ 1:
                    message.teamId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateTeamResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 teamId = 1; */
        if (message.teamId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.teamId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateTeamResponse
 */
export const CreateTeamResponse = new CreateTeamResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateTeamRequest$Type extends MessageType<UpdateTeamRequest> {
    constructor() {
        super("UpdateTeamRequest", [
            { no: 1, name: "teamId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "iconUrl", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "ownerUserId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateTeamRequest>): UpdateTeamRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamId = 0;
        message.name = "";
        message.iconUrl = "";
        message.ownerUserId = 0;
        if (value !== undefined)
            reflectionMergePartial<UpdateTeamRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateTeamRequest): UpdateTeamRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 teamId */ 1:
                    message.teamId = reader.uint64().toNumber();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string iconUrl */ 3:
                    message.iconUrl = reader.string();
                    break;
                case /* uint64 ownerUserId */ 4:
                    message.ownerUserId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateTeamRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 teamId = 1; */
        if (message.teamId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.teamId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string iconUrl = 3; */
        if (message.iconUrl !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.iconUrl);
        /* uint64 ownerUserId = 4; */
        if (message.ownerUserId !== 0)
            writer.tag(4, WireType.Varint).uint64(message.ownerUserId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateTeamRequest
 */
export const UpdateTeamRequest = new UpdateTeamRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListTeamMembersRequest$Type extends MessageType<ListTeamMembersRequest> {
    constructor() {
        super("ListTeamMembersRequest", [
            { no: 1, name: "teamId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<ListTeamMembersRequest>): ListTeamMembersRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamId = 0;
        if (value !== undefined)
            reflectionMergePartial<ListTeamMembersRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListTeamMembersRequest): ListTeamMembersRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 teamId */ 1:
                    message.teamId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListTeamMembersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 teamId = 1; */
        if (message.teamId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.teamId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListTeamMembersRequest
 */
export const ListTeamMembersRequest = new ListTeamMembersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListTeamMembersResponse$Type extends MessageType<ListTeamMembersResponse> {
    constructor() {
        super("ListTeamMembersResponse", [
            { no: 1, name: "teamMembers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TeamMember }
        ]);
    }
    create(value?: PartialMessage<ListTeamMembersResponse>): ListTeamMembersResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamMembers = [];
        if (value !== undefined)
            reflectionMergePartial<ListTeamMembersResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListTeamMembersResponse): ListTeamMembersResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated TeamMember teamMembers */ 1:
                    message.teamMembers.push(TeamMember.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListTeamMembersResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated TeamMember teamMembers = 1; */
        for (let i = 0; i < message.teamMembers.length; i++)
            TeamMember.internalBinaryWrite(message.teamMembers[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListTeamMembersResponse
 */
export const ListTeamMembersResponse = new ListTeamMembersResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddMemberToTeamRequest$Type extends MessageType<AddMemberToTeamRequest> {
    constructor() {
        super("AddMemberToTeamRequest", [
            { no: 1, name: "teamId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "memberUserId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<AddMemberToTeamRequest>): AddMemberToTeamRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamId = 0;
        message.memberUserId = 0;
        if (value !== undefined)
            reflectionMergePartial<AddMemberToTeamRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddMemberToTeamRequest): AddMemberToTeamRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 teamId */ 1:
                    message.teamId = reader.uint64().toNumber();
                    break;
                case /* uint64 memberUserId */ 2:
                    message.memberUserId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddMemberToTeamRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 teamId = 1; */
        if (message.teamId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.teamId);
        /* uint64 memberUserId = 2; */
        if (message.memberUserId !== 0)
            writer.tag(2, WireType.Varint).uint64(message.memberUserId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AddMemberToTeamRequest
 */
export const AddMemberToTeamRequest = new AddMemberToTeamRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveMemberFromRequest$Type extends MessageType<RemoveMemberFromRequest> {
    constructor() {
        super("RemoveMemberFromRequest", [
            { no: 1, name: "teamId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "memberUserId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveMemberFromRequest>): RemoveMemberFromRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamId = 0;
        message.memberUserId = 0;
        if (value !== undefined)
            reflectionMergePartial<RemoveMemberFromRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveMemberFromRequest): RemoveMemberFromRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 teamId */ 1:
                    message.teamId = reader.uint64().toNumber();
                    break;
                case /* uint64 memberUserId */ 2:
                    message.memberUserId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveMemberFromRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 teamId = 1; */
        if (message.teamId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.teamId);
        /* uint64 memberUserId = 2; */
        if (message.memberUserId !== 0)
            writer.tag(2, WireType.Varint).uint64(message.memberUserId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RemoveMemberFromRequest
 */
export const RemoveMemberFromRequest = new RemoveMemberFromRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListMemberGroupsRequest$Type extends MessageType<ListMemberGroupsRequest> {
    constructor() {
        super("ListMemberGroupsRequest", [
            { no: 1, name: "teamId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<ListMemberGroupsRequest>): ListMemberGroupsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamId = 0;
        if (value !== undefined)
            reflectionMergePartial<ListMemberGroupsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListMemberGroupsRequest): ListMemberGroupsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 teamId */ 1:
                    message.teamId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListMemberGroupsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 teamId = 1; */
        if (message.teamId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.teamId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListMemberGroupsRequest
 */
export const ListMemberGroupsRequest = new ListMemberGroupsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListTeamMemberGroupsResponse$Type extends MessageType<ListTeamMemberGroupsResponse> {
    constructor() {
        super("ListTeamMemberGroupsResponse", [
            { no: 1, name: "groups", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TeamMemberGroup }
        ]);
    }
    create(value?: PartialMessage<ListTeamMemberGroupsResponse>): ListTeamMemberGroupsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groups = [];
        if (value !== undefined)
            reflectionMergePartial<ListTeamMemberGroupsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListTeamMemberGroupsResponse): ListTeamMemberGroupsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated TeamMemberGroup groups */ 1:
                    message.groups.push(TeamMemberGroup.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListTeamMemberGroupsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated TeamMemberGroup groups = 1; */
        for (let i = 0; i < message.groups.length; i++)
            TeamMemberGroup.internalBinaryWrite(message.groups[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListTeamMemberGroupsResponse
 */
export const ListTeamMemberGroupsResponse = new ListTeamMemberGroupsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateTeamMemberGroupRequest$Type extends MessageType<CreateTeamMemberGroupRequest> {
    constructor() {
        super("CreateTeamMemberGroupRequest", [
            { no: 1, name: "teamId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateTeamMemberGroupRequest>): CreateTeamMemberGroupRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamId = 0;
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<CreateTeamMemberGroupRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateTeamMemberGroupRequest): CreateTeamMemberGroupRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 teamId */ 1:
                    message.teamId = reader.uint64().toNumber();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateTeamMemberGroupRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 teamId = 1; */
        if (message.teamId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.teamId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateTeamMemberGroupRequest
 */
export const CreateTeamMemberGroupRequest = new CreateTeamMemberGroupRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateTeamMemberGroupResponse$Type extends MessageType<CreateTeamMemberGroupResponse> {
    constructor() {
        super("CreateTeamMemberGroupResponse", [
            { no: 1, name: "groupId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<CreateTeamMemberGroupResponse>): CreateTeamMemberGroupResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupId = 0;
        if (value !== undefined)
            reflectionMergePartial<CreateTeamMemberGroupResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateTeamMemberGroupResponse): CreateTeamMemberGroupResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 groupId */ 1:
                    message.groupId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateTeamMemberGroupResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 groupId = 1; */
        if (message.groupId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.groupId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateTeamMemberGroupResponse
 */
export const CreateTeamMemberGroupResponse = new CreateTeamMemberGroupResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateTeamMemberGroupRequest$Type extends MessageType<UpdateTeamMemberGroupRequest> {
    constructor() {
        super("UpdateTeamMemberGroupRequest", [
            { no: 1, name: "groupId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateTeamMemberGroupRequest>): UpdateTeamMemberGroupRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupId = 0;
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<UpdateTeamMemberGroupRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateTeamMemberGroupRequest): UpdateTeamMemberGroupRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 groupId */ 1:
                    message.groupId = reader.uint64().toNumber();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateTeamMemberGroupRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 groupId = 1; */
        if (message.groupId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.groupId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateTeamMemberGroupRequest
 */
export const UpdateTeamMemberGroupRequest = new UpdateTeamMemberGroupRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteTeamMemberGroupRequest$Type extends MessageType<DeleteTeamMemberGroupRequest> {
    constructor() {
        super("DeleteTeamMemberGroupRequest", [
            { no: 1, name: "groupId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteTeamMemberGroupRequest>): DeleteTeamMemberGroupRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupId = 0;
        if (value !== undefined)
            reflectionMergePartial<DeleteTeamMemberGroupRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteTeamMemberGroupRequest): DeleteTeamMemberGroupRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 groupId */ 1:
                    message.groupId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteTeamMemberGroupRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 groupId = 1; */
        if (message.groupId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.groupId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteTeamMemberGroupRequest
 */
export const DeleteTeamMemberGroupRequest = new DeleteTeamMemberGroupRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddTeamMemberToGroupRequest$Type extends MessageType<AddTeamMemberToGroupRequest> {
    constructor() {
        super("AddTeamMemberToGroupRequest", [
            { no: 1, name: "groupId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "memberUserId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<AddTeamMemberToGroupRequest>): AddTeamMemberToGroupRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupId = 0;
        message.memberUserId = 0;
        if (value !== undefined)
            reflectionMergePartial<AddTeamMemberToGroupRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddTeamMemberToGroupRequest): AddTeamMemberToGroupRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 groupId */ 1:
                    message.groupId = reader.uint64().toNumber();
                    break;
                case /* uint64 memberUserId */ 2:
                    message.memberUserId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddTeamMemberToGroupRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 groupId = 1; */
        if (message.groupId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.groupId);
        /* uint64 memberUserId = 2; */
        if (message.memberUserId !== 0)
            writer.tag(2, WireType.Varint).uint64(message.memberUserId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AddTeamMemberToGroupRequest
 */
export const AddTeamMemberToGroupRequest = new AddTeamMemberToGroupRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveTeamMemberFromGroupRequest$Type extends MessageType<RemoveTeamMemberFromGroupRequest> {
    constructor() {
        super("RemoveTeamMemberFromGroupRequest", [
            { no: 1, name: "groupId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "memberUserId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveTeamMemberFromGroupRequest>): RemoveTeamMemberFromGroupRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupId = 0;
        message.memberUserId = 0;
        if (value !== undefined)
            reflectionMergePartial<RemoveTeamMemberFromGroupRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveTeamMemberFromGroupRequest): RemoveTeamMemberFromGroupRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 groupId */ 1:
                    message.groupId = reader.uint64().toNumber();
                    break;
                case /* uint64 memberUserId */ 2:
                    message.memberUserId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveTeamMemberFromGroupRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 groupId = 1; */
        if (message.groupId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.groupId);
        /* uint64 memberUserId = 2; */
        if (message.memberUserId !== 0)
            writer.tag(2, WireType.Varint).uint64(message.memberUserId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RemoveTeamMemberFromGroupRequest
 */
export const RemoveTeamMemberFromGroupRequest = new RemoveTeamMemberFromGroupRequest$Type();
/**
 * @generated ServiceType for protobuf service Team
 */
export const Team = new ServiceType("Team", [
    { name: "CreateTeam", options: {}, I: CreateTeamRequest, O: CreateTeamResponse },
    { name: "UpdateTeam", options: {}, I: UpdateTeamRequest, O: Empty },
    { name: "ListTeamMembers", options: {}, I: ListTeamMembersRequest, O: ListTeamMembersResponse },
    { name: "AddMemberToTeam", options: {}, I: AddMemberToTeamRequest, O: Empty },
    { name: "RemoveMemberFromTeam", options: {}, I: RemoveMemberFromRequest, O: Empty },
    { name: "ListMemberGroups", options: {}, I: ListMemberGroupsRequest, O: ListTeamMemberGroupsResponse },
    { name: "CreateMemberGroup", options: {}, I: CreateTeamMemberGroupRequest, O: CreateTeamMemberGroupResponse },
    { name: "UpdateMemberGroup", options: {}, I: UpdateTeamMemberGroupRequest, O: Empty },
    { name: "DeleteMemberGroup", options: {}, I: DeleteTeamMemberGroupRequest, O: Empty },
    { name: "AddMemberToGroup", options: {}, I: AddTeamMemberToGroupRequest, O: Empty },
    { name: "RemoveMemberFromGroup", options: {}, I: RemoveTeamMemberFromGroupRequest, O: Empty }
]);
