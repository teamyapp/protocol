// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "teamy/message.proto" (syntax proto3)
// tslint:disable
import { Empty } from "../google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message CreateMessageRequest
 */
export interface CreateMessageRequest {
    /**
     * @generated from protobuf field: uint64 threadId = 1;
     */
    threadId: number;
    /**
     * @generated from protobuf field: string body = 2;
     */
    body: string;
}
/**
 * @generated from protobuf message CreateMessageResponse
 */
export interface CreateMessageResponse {
    /**
     * @generated from protobuf field: uint64 messageId = 1;
     */
    messageId: number;
}
/**
 * @generated from protobuf message UpdateMessageRequest
 */
export interface UpdateMessageRequest {
    /**
     * @generated from protobuf field: uint64 messageId = 1;
     */
    messageId: number;
    /**
     * @generated from protobuf field: string body = 2;
     */
    body: string;
}
/**
 * @generated from protobuf message DeleteMessageRequest
 */
export interface DeleteMessageRequest {
    /**
     * @generated from protobuf field: uint64 messageId = 1;
     */
    messageId: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class CreateMessageRequest$Type extends MessageType<CreateMessageRequest> {
    constructor() {
        super("CreateMessageRequest", [
            { no: 1, name: "threadId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "body", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateMessageRequest>): CreateMessageRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.threadId = 0;
        message.body = "";
        if (value !== undefined)
            reflectionMergePartial<CreateMessageRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateMessageRequest): CreateMessageRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 threadId */ 1:
                    message.threadId = reader.uint64().toNumber();
                    break;
                case /* string body */ 2:
                    message.body = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateMessageRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 threadId = 1; */
        if (message.threadId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.threadId);
        /* string body = 2; */
        if (message.body !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.body);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateMessageRequest
 */
export const CreateMessageRequest = new CreateMessageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateMessageResponse$Type extends MessageType<CreateMessageResponse> {
    constructor() {
        super("CreateMessageResponse", [
            { no: 1, name: "messageId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<CreateMessageResponse>): CreateMessageResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.messageId = 0;
        if (value !== undefined)
            reflectionMergePartial<CreateMessageResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateMessageResponse): CreateMessageResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 messageId */ 1:
                    message.messageId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateMessageResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 messageId = 1; */
        if (message.messageId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.messageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateMessageResponse
 */
export const CreateMessageResponse = new CreateMessageResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateMessageRequest$Type extends MessageType<UpdateMessageRequest> {
    constructor() {
        super("UpdateMessageRequest", [
            { no: 1, name: "messageId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "body", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateMessageRequest>): UpdateMessageRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.messageId = 0;
        message.body = "";
        if (value !== undefined)
            reflectionMergePartial<UpdateMessageRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateMessageRequest): UpdateMessageRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 messageId */ 1:
                    message.messageId = reader.uint64().toNumber();
                    break;
                case /* string body */ 2:
                    message.body = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateMessageRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 messageId = 1; */
        if (message.messageId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.messageId);
        /* string body = 2; */
        if (message.body !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.body);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateMessageRequest
 */
export const UpdateMessageRequest = new UpdateMessageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteMessageRequest$Type extends MessageType<DeleteMessageRequest> {
    constructor() {
        super("DeleteMessageRequest", [
            { no: 1, name: "messageId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteMessageRequest>): DeleteMessageRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.messageId = 0;
        if (value !== undefined)
            reflectionMergePartial<DeleteMessageRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteMessageRequest): DeleteMessageRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 messageId */ 1:
                    message.messageId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteMessageRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 messageId = 1; */
        if (message.messageId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.messageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteMessageRequest
 */
export const DeleteMessageRequest = new DeleteMessageRequest$Type();
/**
 * @generated ServiceType for protobuf service Message
 */
export const Message = new ServiceType("Message", [
    { name: "CreateMessage", options: {}, I: CreateMessageRequest, O: CreateMessageResponse },
    { name: "UpdateMessage", options: {}, I: UpdateMessageRequest, O: Empty },
    { name: "DeleteMessage", options: {}, I: DeleteMessageRequest, O: Empty }
]);
