// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "teamy/sprint.proto" (syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Sprint } from "./sprint";
import type { Empty } from "../google/protobuf/empty";
import type { AddTaskToSprintRequest } from "./sprint";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { SprintMsg } from "./sprint";
import type { GetActiveSprintRequest } from "./sprint";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service Sprint
 */
export interface ISprintClient {
    /**
     * @generated from protobuf rpc: GetActiveSprint(GetActiveSprintRequest) returns (SprintMsg);
     */
    getActiveSprint(input: GetActiveSprintRequest, options?: RpcOptions): UnaryCall<GetActiveSprintRequest, SprintMsg>;
    /**
     * @generated from protobuf rpc: AddTaskToSprint(AddTaskToSprintRequest) returns (google.protobuf.Empty);
     */
    addTaskToSprint(input: AddTaskToSprintRequest, options?: RpcOptions): UnaryCall<AddTaskToSprintRequest, Empty>;
}
/**
 * @generated from protobuf service Sprint
 */
export class SprintClient implements ISprintClient, ServiceInfo {
    typeName = Sprint.typeName;
    methods = Sprint.methods;
    options = Sprint.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetActiveSprint(GetActiveSprintRequest) returns (SprintMsg);
     */
    getActiveSprint(input: GetActiveSprintRequest, options?: RpcOptions): UnaryCall<GetActiveSprintRequest, SprintMsg> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetActiveSprintRequest, SprintMsg>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AddTaskToSprint(AddTaskToSprintRequest) returns (google.protobuf.Empty);
     */
    addTaskToSprint(input: AddTaskToSprintRequest, options?: RpcOptions): UnaryCall<AddTaskToSprintRequest, Empty> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<AddTaskToSprintRequest, Empty>("unary", this._transport, method, opt, input);
    }
}
