// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "sprint.proto" (syntax proto3)
// tslint:disable
import { Empty } from "./google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * @generated from protobuf message GetActiveSprintRequest
 */
export interface GetActiveSprintRequest {
    /**
     * @generated from protobuf field: uint64 teamId = 1;
     */
    teamId: number;
}
/**
 * @generated from protobuf message SprintMsg
 */
export interface SprintMsg {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp startAt = 2;
     */
    startAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp endAt = 3;
     */
    endAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp createdAt = 4;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: uint64 owningTeamId = 5;
     */
    owningTeamId: number;
}
/**
 * @generated from protobuf message AddTaskToSprintRequest
 */
export interface AddTaskToSprintRequest {
    /**
     * @generated from protobuf field: uint64 taskId = 1;
     */
    taskId: number;
    /**
     * @generated from protobuf field: uint64 sprintId = 2;
     */
    sprintId: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetActiveSprintRequest$Type extends MessageType<GetActiveSprintRequest> {
    constructor() {
        super("GetActiveSprintRequest", [
            { no: 1, name: "teamId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<GetActiveSprintRequest>): GetActiveSprintRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamId = 0;
        if (value !== undefined)
            reflectionMergePartial<GetActiveSprintRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetActiveSprintRequest): GetActiveSprintRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 teamId */ 1:
                    message.teamId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetActiveSprintRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 teamId = 1; */
        if (message.teamId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.teamId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetActiveSprintRequest
 */
export const GetActiveSprintRequest = new GetActiveSprintRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SprintMsg$Type extends MessageType<SprintMsg> {
    constructor() {
        super("SprintMsg", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "startAt", kind: "message", T: () => Timestamp },
            { no: 3, name: "endAt", kind: "message", T: () => Timestamp },
            { no: 4, name: "createdAt", kind: "message", T: () => Timestamp },
            { no: 5, name: "owningTeamId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<SprintMsg>): SprintMsg {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.owningTeamId = 0;
        if (value !== undefined)
            reflectionMergePartial<SprintMsg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SprintMsg): SprintMsg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toNumber();
                    break;
                case /* google.protobuf.Timestamp startAt */ 2:
                    message.startAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.startAt);
                    break;
                case /* google.protobuf.Timestamp endAt */ 3:
                    message.endAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.endAt);
                    break;
                case /* google.protobuf.Timestamp createdAt */ 4:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* uint64 owningTeamId */ 5:
                    message.owningTeamId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SprintMsg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* google.protobuf.Timestamp startAt = 2; */
        if (message.startAt)
            Timestamp.internalBinaryWrite(message.startAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp endAt = 3; */
        if (message.endAt)
            Timestamp.internalBinaryWrite(message.endAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp createdAt = 4; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* uint64 owningTeamId = 5; */
        if (message.owningTeamId !== 0)
            writer.tag(5, WireType.Varint).uint64(message.owningTeamId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SprintMsg
 */
export const SprintMsg = new SprintMsg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddTaskToSprintRequest$Type extends MessageType<AddTaskToSprintRequest> {
    constructor() {
        super("AddTaskToSprintRequest", [
            { no: 1, name: "taskId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "sprintId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<AddTaskToSprintRequest>): AddTaskToSprintRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.taskId = 0;
        message.sprintId = 0;
        if (value !== undefined)
            reflectionMergePartial<AddTaskToSprintRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddTaskToSprintRequest): AddTaskToSprintRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 taskId */ 1:
                    message.taskId = reader.uint64().toNumber();
                    break;
                case /* uint64 sprintId */ 2:
                    message.sprintId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddTaskToSprintRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 taskId = 1; */
        if (message.taskId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.taskId);
        /* uint64 sprintId = 2; */
        if (message.sprintId !== 0)
            writer.tag(2, WireType.Varint).uint64(message.sprintId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AddTaskToSprintRequest
 */
export const AddTaskToSprintRequest = new AddTaskToSprintRequest$Type();
/**
 * @generated ServiceType for protobuf service Sprint
 */
export const Sprint = new ServiceType("Sprint", [
    { name: "GetActiveSprint", options: {}, I: GetActiveSprintRequest, O: SprintMsg },
    { name: "AddTaskToSprint", options: {}, I: AddTaskToSprintRequest, O: Empty }
]);
